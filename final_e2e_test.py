#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π E2E —Ç–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
"""

import asyncio
import aiohttp
import websockets
import json
import time
import os
from dotenv import load_dotenv
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class FinalE2ETester:
    """–§–∏–Ω–∞–ª—å–Ω—ã–π E2E —Ç–µ—Å—Ç–µ—Ä —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
    
    def __init__(self):
        self.api_base = "http://localhost:8000"
        self.ws_base = "ws://localhost:8000"
        self.lm_studio_base = "http://localhost:1234"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
        self.api_token = os.getenv('API_TOKEN')
        if not self.api_token:
            raise ValueError("API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.headers = {
            "Authorization": f"Bearer {self.api_token}",
            "Content-Type": "application/json"
        }
        
        self.results = []
    
    def log_result(self, test_name: str, success: bool, duration: float, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}: {duration:.2f}s {details}")
        self.results.append({
            "name": test_name,
            "success": success,
            "duration": duration,
            "details": details
        })
    
    async def test_api_connectivity(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        start_time = time.time()
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.api_base}/health", timeout=10) as response:
                    duration = time.time() - start_time
                    if response.status == 200:
                        data = await response.json()
                        endpoints = data.get('components', {}).get('endpoints', 0)
                        self.log_result("API Connectivity", True, duration, f"({endpoints} endpoints)")
                        return True
                    else:
                        self.log_result("API Connectivity", False, duration, f"HTTP {response.status}")
                        return False
        except Exception as e:
            duration = time.time() - start_time
            self.log_result("API Connectivity", False, duration, str(e))
            return False
    
    async def test_lm_studio(self):
        """–¢–µ—Å—Ç LM Studio"""
        start_time = time.time()
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.lm_studio_base}/v1/models", timeout=10) as response:
                    duration = time.time() - start_time
                    if response.status == 200:
                        data = await response.json()
                        models_count = len(data.get('data', []))
                        self.log_result("LM Studio", True, duration, f"({models_count} models)")
                        return True
                    else:
                        self.log_result("LM Studio", False, duration, f"HTTP {response.status}")
                        return False
        except Exception as e:
            duration = time.time() - start_time
            self.log_result("LM Studio", False, duration, str(e))
            return False
    
    async def test_websocket_with_auth(self):
        """–¢–µ—Å—Ç WebSocket —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π"""
        start_time = time.time()
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –≤ query parameter
            uri = f"{self.ws_base}/ws?token={self.api_token}"
            async with websockets.connect(uri, timeout=10) as websocket:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                test_message = json.dumps({"type": "test", "message": "WebSocket test"})
                await websocket.send(test_message)
                
                # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
                try:
                    response = await asyncio.wait_for(websocket.recv(), timeout=3.0)
                    duration = time.time() - start_time
                    self.log_result("WebSocket Auth", True, duration, "Connection OK")
                    return True
                except asyncio.TimeoutError:
                    duration = time.time() - start_time
                    self.log_result("WebSocket Auth", True, duration, "Connected (no response)")
                    return True
        except Exception as e:
            duration = time.time() - start_time
            self.log_result("WebSocket Auth", False, duration, str(e))
            return False
    
    async def test_training_status(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
        start_time = time.time()
        try:
            async with aiohttp.ClientSession(headers=self.headers) as session:
                async with session.get(f"{self.api_base}/api/training/status", timeout=10) as response:
                    duration = time.time() - start_time
                    if response.status == 200:
                        data = await response.json()
                        is_training = data.get('is_training', False)
                        self.log_result("Training Status", True, duration, f"(training: {is_training})")
                        return True
                    else:
                        error_text = await response.text()
                        self.log_result("Training Status", False, duration, f"HTTP {response.status}")
                        return False
        except Exception as e:
            duration = time.time() - start_time
            self.log_result("Training Status", False, duration, str(e))
            return False
    
    async def test_rag_search(self):
        """–¢–µ—Å—Ç RAG –ø–æ–∏—Å–∫–∞"""
        start_time = time.time()
        try:
            query_data = {"query": "–°–ü 31 —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è", "k": 3}
            async with aiohttp.ClientSession(headers=self.headers) as session:
                async with session.post(f"{self.api_base}/query", json=query_data, timeout=30) as response:
                    duration = time.time() - start_time
                    if response.status == 200:
                        data = await response.json()
                        results_count = len(data.get('results', []))
                        ndcg = data.get('ndcg', 0)
                        self.log_result("RAG Search", True, duration, f"({results_count} results, NDCG: {ndcg})")
                        return True
                    else:
                        error_text = await response.text()
                        self.log_result("RAG Search", False, duration, f"HTTP {response.status}")
                        return False
        except Exception as e:
            duration = time.time() - start_time
            self.log_result("RAG Search", False, duration, str(e))
            return False
    
    async def test_ai_request(self):
        """–¢–µ—Å—Ç AI –∑–∞–ø—Ä–æ—Å–∞"""
        start_time = time.time()
        try:
            ai_data = {
                "prompt": "–ü—Ä–∏–≤–µ—Ç! –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞",
                "model": "deepseek/deepseek-r1-0528-qwen3-8b"
            }
            async with aiohttp.ClientSession(headers=self.headers) as session:
                async with session.post(f"{self.api_base}/ai", json=ai_data, timeout=30) as response:
                    duration = time.time() - start_time
                    if response.status == 200:
                        data = await response.json()
                        status = data.get('status', 'unknown')
                        task_id = data.get('task_id', 'N/A')
                        self.log_result("AI Request", True, duration, f"({status}, task: {task_id})")
                        return True
                    else:
                        error_text = await response.text()
                        self.log_result("AI Request", False, duration, f"HTTP {response.status}")
                        return False
        except Exception as e:
            duration = time.time() - start_time
            self.log_result("AI Request", False, duration, str(e))
            return False
    
    async def test_coordinator_light(self):
        """–õ–µ–≥–∫–∏–π —Ç–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ (–±–µ–∑ timeout)"""
        start_time = time.time()
        try:
            coord_data = {
                "query": "–ù–∞–π–¥–∏ –°–ü 31.13330",
                "source": "test",
                "user_id": "test_user"
            }
            async with aiohttp.ClientSession(headers=self.headers) as session:
                async with session.post(f"{self.api_base}/submit_query", json=coord_data, timeout=30) as response:
                    duration = time.time() - start_time
                    if response.status == 200:
                        data = await response.json()
                        has_plan = 'plan' in data
                        has_results = 'results' in data
                        status = data.get('status', 'unknown')
                        self.log_result("Coordinator Light", True, duration, f"({status}, plan: {has_plan}, results: {has_results})")
                        return True
                    else:
                        error_text = await response.text()
                        self.log_result("Coordinator Light", False, duration, f"HTTP {response.status}")
                        return False
        except Exception as e:
            duration = time.time() - start_time
            self.log_result("Coordinator Light", False, duration, str(e))
            return False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –§–∏–Ω–∞–ª—å–Ω–æ–µ E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
        print(f"üîë –¢–æ–∫–µ–Ω: {self.api_token[:20]}...")
        print("=" * 60)
        
        tests = [
            ("üåê Connectivity", [
                self.test_api_connectivity,
                self.test_lm_studio,
                self.test_websocket_with_auth,
            ]),
            ("üîß Core Functions", [
                self.test_training_status,
                self.test_rag_search,
            ]),
            ("ü§ñ AI & Coordinator", [
                self.test_ai_request,
                self.test_coordinator_light,
            ])
        ]
        
        for category, test_functions in tests:
            print(f"\n{category}:")
            for test_func in test_functions:
                await test_func()
        
        return self.results
    
    def generate_summary(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏"""
        total = len(self.results)
        passed = sum(1 for r in self.results if r['success'])
        
        print(f"\n{'='*60}")
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê")
        print("="*60)
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ ({passed/total*100:.1f}%)")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total-passed}/{total} —Ç–µ—Å—Ç–æ–≤")
        
        if passed == total:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! E2E –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é!")
        elif passed >= total * 0.8:
            print("\n‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω—ã, –µ—Å—Ç—å –º–µ–ª–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        elif passed >= total * 0.5:
            print("\nüîß –ü–æ–ª–æ–≤–∏–Ω–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∞, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        else:
            print("\nüö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ñ—É–Ω–∫—Ü–∏–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–∞–ª–æ–≤
        failed = [r for r in self.results if not r['success']]
        if failed:
            print(f"\n‚ùå –ü—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ —Ç–µ—Å—Ç—ã:")
            for fail in failed:
                print(f"   ‚Ä¢ {fail['name']}: {fail['details']}")
        
        print(f"\nüìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}")
        
        return {
            "total": total,
            "passed": passed,
            "failed": total - passed,
            "success_rate": passed/total*100 if total > 0 else 0,
            "results": self.results
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        tester = FinalE2ETester()
        await tester.run_all_tests()
        summary = tester.generate_summary()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open("C:\\Bldr\\final_e2e_results.json", "w", encoding="utf-8") as f:
            json.dump(summary, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ final_e2e_results.json")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())