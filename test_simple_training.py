#!/usr/bin/env python3
"""
Simple training test without WebSocket complexity
Focus on core training functionality
"""

import requests
import time
from dotenv import load_dotenv
import os

load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')
headers = {
    'Authorization': f'Bearer {API_TOKEN}',
    'Content-Type': 'application/json'
}

def test_simple_training():
    print("üîß –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è –±–µ–∑ WebSocket")
    print("=" * 50)
    
    # Test 1: API health
    print("üì° –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API...")
    try:
        health_response = requests.get('http://localhost:8000/health', timeout=10)
        if health_response.status_code == 200:
            health_data = health_response.json()
            print(f"‚úÖ API —Å—Ç–∞—Ç—É—Å: {health_data.get('status', 'unknown')}")
            
            # Show components
            components = health_data.get('components', {})
            for component, status in components.items():
                print(f"   üì¶ {component}: {status}")
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health_response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        return
    
    # Test 2: Initial training status
    print("\nüìä –®–∞–≥ 2: –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è...")
    try:
        status_response = requests.get(
            'http://localhost:8000/api/training/status',
            headers=headers,
            timeout=10
        )
        
        if status_response.status_code == 200:
            status_data = status_response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å:")
            print(f"   üîÑ is_training: {status_data.get('is_training', False)}")
            print(f"   üìà progress: {status_data.get('progress', 0)}%")
            print(f"   üè∑Ô∏è stage: {status_data.get('current_stage', 'unknown')}")
            
            if status_data.get('is_training'):
                print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –æ–±—É—á–∞–µ—Ç—Å—è, –¥–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
                return
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
    
    # Test 3: Check if we have a small test directory
    test_dirs = [
        "C:\\Bldr\\docs",
        "C:\\Bldr\\test_docs"
    ]
    
    test_dir = None
    for directory in test_dirs:
        if os.path.exists(directory):
            # Count files in directory
            import glob
            files = glob.glob(os.path.join(directory, '**', '*.*'), recursive=True)
            doc_files = [f for f in files if f.lower().endswith(('.pdf', '.doc', '.docx', '.txt'))]
            
            if len(doc_files) > 0 and len(doc_files) < 20:  # Small directory
                test_dir = directory
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {test_dir} ({len(doc_files)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)")
                break
    
    if not test_dir:
        print("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...")
        test_dir = "I:\\docs\\downloaded"
    
    # Test 4: Start training
    print(f"\nüöÄ –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ {test_dir}...")
    
    try:
        train_response = requests.post(
            'http://localhost:8000/train',
            json={'custom_dir': test_dir},
            headers=headers,
            timeout=30
        )
        
        if train_response.status_code == 200:
            train_data = train_response.json()
            print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ:")
            print(f"   üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {train_data.get('custom_dir', 'N/A')}")
            print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {train_data.get('message', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {train_response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {train_response.text}")
            return
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è: {str(e)}")
        return
    
    # Test 5: Monitor for 5 minutes
    print(f"\nüìä –®–∞–≥ 4: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (5 –º–∏–Ω—É—Ç)...")
    
    start_time = time.time()
    max_duration = 300  # 5 minutes
    check_interval = 15  # Check every 15 seconds
    
    training_started = False
    training_completed = False
    last_stage = None
    last_progress = 0
    
    while (time.time() - start_time) < max_duration and not training_completed:
        try:
            status_response = requests.get(
                'http://localhost:8000/api/training/status',
                headers=headers,
                timeout=10
            )
            
            if status_response.status_code == 200:
                status_data = status_response.json()
                is_training = status_data.get('is_training', False)
                progress = status_data.get('progress', 0)
                stage = status_data.get('current_stage', 'unknown')
                message = status_data.get('message', 'No message')
                elapsed_api = status_data.get('elapsed_seconds', 0)
                
                elapsed_test = int(time.time() - start_time)
                
                # Only print if something changed
                if stage != last_stage or progress != last_progress:
                    print(f"   [{elapsed_test:3}s] üìà {stage}: {message}")
                    print(f"           üéØ Progress: {progress}% | Training: {is_training}")
                    
                    if elapsed_api > 0:
                        print(f"           ‚è±Ô∏è API elapsed: {elapsed_api}s")
                
                # Track changes
                last_stage = stage
                last_progress = progress
                
                # Check if training actually started
                if is_training and not training_started:
                    print("üéâ –û–±—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–æ—Å—å!")
                    training_started = True
                
                # Check completion conditions
                if not is_training and training_started:
                    if stage in ["completed", "complete"] or progress >= 100:
                        print("üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                        training_completed = True
                        break
                    elif stage == "error":
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {message}")
                        break
                
                # Special case: if we never started training but time passed
                if not training_started and elapsed_test > 30:
                    print("‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥")
                    if stage == "error":
                        print(f"   üí• –û—à–∏–±–∫–∞: {message}")
                        break
                    
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        
        time.sleep(check_interval)
    
    # Final summary
    print(f"\nüìã –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    final_time = time.time() - start_time
    print(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {int(final_time)}s")
    print(f"   üöÄ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–ª–æ—Å—å: {'‚úÖ' if training_started else '‚ùå'}")
    print(f"   üèÅ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å: {'‚úÖ' if training_completed else '‚ùå'}")
    
    if not training_started:
        print("\nüí° –ü—Ä–æ–±–ª–µ–º–∞: –û–±—É—á–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ API —Å–µ—Ä–≤–µ—Ä–∞")
        print("   - –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å trainer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π")
        print("   - –ò–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å callback —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
    
    elif training_started and not training_completed:
        print("\nüí° –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –∑–∞ 5 –º–∏–Ω—É—Ç")
        print("   - –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –±–æ–ª—å—à–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print("   - –ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∂–µ")
    
    else:
        print("\nüéâ –£—Å–ø–µ—Ö! –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # Quick query test
        print(f"\nüîç –ë–æ–Ω—É—Å: –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞...")
        try:
            query_response = requests.post(
                'http://localhost:8000/query',
                json={'query': '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', 'k': 3},
                headers=headers,
                timeout=30
            )
            
            if query_response.status_code == 200:
                query_data = query_response.json()
                results = query_data.get('results', [])
                ndcg = query_data.get('ndcg', 0)
                
                print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}, NDCG: {ndcg:.3f}")
                
                if results:
                    best_score = results[0].get('score', 0)
                    print(f"   üéØ –õ—É—á—à–∏–π score: {best_score:.3f}")
                    if best_score > 0:
                        print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±—É—á–µ–Ω–∞!")
                    else:
                        print("   ‚ö†Ô∏è Score –Ω–∏–∑–∫–∏–π, –≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏")
                else:
                    print("   ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç - —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –æ–±—É—á–µ–Ω–∞")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {query_response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

if __name__ == '__main__':
    test_simple_training()