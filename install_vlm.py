#!/usr/bin/env python3
"""
ENTERPRISE RAG 3.0: VLM Installation Script
–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è Vision-Language Model
"""

import subprocess
import sys
import os
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def install_package(package):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ pip"""
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
        logger.info(f"‚úÖ {package} installed successfully")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Failed to install {package}: {e}")
        return False

def check_gpu():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU"""
    try:
        import torch
        if torch.cuda.is_available():
            logger.info(f"üöÄ CUDA available: {torch.cuda.get_device_name(0)}")
            return True
        elif torch.backends.mps.is_available():
            logger.info("üçé MPS (Apple Silicon) available")
            return True
        else:
            logger.warning("‚ö†Ô∏è No GPU acceleration available, using CPU")
            return False
    except ImportError:
        logger.warning("‚ö†Ô∏è PyTorch not installed, cannot check GPU")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ VLM"""
    
    logger.info("üöÄ ENTERPRISE RAG 3.0: Installing VLM Dependencies")
    
    # –ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    basic_packages = [
        "torch>=2.0.0",
        "torchvision>=0.15.0", 
        "transformers>=4.30.0",
        "Pillow>=9.0.0",
        "opencv-python>=4.8.0",
        "pdf2image>=1.16.0",
        "pytesseract>=0.3.10",
        "accelerate>=0.20.0"
    ]
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è GPU
    gpu_packages = [
        "bitsandbytes>=0.39.0"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU
    has_gpu = check_gpu()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã
    logger.info("üì¶ Installing basic packages...")
    success_count = 0
    for package in basic_packages:
        if install_package(package):
            success_count += 1
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º GPU –ø–∞–∫–µ—Ç—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if has_gpu:
        logger.info("üöÄ Installing GPU acceleration packages...")
        for package in gpu_packages:
            if install_package(package):
                success_count += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É
    logger.info("üîç Testing VLM installation...")
    
    try:
        from vlm_processor import VLMProcessor
        vlm = VLMProcessor()
        if vlm.is_available():
            logger.info("‚úÖ VLM processor is ready!")
        else:
            logger.warning("‚ö†Ô∏è VLM processor not fully available")
    except Exception as e:
        logger.error(f"‚ùå VLM test failed: {e}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_packages = len(basic_packages) + (len(gpu_packages) if has_gpu else 0)
    logger.info(f"üìä Installation complete: {success_count}/{total_packages} packages installed")
    
    if success_count == total_packages:
        logger.info("üéâ VLM installation successful!")
        logger.info("üí° You can now use VLM features in your RAG trainer")
    else:
        logger.warning("‚ö†Ô∏è Some packages failed to install")
        logger.info("üí° You can still use the RAG trainer without VLM (fallback mode)")

if __name__ == "__main__":
    main()
