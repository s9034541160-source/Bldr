#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Telegram Bot Integration
=============================
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ RAG API —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º–∏
"""

import requests
import json
import time
import os
import jwt
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
API_BASE_URL = "http://localhost:8000"  # –û—Å–Ω–æ–≤–Ω–æ–π API —Å–µ—Ä–≤–µ—Ä
TEST_API_URL = "http://localhost:8001"   # –¢–µ—Å—Ç–æ–≤—ã–π API —Å–µ—Ä–≤–µ—Ä
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'TEST_TOKEN')

def generate_test_jwt():
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω"""
    secret_key = os.getenv("SECRET_KEY", "your-secret-key-change-in-production")
    
    payload = {
        "sub": "telegram_bot_test",
        "exp": datetime.utcnow() + timedelta(hours=24),
        "iat": datetime.utcnow()
    }
    
    return jwt.encode(payload, secret_key, algorithm="HS256")

def get_auth_headers():
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è API"""
    token = generate_test_jwt()
    return {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }

def test_api_availability():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Å–µ—Ä–≤–µ—Ä–æ–≤...")
    
    servers = [
        ("–û—Å–Ω–æ–≤–Ω–æ–π API", API_BASE_URL),
        ("–¢–µ—Å—Ç–æ–≤—ã–π API", TEST_API_URL)
    ]
    
    available_servers = []
    
    for name, url in servers:
        try:
            response = requests.get(f"{url}/health", timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ {name} ({url}): –¥–æ—Å—Ç—É–ø–µ–Ω")
                available_servers.append(url)
            else:
                print(f"‚ùå {name} ({url}): –æ—à–∏–±–∫–∞ {response.status_code}")
        except Exception as e:
            print(f"‚ùå {name} ({url}): –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - {e}")
    
    return available_servers

def test_rag_search_endpoint(api_url):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å RAG search —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG search –Ω–∞ {api_url}...")
    
    headers = get_auth_headers()
    search_payload = {
        'query': '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã –±–µ—Ç–æ–Ω',
        'k': 3,
        'threshold': 0.3,
        'include_metadata': True
    }
    
    try:
        response = requests.post(
            f"{api_url}/api/rag/search",
            json=search_payload,
            headers=headers,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ RAG search —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   üìä –ù–∞–π–¥–µ–Ω–æ: {data.get('total_found')} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            print(f"   ‚ö° –í—Ä–µ–º—è: {data.get('processing_time', 0):.2f}s")
            print(f"   üß† –ú–µ—Ç–æ–¥: {data.get('search_method')}")
            return True
        else:
            print(f"‚ùå RAG search –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå RAG search –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_ai_chat_endpoint(api_url):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å AI chat —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    print(f"\nüí¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI chat –Ω–∞ {api_url}...")
    
    headers = get_auth_headers()
    chat_payload = {
        'message': '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –±–µ—Ç–æ–Ω—É –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
        'context_search': True,
        'max_context': 2,
        'agent_role': 'coordinator'
    }
    
    try:
        response = requests.post(
            f"{api_url}/api/ai/chat",
            json=chat_payload,
            headers=headers,
            timeout=60
        )
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ AI chat —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   ü§ñ –ê–≥–µ–Ω—Ç: {data.get('agent_used')}")
            print(f"   üìÅ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {len(data.get('context_used', []))} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            print(f"   ‚ö° –í—Ä–µ–º—è: {data.get('processing_time', 0):.2f}s")
            print(f"   üí¨ –û—Ç–≤–µ—Ç: {data.get('response', '')[:100]}...")
            return True
        else:
            print(f"‚ùå AI chat –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå AI chat –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_rag_status_endpoint(api_url):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å RAG status —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG status –Ω–∞ {api_url}...")
    
    headers = get_auth_headers()
    
    try:
        response = requests.get(
            f"{api_url}/api/rag/status",
            headers=headers,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ RAG status —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   üîÑ –û–±—É—á–µ–Ω–∏–µ: {'–î–∞' if data.get('is_training') else '–ù–µ—Ç'}")
            print(f"   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {data.get('progress')}%")
            print(f"   üèóÔ∏è –≠—Ç–∞–ø: {data.get('current_stage')}")
            print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {data.get('total_documents')}")
            print(f"   üß© –ß–∞–Ω–∫–æ–≤: {data.get('total_chunks')}")
            return True
        else:
            print(f"‚ùå RAG status –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå RAG status –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def test_rag_train_endpoint(api_url):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å RAG train —ç–Ω–¥–ø–æ–∏–Ω—Ç (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)"""
    print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG train –Ω–∞ {api_url}...")
    
    headers = get_auth_headers()
    training_payload = {
        'base_dir': None,
        'max_files': 1,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
        'force_retrain': False,
        'doc_types': None
    }
    
    try:
        # –ù–µ –±—É–¥–µ–º –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        print("‚ÑπÔ∏è –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–æ–±—É—á–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è)")
        print(f"   üìã Payload: {training_payload}")
        print("‚úÖ RAG train —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
    except Exception as e:
        print(f"‚ùå RAG train –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        return False

def simulate_bot_functions(api_url):
    """–°–∏–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π Telegram –±–æ—Ç–∞"""
    print(f"\nü§ñ –°–∏–º—É–ª—è—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π Telegram –±–æ—Ç–∞ —Å {api_url}...")
    
    bot_functions = [
        ("query_command", lambda: test_rag_search_endpoint(api_url)),
        ("handle_text", lambda: test_ai_chat_endpoint(api_url)),
        ("metrics_command", lambda: test_rag_status_endpoint(api_url)),
        ("train_command", lambda: test_rag_train_endpoint(api_url))
    ]
    
    results = []
    
    for func_name, test_func in bot_functions:
        print(f"\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {func_name}")
        try:
            success = test_func()
            results.append((func_name, success))
            if success:
                print(f"‚úÖ {func_name}: –ü–†–û–®–ï–õ")
            else:
                print(f"‚ùå {func_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {func_name}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - {e}")
            results.append((func_name, False))
        
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    return results

def test_telegram_bot_config():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram –±–æ—Ç–∞"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞...")
    
    config_items = [
        ("TELEGRAM_BOT_TOKEN", TELEGRAM_BOT_TOKEN),
        ("API_TOKEN", os.getenv('API_TOKEN')),
        ("SECRET_KEY", os.getenv('SECRET_KEY')),
        ("LLM_BASE_URL", os.getenv('LLM_BASE_URL'))
    ]
    
    config_ok = True
    
    for name, value in config_items:
        if not value or value in ['', 'YOUR_TELEGRAM_BOT_TOKEN_HERE', 'test_token']:
            print(f"‚ö†Ô∏è {name}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            if name == "TELEGRAM_BOT_TOKEN":
                config_ok = False
        else:
            print(f"‚úÖ {name}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    return config_ok

def generate_integration_report(api_results):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\n" + "="*50)
    print("üìã –û–¢–ß–ï–¢ –û–ë –ò–ù–¢–ï–ì–†–ê–¶–ò–ò TELEGRAM –ë–û–¢–ê")
    print("="*50)
    
    total_tests = len(api_results)
    passed_tests = sum(1 for _, success in api_results if success)
    
    print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"   –ü—Ä–æ—à–ª–∏: {passed_tests}")
    print(f"   –ü—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å: {total_tests - passed_tests}")
    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {passed_tests/total_tests*100:.1f}%")
    
    print(f"\nüîç –î–µ—Ç–∞–ª–∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º:")
    for func_name, success in api_results:
        status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if success else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        print(f"   {func_name}: {status}")
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if passed_tests == total_tests:
        print("   üéâ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
    else:
        print("   ‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.")
        print("   üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç–æ–∫–µ–Ω—ã.")
        print("   üìö –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ RAG —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∞.")
    
    return passed_tests == total_tests

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò TELEGRAM –ë–û–¢–ê")
    print("="*50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_ok = test_telegram_bot_config()
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
    available_servers = test_api_availability()
    
    if not available_servers:
        print("\n‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!")
        return False
    
    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö
    all_results = []
    
    for api_url in available_servers:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å API —Å–µ—Ä–≤–µ—Ä–æ–º: {api_url}")
        results = simulate_bot_functions(api_url)
        all_results.extend(results)
    
    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    success = generate_integration_report(all_results)
    
    # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"\n{'='*50}")
    if success and config_ok:
        print("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø TELEGRAM –ë–û–¢–ê: –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£!")
    elif success:
        print("‚úÖ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø TELEGRAM –ë–û–¢–ê: –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û –ì–û–¢–û–í–ê")
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
    else:
        print("‚ùå –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø TELEGRAM –ë–û–¢–ê: –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
    
    print(f"{'='*50}")
    
    return success

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)