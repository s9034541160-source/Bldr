#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö RAG —Å–∏—Å—Ç–µ–º—ã
"""

import requests
import json
import os
from neo4j import GraphDatabase

def check_qdrant():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant"""
    print("=== –ü–†–û–í–ï–†–ö–ê QDRANT ===")
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
        response = requests.get('http://localhost:6333/collections/enterprise_docs')
        if response.status_code == 200:
            data = response.json()
            print(f"OK –ö–æ–ª–ª–µ–∫—Ü–∏—è enterprise_docs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = data.get('result', {})
            points_count = stats.get('points_count', 0)
            vectors_count = stats.get('vectors_count', 0)
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   - –¢–æ—á–∫–∏ (points): {points_count}")
            print(f"   - –í–µ–∫—Ç–æ—Ä—ã: {vectors_count}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            scroll_response = requests.post('http://localhost:6333/collections/enterprise_docs/points/scroll', 
                                         json={'limit': 5})
            if scroll_response.status_code == 200:
                points_data = scroll_response.json()
                points = points_data.get('result', {}).get('points', [])
                
                print(f"\nüîç –û–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö ({len(points)} —Ç–æ—á–µ–∫):")
                for i, point in enumerate(points[:3]):
                    print(f"\n   –¢–æ—á–∫–∞ {i+1}:")
                    print(f"     ID: {point.get('id')}")
                    payload = point.get('payload', {})
                    print(f"     –ö–ª—é—á–∏ payload: {list(payload.keys())}")
                    
                    if 'content' in payload:
                        content = payload['content']
                        preview = content[:150] + '...' if len(content) > 150 else content
                        print(f"     –ö–æ–Ω—Ç–µ–Ω—Ç: {preview}")
                    
                    if 'file_path' in payload:
                        print(f"     –§–∞–π–ª: {payload['file_path']}")
                    
                    if 'doc_type' in payload:
                        print(f"     –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {payload['doc_type']}")
                        
        else:
            print(f"ERROR –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Qdrant: {response.status_code}")
            
    except Exception as e:
        print(f"ERROR –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Qdrant: {e}")

def check_neo4j():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Neo4j"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê NEO4J ===")
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Neo4j
        driver = GraphDatabase.driver("bolt://localhost:7687", auth=None)
        
        with driver.session() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤
            result = session.run("MATCH (n) RETURN labels(n) as labels, count(n) as count")
            nodes_info = {}
            for record in result:
                labels = record['labels']
                count = record['count']
                if labels:
                    label = labels[0]
                    nodes_info[label] = count
            
            print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–∑–ª–æ–≤:")
            for label, count in nodes_info.items():
                print(f"   - {label}: {count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∏
            result = session.run("MATCH ()-[r]->() RETURN type(r) as rel_type, count(r) as count")
            relationships = {}
            for record in result:
                rel_type = record['rel_type']
                count = record['count']
                relationships[rel_type] = count
            
            print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–≤—è–∑–µ–π:")
            for rel_type, count in relationships.items():
                print(f"   - {rel_type}: {count}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—ã (Work)
            result = session.run("MATCH (w:Work) RETURN w.name as name, w.doc_type as doc_type LIMIT 5")
            works = list(result)
            if works:
                print(f"\nüîç –û–±—Ä–∞–∑—Ü—ã —Ä–∞–±–æ—Ç ({len(works)}):")
                for i, work in enumerate(works):
                    print(f"   {i+1}. {work['name']} (—Ç–∏–ø: {work['doc_type']})")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
            result = session.run("MATCH (d:Document) RETURN d.path as path, d.doc_type as doc_type LIMIT 3")
            docs = list(result)
            if docs:
                print(f"\nüîç –û–±—Ä–∞–∑—Ü—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ({len(docs)}):")
                for i, doc in enumerate(docs):
                    print(f"   {i+1}. {doc['path']} (—Ç–∏–ø: {doc['doc_type']})")
                    
        driver.close()
        print("OK Neo4j –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"ERROR –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Neo4j: {e}")

def check_processed_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ processed_files.json"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê PROCESSED_FILES.JSON ===")
    try:
        if os.path.exists("processed_files.json"):
            with open("processed_files.json", 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            if isinstance(data, list):
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞—Ä–∏
                valid_files = [item for item in data if isinstance(item, dict)]
                print(f"OK –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(valid_files)}")
                
                if valid_files:
                    print("\nüîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
                    for i, file_info in enumerate(valid_files[-3:]):
                        print(f"   {i+1}. {file_info.get('file_path', 'N/A')}")
                        print(f"      –¢–∏–ø: {file_info.get('doc_type', 'N/A')}")
                        print(f"      –•–µ—à: {file_info.get('file_hash', 'N/A')[:16]}...")
                        print(f"      –û–±—Ä–∞–±–æ—Ç–∞–Ω: {file_info.get('processed_at', 'N/A')}")
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {type(data)}")
        else:
            print("ERROR –§–∞–π–ª processed_files.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except Exception as e:
        print(f"ERROR –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ processed_files.json: {e}")

def check_qa_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Q&A –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê Q&A –î–ê–ù–ù–´–• ===")
    try:
        # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å Q&A –¥–∞–Ω–Ω—ã–º–∏
        qa_files = []
        for root, dirs, files in os.walk("."):
            for file in files:
                if "qa" in file.lower() or "question" in file.lower():
                    qa_files.append(os.path.join(root, file))
        
        if qa_files:
            print(f"OK –ù–∞–π–¥–µ–Ω–æ Q&A —Ñ–∞–π–ª–æ–≤: {len(qa_files)}")
            for qa_file in qa_files[:3]:
                print(f"   - {qa_file}")
        else:
            print("WARNING Q&A —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ Qdrant Q&A –¥–∞–Ω–Ω—ã–µ
        try:
            scroll_response = requests.post('http://localhost:6333/collections/enterprise_docs/points/scroll', 
                                         json={'limit': 10, 'with_payload': True})
            if scroll_response.status_code == 200:
                points_data = scroll_response.json()
                points = points_data.get('result', {}).get('points', [])
                
                qa_count = 0
                for point in points:
                    payload = point.get('payload', {})
                    if 'qa_pairs' in payload or 'question' in payload or 'answer' in payload:
                        qa_count += 1
                
                print(f"üìä Q&A –ø–∞—Ä –≤ Qdrant: {qa_count}")
                
        except Exception as e:
            print(f"WARNING –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Q&A –≤ Qdrant: {e}")
            
    except Exception as e:
        print(f"ERROR –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Q&A –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    print("–ü–†–û–í–ï–†–ö–ê –ù–ê–ü–û–õ–ù–ï–ù–ò–Ø –ë–ê–ó –î–ê–ù–ù–´–• RAG –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    check_qdrant()
    check_neo4j()
    check_processed_files()
    check_qa_data()
    
    print("\n" + "=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")