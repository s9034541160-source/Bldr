#!/usr/bin/env python3
"""
End-to-End Test for Custom Directory Training
Test full pipeline: Frontend ‚Üí API ‚Üí Training ‚Üí RAG ‚Üí Query Testing

Simulates user workflow:
1. User selects custom directory in frontend (I:\docs\downloaded)
2. System scans and processes files
3. Trains RAG system on new documents
4. Tests query performance on trained data
"""

import requests
import json
import time
import os
import asyncio
from pathlib import Path
from dotenv import load_dotenv
from typing import Dict, List, Any

# Load environment variables
load_dotenv()

API_BASE = 'http://localhost:8000'
API_TOKEN = os.getenv('API_TOKEN')

def get_auth_headers():
    """Get authentication headers for API calls"""
    headers = {
        "Content-Type": "application/json"
    }
    if API_TOKEN:
        headers['Authorization'] = f'Bearer {API_TOKEN}'
    return headers

def check_directory_exists(directory_path: str) -> Dict[str, Any]:
    """Check if directory exists and scan for documents"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {directory_path}")
    
    path = Path(directory_path)
    if not path.exists():
        return {
            "exists": False,
            "error": f"Directory {directory_path} does not exist"
        }
    
    if not path.is_dir():
        return {
            "exists": False,
            "error": f"{directory_path} is not a directory"
        }
    
    # Scan for document files
    document_extensions = {'.pdf', '.doc', '.docx', '.txt', '.rtf', '.xls', '.xlsx', '.csv'}
    files_found = []
    total_size = 0
    
    try:
        for file_path in path.rglob("*"):
            if file_path.is_file() and file_path.suffix.lower() in document_extensions:
                file_size = file_path.stat().st_size
                files_found.append({
                    "name": file_path.name,
                    "path": str(file_path),
                    "size": file_size,
                    "extension": file_path.suffix.lower()
                })
                total_size += file_size
        
        return {
            "exists": True,
            "files_count": len(files_found),
            "total_size_mb": round(total_size / (1024 * 1024), 2),
            "files": files_found[:10],  # First 10 files for preview
            "extensions": list(set(f["extension"] for f in files_found))
        }
        
    except Exception as e:
        return {
            "exists": False,
            "error": f"Error scanning directory: {str(e)}"
        }

async def test_custom_directory_training(custom_directory: str):
    """Test the complete custom directory training process"""
    print("üöÄ E2E —Ç–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ –ù–¢–î")
    print("=" * 70)
    
    # Step 1: Check API availability
    print("üì° –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
    try:
        response = requests.get(f'{API_BASE}/health', timeout=10)
        if response.status_code == 200:
            health_data = response.json()
            print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω: {health_data.get('status', 'unknown')}")
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        return
    
    # Step 2: Validate directory
    print(f"\nüìÇ –®–∞–≥ 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
    dir_info = check_directory_exists(custom_directory)
    
    if not dir_info["exists"]:
        print(f"‚ùå {dir_info['error']}")
        return
    
    print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞:")
    print(f"   üìÅ –§–∞–π–ª–æ–≤: {dir_info['files_count']}")
    print(f"   üíæ –†–∞–∑–º–µ—Ä: {dir_info['total_size_mb']} MB")
    print(f"   üìÑ –¢–∏–ø—ã: {', '.join(dir_info['extensions'])}")
    
    if dir_info['files_count'] == 0:
        print("‚ö†Ô∏è –í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        return
    
    # Preview some files
    print(f"\nüìã –ü–µ—Ä–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    for i, file_info in enumerate(dir_info['files'][:5], 1):
        size_kb = round(file_info['size'] / 1024, 1)
        print(f"   {i}. {file_info['name']} ({size_kb} KB)")
    
    # Step 3: Start training process
    print(f"\nüöÄ –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è...")
    
    training_payload = {
        "custom_dir": custom_directory
    }
    
    try:
        train_response = requests.post(
            f'{API_BASE}/train',
            json=training_payload,
            headers=get_auth_headers(),
            timeout=30
        )
        
        if train_response.status_code == 200:
            train_data = train_response.json()
            print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ: {train_data.get('message', 'Training started')}")
            print(f"üìÅ –ü–∞–ø–∫–∞: {train_data.get('custom_dir', custom_directory)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {train_response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {train_response.text}")
            return
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è: {str(e)}")
        return
    
    # Step 4: Monitor training progress
    print(f"\nüìä –®–∞–≥ 4: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è...")
    
    max_wait_time = 1800  # 30 minutes
    check_interval = 15   # Check every 15 seconds
    start_time = time.time()
    
    training_completed = False
    last_status = None
    
    while (time.time() - start_time) < max_wait_time and not training_completed:
        try:
            status_response = requests.get(
                f'{API_BASE}/api/training/status',
                headers=get_auth_headers(),
                timeout=10
            )
            
            if status_response.status_code == 200:
                status_data = status_response.json()
                current_status = status_data.get('status')
                is_training = status_data.get('is_training', False)
                progress = status_data.get('progress', 0)
                stage = status_data.get('current_stage', 'unknown')
                message = status_data.get('message', 'No message')
                
                # Only print if status changed
                if status_data != last_status:
                    elapsed_min = int((time.time() - start_time) / 60)
                    print(f"   [{elapsed_min:2}m] üìà {stage}: {message} ({progress}%)")
                    last_status = status_data.copy()
                
                # Check if training completed
                if not is_training and current_status == 'success':
                    print(f"üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
                    training_completed = True
                    break
                elif current_status == 'error':
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {message}")
                    break
                    
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        
        if not training_completed:
            await asyncio.sleep(check_interval)
    
    if not training_completed:
        print(f"‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è ({max_wait_time//60} –º–∏–Ω—É—Ç)")
        print(f"   –û–±—É—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è –≤ —Ñ–æ–Ω–µ")
    
    # Step 5: Test query performance on new data
    print(f"\nüîç –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ–±—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # Test queries related to potentially new documents
    test_queries = [
        "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è",
        "–Ω–æ—Ä–º–∞—Ç–∏–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è", 
        "–ì–û–°–¢ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã",
        "–°–ù–∏–ü –Ω–æ—Ä–º—ã"
    ]
    
    query_results = []
    
    for i, query in enumerate(test_queries, 1):
        print(f"   üîç –¢–µ—Å—Ç {i}: '{query}'")
        
        try:
            query_payload = {
                "query": query,
                "k": 3
            }
            
            query_response = requests.post(
                f'{API_BASE}/query',
                json=query_payload,
                headers=get_auth_headers(),
                timeout=30
            )
            
            if query_response.status_code == 200:
                query_data = query_response.json()
                results = query_data.get('results', [])
                ndcg = query_data.get('ndcg', 0)
                
                if results:
                    best_score = results[0].get('score', 0) if results else 0
                    print(f"      ‚úÖ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ª—É—á—à–∏–π score: {best_score:.3f}, NDCG: {ndcg:.3f}")
                    
                    # Check if we have high-quality results
                    high_quality_results = [r for r in results if r.get('score', 0) > 0.7]
                    if high_quality_results:
                        print(f"      üéØ {len(high_quality_results)} –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
                    query_results.append({
                        "query": query,
                        "results_count": len(results),
                        "best_score": best_score,
                        "ndcg": ndcg,
                        "high_quality_count": len(high_quality_results)
                    })
                else:
                    print(f"      ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    query_results.append({
                        "query": query,
                        "results_count": 0,
                        "best_score": 0,
                        "ndcg": 0,
                        "high_quality_count": 0
                    })
                    
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {query_response.status_code}")
                
        except Exception as e:
            print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        
        await asyncio.sleep(2)  # Small delay between queries
    
    # Step 6: Generate summary report
    print(f"\nüìã –®–∞–≥ 6: –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç")
    print("=" * 70)
    
    total_time = time.time() - start_time
    
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {int(total_time//60)}–º {int(total_time%60)}—Å")
    print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {custom_directory}")
    print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {dir_info['files_count']}")
    print(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {dir_info['total_size_mb']} MB")
    print(f"üöÄ –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è: {'‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ' if training_completed else '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}")
    
    # Query performance summary
    if query_results:
        avg_score = sum(r["best_score"] for r in query_results) / len(query_results)
        total_results = sum(r["results_count"] for r in query_results)
        total_high_quality = sum(r["high_quality_count"] for r in query_results)
        
        print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:")
        print(f"   üìä –°—Ä–µ–¥–Ω–∏–π score: {avg_score:.3f}")
        print(f"   üìà –í—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total_results}")
        print(f"   üéØ –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö: {total_high_quality}")
        print(f"   üéñÔ∏è –ü–æ–∫—Ä—ã—Ç–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤: {len([r for r in query_results if r['results_count'] > 0])}/{len(query_results)}")
    
    # Recommendations
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if training_completed and avg_score > 0.5:
        print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        print("   üéØ –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ")
    elif training_completed and avg_score <= 0.5:
        print("   ‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞ –Ω–∏–∑–∫–æ–µ")
        print("   üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    else:
        print("   ‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—Ü–µ–Ω–∫–∏")
    
    if dir_info['files_count'] < 10:
        print("   üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞")

async def test_frontend_integration():
    """Test frontend integration points"""
    print(f"\nüåê –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º")
    print("-" * 50)
    
    # Test metrics endpoint (used by frontend dashboard)
    try:
        metrics_response = requests.get(
            f'{API_BASE}/metrics-json',
            timeout=10
        )
        
        if metrics_response.status_code == 200:
            metrics = metrics_response.json()
            print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã:")
            print(f"   üìä –ß–∞–Ω–∫–æ–≤: {metrics.get('total_chunks', 0)}")
            print(f"   üéØ NDCG: {metrics.get('avg_ndcg', 0)}")
            print(f"   üìà –ü–æ–∫—Ä—ã—Ç–∏–µ: {metrics.get('coverage', 0)}")
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {metrics_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫: {str(e)}")
    
    # Test WebSocket endpoint availability
    print(f"üîå WebSocket —ç–Ω–¥–ø–æ–∏–Ω—Ç: ws://localhost:8000/ws (–¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π)")

async def main():
    """Main test function"""
    # Default test directory - can be changed
    test_directory = "I:\\docs\\downloaded"
    
    print("üîß E2E Test: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ –ù–¢–î")
    print("=" * 70)
    print(f"üéØ –¶–µ–ª—å: –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç —Ñ—Ä–æ–Ω—Ç–∞ –¥–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
    print(f"üìÅ –¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {test_directory}")
    print(f"‚è±Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 30 –º–∏–Ω—É—Ç")
    print(f"üîó API Base: {API_BASE}")
    
    # Check if test directory exists, if not, suggest alternatives
    if not os.path.exists(test_directory):
        print(f"\n‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {test_directory} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # Suggest alternative test directories
        alternative_dirs = [
            "I:\\docs\\–±–∞–∑–∞",
            "C:\\Bldr\\test_docs",
            "C:\\Bldr\\docs"
        ]
        
        for alt_dir in alternative_dirs:
            if os.path.exists(alt_dir):
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {alt_dir}")
                test_directory = alt_dir
                break
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–ø–∫—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ PDF/Word –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
            return
    
    await test_custom_directory_training(test_directory)
    await test_frontend_integration()
    
    print(f"\n‚ú® E2E —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"\n‚ÑπÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ:")
    print(f"   1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø–∞–ø–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
    print(f"   2. –§—Ä–æ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST /train —Å custom_dir")
    print(f"   3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ GET /api/training/status")
    print(f"   4. WebSocket –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print(f"   5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ POST /query")

if __name__ == '__main__':
    asyncio.run(main())