#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Master Tools System
"""

import sys
import os
sys.path.append('C:/Bldr/core')

def test_master_tools_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Master Tools System"""
    print("üöÄ MASTER TOOLS SYSTEM - –¢–ï–°–¢")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        from master_tools_system import MasterToolsSystem, get_master_tools_system
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —É—Å–ø–µ—à–µ–Ω")
        
        # –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
        mts = MasterToolsSystem()
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ MasterToolsSystem —É—Å–ø–µ—à–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tools_info = mts.list_all_tools()
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {tools_info['total_count']} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {', '.join(tools_info['categories'])}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        test_cases = [
            {
                "name": "search_rag_database",
                "params": {"query": "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã"},
                "expected": "success"
            },
            {
                "name": "create_pie_chart", 
                "params": {"data": {"–ú–∞—Ç–µ—Ä–∏–∞–ª—ã": 40, "–†–∞–±–æ—Ç–∞": 35, "–ù–∞–∫–ª–∞–¥–Ω—ã–µ": 25}},
                "expected": "success"
            },
            {
                "name": "calculate_financial_metrics",
                "params": {
                    "metric_type": "roi",
                    "investment": 1000000,
                    "cash_flows": [300000, 400000, 500000]
                },
                "expected": "success"  
            },
            {
                "name": "extract_works_nlp",
                "params": {
                    "text": "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞. –ú–æ–Ω—Ç–∞–∂ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∑–¥–∞–Ω–∏—è.",
                    "doc_type": "norms"
                },
                "expected": "success"
            }
        ]
        
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_cases)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
        
        passed_tests = 0
        for i, test_case in enumerate(test_cases, 1):
            tool_name = test_case["name"]
            params = test_case["params"]
            expected = test_case["expected"]
            
            try:
                result = mts.execute_tool(tool_name, **params)
                
                if expected == "success" and result.is_success():
                    print(f"  ‚úÖ {i}. {tool_name}: PASSED")
                    passed_tests += 1
                elif expected == "error" and not result.is_success():
                    print(f"  ‚úÖ {i}. {tool_name}: PASSED (expected error)")
                    passed_tests += 1
                else:
                    print(f"  ‚ùå {i}. {tool_name}: FAILED - {result.error}")
                    
            except Exception as e:
                print(f"  ‚ùå {i}. {tool_name}: EXCEPTION - {str(e)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö
        print(f"\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö:")
        sample_tools = ["generate_letter", "auto_budget", "analyze_image"]
        
        for tool_name in sample_tools:
            tool_info = mts.get_tool_info(tool_name)
            if "error" not in tool_info:
                print(f"  ‚ÑπÔ∏è  {tool_name}: {tool_info['category']}, {len(tool_info['required_params'])} –æ–±—è–∑. –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            else:
                print(f"  ‚ùå {tool_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        stats = mts.get_execution_stats()
        if stats:
            for tool_name, tool_stats in stats.items():
                success_rate = (tool_stats['successful_calls'] / tool_stats['total_calls']) * 100
                print(f"  üìä {tool_name}: {success_rate:.1f}% —É—Å–ø–µ—Ö, {tool_stats['avg_execution_time']:.3f}s")
        else:
            print("  üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞ (–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å)")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ü–µ–ø–æ—á–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        print(f"\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
        chain = [
            {
                "tool": "extract_works_nlp",
                "params": {
                    "text": "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞ –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω–æ–≥–æ. –ú–æ–Ω—Ç–∞–∂ —Å—Ç–µ–Ω –∏–∑ –∫–∏—Ä–ø–∏—á–∞."
                }
            },
            {
                "tool": "create_pie_chart",
                "params": {
                    "data": {"–§—É–Ω–¥–∞–º–µ–Ω—Ç": 60, "–°—Ç–µ–Ω—ã": 40},
                    "title": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç"
                }
            }
        ]
        
        try:
            chain_results = mts.execute_tool_chain(chain)
            successful_steps = sum(1 for r in chain_results if r.is_success())
            print(f"  üîó –¶–µ–ø–æ—á–∫–∞: {successful_steps}/{len(chain)} —à–∞–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ü–µ–ø–æ—á–∫–∏: {str(e)}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"  –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{len(test_cases)}")
        print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests/len(test_cases))*100:.1f}%")
        
        if passed_tests == len(test_cases):
            print("  üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Master Tools System –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            print("  ‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
            
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–¥–æ–±–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        print(f"\nüõ†  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è convenience functions:")
        from master_tools_system import execute_tool, list_available_tools
        
        # –°–ø–∏—Å–æ–∫ pro –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        pro_tools = list_available_tools("pro_features")
        if "error" not in pro_tools:
            print(f"  üìã PRO –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {pro_tools['total_count']}")
        
        # –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        quick_result = execute_tool("create_bar_chart", 
                                  data={"Q1": 100, "Q2": 120, "Q3": 90, "Q4": 110},
                                  title="–ö–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å")
        
        if quick_result.is_success():
            print(f"  ‚ö° –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: —É—Å–ø–µ—Ö –∑–∞ {quick_result.execution_time:.3f}s")
        else:
            print(f"  ‚ùå –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {quick_result.error}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_master_tools_system()
    exit(0 if success else 1)