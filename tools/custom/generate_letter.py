# namespace:documents
from typing import Any, Dict, List
import time
from core.tools.base_tool import ToolManifest, ToolInterface, ToolParam, ToolParamType

# –°–æ–∑–¥–∞–µ–º Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
coordinator_interface = ToolInterface(
    purpose='AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Å—Ç–∏–ª—è, —Ç–æ–Ω–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞',
    input_requirements={
        'description': ToolParam(
            name='description',
            type=ToolParamType.STRING,
            required=True,
            description='–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–∏—Å—å–º–∞'
        ),
        'letter_type': ToolParam(
            name='letter_type',
            type=ToolParamType.ENUM,
            required=False,
            default='business',
            description='–¢–∏–ø –ø–∏—Å—å–º–∞'
        )
    },
    execution_flow=[
        '–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–∏—Å—å–º–∞',
        '–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—è',
        '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'
    ],
    output_format={
        'status': 'success|error',
        'data': {
            'letter': 'str',
            'file_path': 'str',
            'metadata': 'dict'
        }
    },
    usage_guidelines={
        'for_coordinator': [
            '–ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
            '–£—á–∏—Ç—ã–≤–∞–π —Ç–∏–ø –ø–∏—Å—å–º–∞ –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è'
        ],
        'for_models': [
            '–ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è',
            '–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏'
        ]
    }
)

manifest = ToolManifest(
    name='generate_letter',
    version='1.0.0',
    title='üìù –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º',
    description='AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø–∏—Å–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π —Å—Ç–∏–ª—è, —Ç–æ–Ω–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.',
    category='document_generation',
    ui_placement='dashboard',
    enabled=True,
    system=False,
    entrypoint='tools.custom.generate_letter:execute',
    params=[
        ToolParam(
            name='description',
            type=ToolParamType.STRING,
            required=True,
            description='–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–∏—Å—å–º–∞',
            ui={
                'placeholder': '–û–ø–∏—à–∏—Ç–µ, –æ —á–µ–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–∏—Å—å–º–æ...',
                'rows': 4,
                'maxLength': 1000
            }
        ),
        { 
            'name': 'letter_type', 
            'type': 'enum', 
            'required': False, 
            'default': 'business',
            'description': '–¢–∏–ø –ø–∏—Å—å–º–∞',
            'enum': [
                {'value': 'business', 'label': '–î–µ–ª–æ–≤–æ–µ –ø–∏—Å—å–º–æ'},
                {'value': 'complaint', 'label': '–ü—Ä–µ—Ç–µ–Ω–∑–∏—è'},
                {'value': 'request', 'label': '–ó–∞–ø—Ä–æ—Å'},
                {'value': 'response', 'label': '–û—Ç–≤–µ—Ç'},
                {'value': 'notification', 'label': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'},
                {'value': 'agreement', 'label': '–°–æ–≥–ª–∞—à–µ–Ω–∏–µ'},
                {'value': 'contract', 'label': '–î–æ–≥–æ–≤–æ—Ä–Ω–æ–µ –ø–∏—Å—å–º–æ'}
            ]
        },
        { 
            'name': 'recipient', 
            'type': 'string', 
            'required': False, 
            'description': '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–∏—Å—å–º–∞',
            'ui': {
                'placeholder': '–û–û–û "–ö–æ–º–ø–∞–Ω–∏—è", –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ –∏ —Ç.–¥.'
            }
        },
        { 
            'name': 'sender', 
            'type': 'string', 
            'required': False, 
            'description': '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å',
            'ui': {
                'placeholder': '–í–∞—à–µ –∏–º—è/–∫–æ–º–ø–∞–Ω–∏—è'
            }
        },
        { 
            'name': 'tone', 
            'type': 'number', 
            'required': False, 
            'default': 0.0, 
            'description': '–¢–æ–Ω –ø–∏—Å—å–º–∞ (-1.0 = –æ—á–µ–Ω—å –º—è–≥–∫–∏–π, +1.0 = –æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–∏–π)',
            'ui': {
                'min': -1.0,
                'max': 1.0,
                'step': 0.1,
                'slider': True
            }
        },
        { 
            'name': 'formality', 
            'type': 'enum', 
            'required': False, 
            'default': 'formal',
            'description': '–£—Ä–æ–≤–µ–Ω—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏',
            'enum': [
                {'value': 'very_formal', 'label': '–û—á–µ–Ω—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ'},
                {'value': 'formal', 'label': '–§–æ—Ä–º–∞–ª—å–Ω–æ'},
                {'value': 'semi_formal', 'label': '–ü–æ–ª—É—Ñ–æ—Ä–º–∞–ª—å–Ω–æ'},
                {'value': 'casual', 'label': '–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ'}
            ]
        },
        { 
            'name': 'length', 
            'type': 'enum', 
            'required': False, 
            'default': 'medium',
            'description': '–î–ª–∏–Ω–∞ –ø–∏—Å—å–º–∞',
            'enum': [
                {'value': 'short', 'label': '–ö—Ä–∞—Ç–∫–æ–µ (–¥–æ 200 —Å–ª–æ–≤)'},
                {'value': 'medium', 'label': '–°—Ä–µ–¥–Ω–µ–µ (200-500 —Å–ª–æ–≤)'},
                {'value': 'long', 'label': '–ü–æ–¥—Ä–æ–±–Ω–æ–µ (500+ —Å–ª–æ–≤)'}
            ]
        },
        { 
            'name': 'include_signature', 
            'type': 'boolean', 
            'required': False, 
            'default': True, 
            'description': '–í–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å—å',
            'ui': {
                'switch': True
            }
        },
        { 
            'name': 'include_date', 
            'type': 'boolean', 
            'required': False, 
            'default': True, 
            'description': '–í–∫–ª—é—á–∏—Ç—å –¥–∞—Ç—É',
            'ui': {
                'switch': True
            }
        },
        { 
            'name': 'language', 
            'type': 'enum', 
            'required': False, 
            'default': 'ru',
            'description': '–Ø–∑—ã–∫ –ø–∏—Å—å–º–∞',
            'enum': [
                {'value': 'ru', 'label': '–†—É—Å—Å–∫–∏–π'},
                {'value': 'en', 'label': 'English'},
                {'value': 'auto', 'label': '–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'}
            ]
        }
    ],
    outputs=['file_path', 'letter', 'metadata'],
    result_display={
        'type': 'document',
        'title': '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ',
        'description': '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é',
        'features': {
            'editable': True,
            'exportable': True,
            'printable': True,
            'formatted': True
        }
    },
    permissions=['filesystem:write', 'network:out'],
    tags=['document', 'ai', 'generation', 'business', 'professional'],
    documentation={
        'examples': [
            {
                'title': '–î–µ–ª–æ–≤–æ–µ –ø–∏—Å—å–º–æ',
                'description': '–ó–∞–ø—Ä–æ—Å –æ –ø–æ—Å—Ç–∞–≤–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤',
                'letter_type': 'business',
                'formality': 'formal'
            },
            {
                'title': '–ü—Ä–µ—Ç–µ–Ω–∑–∏—è',
                'description': '–ñ–∞–ª–æ–±–∞ –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç',
                'letter_type': 'complaint',
                'tone': 0.5
            }
        ],
        'tips': [
            '–ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è',
            '–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏',
            '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏'
        ]
    },
    coordinator_interface=coordinator_interface
)

def execute(**kwargs) -> Dict[str, Any]:
    """Execute enterprise-level letter generation with advanced features."""
    start_time = time.time()
    
    try:
        # Validate and parse parameters
        description = kwargs.get('description', '').strip()
        if not description:
            return {
                'status': 'error',
                'error': '–û–ø–∏—Å–∞–Ω–∏–µ –ø–∏—Å—å–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
                'execution_time': time.time() - start_time
            }
        
        # Parse parameters with defaults
        letter_type = kwargs.get('letter_type', 'business')
        recipient = kwargs.get('recipient', '')
        sender = kwargs.get('sender', '')
        tone = max(-1.0, min(1.0, kwargs.get('tone', 0.0)))
        formality = kwargs.get('formality', 'formal')
        length = kwargs.get('length', 'medium')
        include_signature = kwargs.get('include_signature', True)
        include_date = kwargs.get('include_date', True)
        language = kwargs.get('language', 'ru')
        
        # Generate letter using AI
        try:
            from core.unified_tools_system import execute_tool as unified_exec
            res = unified_exec('generate_letter', **kwargs)
            
            if getattr(res, 'status', None) == 'success':
                letter_content = res.data.get('letter', '')
                file_path = res.data.get('file_path', '')
                
                # Enhance letter with formatting
                formatted_letter = _format_letter(
                    letter_content, 
                    recipient, 
                    sender, 
                    include_date, 
                    include_signature,
                    formality
                )
                
                # Generate metadata
                metadata = {
                    'letter_type': letter_type,
                    'tone': tone,
                    'formality': formality,
                    'length': length,
                    'language': language,
                    'word_count': len(formatted_letter.split()),
                    'character_count': len(formatted_letter),
                    'generated_at': time.strftime('%Y-%m-%d %H:%M:%S'),
                    'file_path': file_path
                }
                
                execution_time = time.time() - start_time
                
                return {
                    'status': 'success',
                    'data': {
                        'letter': formatted_letter,
                        'file_path': file_path,
                        'metadata': metadata
                    },
                    'execution_time': execution_time,
                    'result_type': 'document',
                    'result_title': f'üìù {_get_letter_type_title(letter_type)}',
                    'result_content': formatted_letter,
                    'files': [file_path] if file_path else [],
                    'metadata': metadata
                }
            
            return { 
                'status': 'error', 
                'error': getattr(res, 'error', '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞'),
                'execution_time': time.time() - start_time
            }
            
        except Exception as ai_error:
            print(f"‚ö†Ô∏è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {ai_error}")
            
            # Fallback: template-based generation
            return _generate_letter_fallback(
                description, letter_type, recipient, sender, 
                tone, formality, length, include_date, include_signature
            )
        
    except Exception as e:
        return { 
            'status': 'error', 
            'error': str(e),
            'execution_time': time.time() - start_time
        }


def _format_letter(content: str, recipient: str, sender: str, 
                  include_date: bool, include_signature: bool, formality: str) -> str:
    """Format letter with proper structure and styling."""
    formatted = []
    
    # Add date if requested
    if include_date:
        formatted.append(f"–î–∞—Ç–∞: {time.strftime('%d.%m.%Y')}")
        formatted.append("")
    
    # Add recipient if provided
    if recipient:
        formatted.append(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}")
        formatted.append("")
    
    # Add greeting based on formality
    greeting = _get_greeting(formality, recipient)
    formatted.append(greeting)
    formatted.append("")
    
    # Add main content
    formatted.append(content)
    formatted.append("")
    
    # Add closing based on formality
    closing = _get_closing(formality)
    formatted.append(closing)
    formatted.append("")
    
    # Add signature if requested
    if include_signature and sender:
        formatted.append(f"–° —É–≤–∞–∂–µ–Ω–∏–µ–º,")
        formatted.append(f"{sender}")
        formatted.append("")
    
    return "\n".join(formatted)


def _get_greeting(formality: str, recipient: str) -> str:
    """Get appropriate greeting based on formality level."""
    if formality == 'very_formal':
        return f"–£–≤–∞–∂–∞–µ–º—ã–π{_get_recipient_suffix(recipient)}!"
    elif formality == 'formal':
        return f"–£–≤–∞–∂–∞–µ–º—ã–π{_get_recipient_suffix(recipient)}!"
    elif formality == 'semi_formal':
        return f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ{_get_recipient_suffix(recipient)}!"
    else:  # casual
        return f"–ü—Ä–∏–≤–µ—Ç{_get_recipient_suffix(recipient)}!"


def _get_recipient_suffix(recipient: str) -> str:
    """Get appropriate suffix for recipient name."""
    if not recipient:
        return ""
    
    # Simple gender detection based on name endings
    if recipient.endswith(('–∞', '—è', '—å')):
        return "–∞—è"
    else:
        return "—ã–π"


def _get_closing(formality: str) -> str:
    """Get appropriate closing based on formality level."""
    if formality == 'very_formal':
        return "–° –≥–ª—É–±–æ–∫–∏–º —É–≤–∞–∂–µ–Ω–∏–µ–º,"
    elif formality == 'formal':
        return "–° —É–≤–∞–∂–µ–Ω–∏–µ–º,"
    elif formality == 'semi_formal':
        return "–° –Ω–∞–∏–ª—É—á—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏,"
    else:  # casual
        return "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è,"


def _get_letter_type_title(letter_type: str) -> str:
    """Get human-readable title for letter type."""
    titles = {
        'business': '–î–µ–ª–æ–≤–æ–µ –ø–∏—Å—å–º–æ',
        'complaint': '–ü—Ä–µ—Ç–µ–Ω–∑–∏—è',
        'request': '–ó–∞–ø—Ä–æ—Å',
        'response': '–û—Ç–≤–µ—Ç',
        'notification': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ',
        'agreement': '–°–æ–≥–ª–∞—à–µ–Ω–∏–µ',
        'contract': '–î–æ–≥–æ–≤–æ—Ä–Ω–æ–µ –ø–∏—Å—å–º–æ'
    }
    return titles.get(letter_type, '–ü–∏—Å—å–º–æ')


def _generate_letter_fallback(description: str, letter_type: str, recipient: str, 
                             sender: str, tone: float, formality: str, length: str,
                             include_date: bool, include_signature: bool) -> Dict[str, Any]:
    """Generate letter using template-based fallback."""
    start_time = time.time()
    
    try:
        # Create template-based letter
        templates = {
            'business': f"–£–≤–∞–∂–∞–µ–º—ã–π{_get_recipient_suffix(recipient)}!\n\n{description}\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,",
            'complaint': f"–£–≤–∞–∂–∞–µ–º—ã–π{_get_recipient_suffix(recipient)}!\n\n{description}\n\n–° —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è,",
            'request': f"–£–≤–∞–∂–∞–µ–º—ã–π{_get_recipient_suffix(recipient)}!\n\n{description}\n\n–° –ø—Ä–æ—Å—å–±–æ–π —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å,",
            'response': f"–£–≤–∞–∂–∞–µ–º—ã–π{_get_recipient_suffix(recipient)}!\n\n{description}\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º,",
            'notification': f"–£–≤–∞–∂–∞–µ–º—ã–π{_get_recipient_suffix(recipient)}!\n\n{description}\n\n–° —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º,",
            'agreement': f"–£–≤–∞–∂–∞–µ–º—ã–π{_get_recipient_suffix(recipient)}!\n\n{description}\n\n–° —Å–æ–≥–ª–∞—Å–∏–µ–º,",
            'contract': f"–£–≤–∞–∂–∞–µ–º—ã–π{_get_recipient_suffix(recipient)}!\n\n{description}\n\n–° –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞,"
        }
        
        base_letter = templates.get(letter_type, templates['business'])
        
        # Add sender if provided
        if sender:
            base_letter += f"\n{sender}"
        
        # Format with proper structure
        formatted_letter = _format_letter(
            base_letter, recipient, sender, include_date, include_signature, formality
        )
        
        # Generate file path
        timestamp = time.strftime('%Y%m%d_%H%M%S')
        filename = f"letter_{letter_type}_{timestamp}.txt"
        file_path = f"exports/{filename}"
        
        # Save to file
        try:
            import os
            os.makedirs("exports", exist_ok=True)
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(formatted_letter)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
            file_path = ""
        
        execution_time = time.time() - start_time
        
        return {
            'status': 'success',
            'data': {
                'letter': formatted_letter,
                'file_path': file_path,
                'metadata': {
                    'letter_type': letter_type,
                    'tone': tone,
                    'formality': formality,
                    'length': length,
                    'word_count': len(formatted_letter.split()),
                    'character_count': len(formatted_letter),
                    'generated_at': time.strftime('%Y-%m-%d %H:%M:%S'),
                    'method': 'template_fallback'
                }
            },
            'execution_time': execution_time,
            'result_type': 'document',
            'result_title': f'üìù {_get_letter_type_title(letter_type)} (—à–∞–±–ª–æ–Ω)',
            'result_content': formatted_letter,
            'files': [file_path] if file_path else []
        }
        
    except Exception as e:
        return {
            'status': 'error',
            'error': f'–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞: {str(e)}',
            'execution_time': time.time() - start_time
        }


