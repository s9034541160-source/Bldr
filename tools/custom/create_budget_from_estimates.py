# namespace:financial
from typing import Any, Dict, List, Optional
import time
import os
from pathlib import Path
from core.tools.base_tool import ToolManifest, ToolInterface, ToolParam, ToolParamType

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã
try:
    from core.enhanced_smeta_parser import parse_estimate_enhanced
    from core.enhanced_budget_parser import EnhancedBudgetParser, calculate_budget_from_estimate
    HAS_ENHANCED_PARSERS = True
except ImportError:
    HAS_ENHANCED_PARSERS = False

# –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
coordinator_interface = ToolInterface(
    purpose='–°–æ–∑–¥–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–º–µ—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—á–µ—Ç–æ–º –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π —Ä–∞—Å—Ö–æ–¥–æ–≤',
    input_requirements={
        'estimate_files': ToolParam(
            name='estimate_files',
            type=ToolParamType.ARRAY,
            required=True,
            description='–°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º —Å–º–µ—Ç (.xlsx, .xls, .csv)'
        ),
        'project_name': ToolParam(
            name='project_name',
            type=ToolParamType.STRING,
            required=True,
            description='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'
        )
    },
    execution_flow=[
        '–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å–º–µ—Ç',
        '–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —Å–º–µ—Ç –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö',
        '–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤—Å–µ—Ö —Å–º–µ—Ç',
        '–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–µ–π –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
        '–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞',
        '–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel —Å —Ñ–æ—Ä–º—É–ª–∞–º–∏',
        '–í–æ–∑–≤—Ä–∞—Ç –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞'
    ],
    output_format={
        'status': 'success|error',
        'data': {
            'total_estimate_cost': 'float',
            'budget_breakdown': 'object',
            'excel_file_path': 'string',
            'recommendations': 'array'
        }
    },
    usage_guidelines={
        'for_coordinator': [
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–º–µ—Ç',
            '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–º–µ—Ç',
            '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤'
        ],
        'for_models': [
            '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º–µ—Ç',
            '–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ Excel —Ñ–∞–π–ª',
            '–í–∫–ª—é—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ –≤—Å–µ–º —Å—Ç–∞—Ç—å—è–º'
        ]
    }
)

manifest = ToolManifest(
    name='create_budget_from_estimates',
    version='1.0.0',
    title='üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –∏–∑ —Å–º–µ—Ç',
    description='–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–¥–Ω–æ–π –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–º–µ—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—á–µ—Ç–æ–º –≤—Å–µ—Ö —Å—Ç–∞—Ç–µ–π —Ä–∞—Å—Ö–æ–¥–æ–≤',
    category='financial',
    ui_placement='dashboard',
    enabled=True,
    system=False,
    entrypoint='tools.custom.create_budget_from_estimates:execute',
    coordinator_interface=coordinator_interface,
    outputs=['total_estimate_cost', 'budget_breakdown', 'excel_file_path', 'recommendations'],
    params=[
        ToolParam(
            name='estimate_files',
            type=ToolParamType.ARRAY,
            required=True,
            description='–°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º —Å–º–µ—Ç',
            ui={
                'placeholder': '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã —Å–º–µ—Ç...',
                'fileTypes': ['.xlsx', '.xls', '.csv']
            }
        ),
        ToolParam(
            name='project_name',
            type=ToolParamType.STRING,
            required=True,
            description='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
            ui={
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...',
                'maxLength': 200
            }
        ),
        ToolParam(
            name='output_directory',
            type=ToolParamType.STRING,
            required=False,
            description='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±—é–¥–∂–µ—Ç–∞',
            ui={
                'placeholder': '–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: exports/)'
            }
        ),
        ToolParam(
            name='include_monthly_planning',
            type=ToolParamType.BOOLEAN,
            required=False,
            default=True,
            description='–í–∫–ª—é—á–∏—Ç—å –º–µ—Å—è—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (12 –º–µ—Å—è—Ü–µ–≤)',
            ui={
                'label': '–ú–µ—Å—è—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
            }
        ),
        ToolParam(
            name='profit_margin_percent',
            type=ToolParamType.NUMBER,
            required=False,
            default=15.0,
            description='–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏ –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–º–µ—Ç',
            ui={
                'min': 0,
                'max': 50,
                'step': 0.1,
                'suffix': '%'
            }
        )
    ]
)

def execute(**kwargs) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º–µ—Ç"""
    start_time = time.time()
    
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        estimate_files = kwargs.get('estimate_files', [])
        if not estimate_files:
            return {
                'status': 'error',
                'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã —Ñ–∞–π–ª—ã —Å–º–µ—Ç',
                'execution_time': time.time() - start_time
            }
        
        project_name = kwargs.get('project_name', '').strip()
        if not project_name:
            return {
                'status': 'error',
                'error': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
                'execution_time': time.time() - start_time
            }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        output_directory = kwargs.get('output_directory', 'exports')
        include_monthly_planning = kwargs.get('include_monthly_planning', True)
        profit_margin_percent = max(0, min(50, kwargs.get('profit_margin_percent', 15.0)))
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        output_dir = Path(output_directory)
        output_dir.mkdir(parents=True, exist_ok=True)
        
        # –ü–∞—Ä—Å–∏–º –≤—Å–µ —Å–º–µ—Ç—ã
        all_estimates = []
        total_cost = 0.0
        parsed_files = 0
        
        for file_path in estimate_files:
            if not os.path.exists(file_path):
                continue
                
            try:
                if HAS_ENHANCED_PARSERS:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
                    estimate_data = parse_estimate_enhanced(file_path)
                else:
                    # Fallback –Ω–∞ –±–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
                    estimate_data = _parse_estimate_basic(file_path)
                
                if estimate_data.get('positions'):
                    all_estimates.append(estimate_data)
                    total_cost += estimate_data.get('total_cost', 0)
                    parsed_files += 1
                    
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                continue
        
        if parsed_files == 0:
            return {
                'status': 'error',
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–º–µ—Ç—ã',
                'execution_time': time.time() - start_time
            }
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã
        combined_estimate = {
            'project_name': project_name,
            'total_cost': total_cost,
            'files_count': parsed_files,
            'estimates': all_estimates
        }
        
        # –°–æ–∑–¥–∞–µ–º –±—é–¥–∂–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º–µ—Ç—ã
        if HAS_ENHANCED_PARSERS:
            budget_parser = EnhancedBudgetParser()
            budget_result = budget_parser.calculate_budget_from_estimate(combined_estimate)
        else:
            budget_result = _calculate_budget_basic(combined_estimate, profit_margin_percent)
        
        if budget_result.get('status') != 'success':
            return {
                'status': 'error',
                'error': f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±—é–¥–∂–µ—Ç–∞: {budget_result.get('error', 'Unknown error')}",
                'execution_time': time.time() - start_time
            }
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –±—é–¥–∂–µ—Ç–æ–º
        excel_file_path = output_dir / f"–ë—é–¥–∂–µ—Ç_{project_name.replace(' ', '_')}.xlsx"
        
        if HAS_ENHANCED_PARSERS:
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Excel —Å –º–µ—Å—è—á–Ω—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            excel_result = _create_detailed_budget_excel(
                budget_result, combined_estimate, excel_file_path, include_monthly_planning
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π Excel
            excel_result = _create_basic_budget_excel(budget_result, combined_estimate, excel_file_path)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = _generate_budget_recommendations(budget_result, combined_estimate)
        
        execution_time = time.time() - start_time
        
        return {
            'status': 'success',
            'data': {
                'total_estimate_cost': total_cost,
                'budget_breakdown': budget_result.get('budget_items', {}),
                'total_expenses': budget_result.get('total_expenses', 0),
                'net_profit': budget_result.get('net_profit', 0),
                'profit_margin': budget_result.get('profit_margin', 0),
                'excel_file_path': str(excel_file_path),
                'parsed_files_count': parsed_files,
                'recommendations': recommendations
            },
            'execution_time': execution_time,
            'result_type': 'budget_creation',
            'result_title': f'üí∞ –ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞: {project_name}',
            'metadata': {
                'project_name': project_name,
                'total_cost': total_cost,
                'files_processed': parsed_files,
                'created_at': time.strftime('%Y-%m-%d %H:%M:%S')
            }
        }
        
    except Exception as e:
        return {
            'status': 'error',
            'error': str(e),
            'execution_time': time.time() - start_time
        }

def _parse_estimate_basic(file_path: str) -> Dict[str, Any]:
    """–ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å–º–µ—Ç—ã (fallback)"""
    try:
        import pandas as pd
        
        if file_path.endswith(('.xlsx', '.xls')):
            df = pd.read_excel(file_path)
        elif file_path.endswith('.csv'):
            df = pd.read_csv(file_path, encoding='utf-8')
        else:
            return {'positions': [], 'total_cost': 0}
        
        # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        positions = []
        total_cost = 0
        
        for _, row in df.iterrows():
            if pd.notna(row.iloc[0]) and pd.notna(row.iloc[-1]):
                try:
                    cost = float(row.iloc[-1])
                    positions.append({
                        'description': str(row.iloc[0]),
                        'total_cost': cost
                    })
                    total_cost += cost
                except (ValueError, TypeError):
                    continue
        
        return {
            'positions': positions,
            'total_cost': total_cost,
            'format': 'basic'
        }
        
    except Exception as e:
        return {'positions': [], 'total_cost': 0, 'error': str(e)}

def _calculate_budget_basic(estimate_data: Dict[str, Any], profit_margin: float) -> Dict[str, Any]:
    """–ë–∞–∑–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞ (fallback)"""
    try:
        total_cost = estimate_data.get('total_cost', 0)
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        labor_cost = total_cost * 0.12  # 12% –§–û–¢
        insurance_cost = labor_cost * 0.302  # 30.2% —Å—Ç—Ä–∞—Ö–æ–≤—ã–µ
        travel_cost = total_cost * 0.0276  # 2.76% –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ
        equipment_cost = total_cost * 0.0024  # 0.24% –°–ò–ó
        
        total_expenses = labor_cost + insurance_cost + travel_cost + equipment_cost
        net_profit = total_cost - total_expenses
        profit_margin_percent = (net_profit / total_cost * 100) if total_cost > 0 else 0
        
        return {
            'status': 'success',
            'base_cost': total_cost,
            'total_expenses': total_expenses,
            'net_profit': net_profit,
            'profit_margin': profit_margin_percent,
            'budget_items': {
                'labor': {'name': '–§–û–¢', 'amount': labor_cost, 'percentage': 12.0},
                'insurance': {'name': '–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤–∑–Ω–æ—Å—ã', 'amount': insurance_cost, 'percentage': 30.2},
                'travel': {'name': '–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ', 'amount': travel_cost, 'percentage': 2.76},
                'equipment': {'name': '–°–ò–ó', 'amount': equipment_cost, 'percentage': 0.24}
            }
        }
        
    except Exception as e:
        return {'status': 'error', 'error': str(e)}

def _create_detailed_budget_excel(budget_result: Dict[str, Any], estimate_data: Dict[str, Any], 
                                 excel_path: Path, include_monthly: bool) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Excel —Ñ–∞–π–ª–∞ —Å –±—é–¥–∂–µ—Ç–æ–º"""
    try:
        import openpyxl
        from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
        
        wb = openpyxl.Workbook()
        if 'Sheet' in wb.sheetnames:
            wb.remove(wb['Sheet'])
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ª–∏—Å—Ç —Å –±—é–¥–∂–µ—Ç–æ–º
        ws = wb.create_sheet('–ë—é–¥–∂–µ—Ç_–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π')
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ["–°—Ç–∞—Ç—å—è", "–°—É–º–º–∞ (—Ä—É–±.)", "–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å–º–µ—Ç—ã", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"]
        if include_monthly:
            headers.extend([f"–ú–µ—Å—è—Ü {i+1}" for i in range(12)])
            headers.append("–ò—Ç–æ–≥–æ")
        
        ws.append(headers)
        
        # –°—Ç–∏–ª–∏
        header_font = Font(bold=True, color='FFFFFF')
        header_fill = PatternFill(start_color='4472C4', end_color='4472C4', fill_type='solid')
        border = Border(
            left=Side(style='thin'),
            right=Side(style='thin'),
            top=Side(style='thin'),
            bottom=Side(style='thin')
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for col in range(1, len(headers) + 1):
            cell = ws.cell(row=1, column=col)
            cell.font = header_font
            cell.fill = header_fill
            cell.border = border
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        current_row = 2
        total_cost = estimate_data.get('total_cost', 0)
        budget_items = budget_result.get('budget_items', {})
        
        for item_code, item_data in budget_items.items():
            row_data = [
                item_data['name'],
                item_data['amount'],
                f"{item_data['percentage']:.2f}%",
                f"–†–∞—Å—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º–µ—Ç—ã"
            ]
            
            if include_monthly:
                monthly_amount = item_data['amount'] / 12
                for month in range(12):
                    row_data.append(monthly_amount)
                row_data.append(item_data['amount'])
            
            ws.append(row_data)
            current_row += 1
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        total_expenses = budget_result.get('total_expenses', 0)
        net_profit = budget_result.get('net_profit', 0)
        
        ws.append(["–ò–¢–û–ì–û –†–ê–°–•–û–î–´", total_expenses, f"{(total_expenses/total_cost*100):.2f}%", ""])
        ws.append(["–ß–ò–°–¢–ê–Ø –ü–†–ò–ë–´–õ–¨", net_profit, f"{(net_profit/total_cost*100):.2f}%", ""])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º
        for row in ws.iter_rows():
            for cell in row:
                cell.border = border
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)
            ws.column_dimensions[column_letter].width = adjusted_width
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        wb.save(excel_path)
        
        return {'status': 'success', 'file_path': str(excel_path)}
        
    except Exception as e:
        return {'status': 'error', 'error': str(e)}

def _create_basic_budget_excel(budget_result: Dict[str, Any], estimate_data: Dict[str, Any], 
                              excel_path: Path) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ Excel —Ñ–∞–π–ª–∞ —Å –±—é–¥–∂–µ—Ç–æ–º"""
    try:
        import pandas as pd
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –±—é–¥–∂–µ—Ç–∞
        budget_items = budget_result.get('budget_items', {})
        data = []
        
        for item_code, item_data in budget_items.items():
            data.append({
                '–°—Ç–∞—Ç—å—è': item_data['name'],
                '–°—É–º–º–∞ (—Ä—É–±.)': item_data['amount'],
                '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{item_data['percentage']:.2f}%"
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–∏
        data.append({
            '–°—Ç–∞—Ç—å—è': '–ò–¢–û–ì–û –†–ê–°–•–û–î–´',
            '–°—É–º–º–∞ (—Ä—É–±.)': budget_result.get('total_expenses', 0),
            '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{(budget_result.get('total_expenses', 0)/estimate_data.get('total_cost', 1)*100):.2f}%"
        })
        
        data.append({
            '–°—Ç–∞—Ç—å—è': '–ß–ò–°–¢–ê–Ø –ü–†–ò–ë–´–õ–¨',
            '–°—É–º–º–∞ (—Ä—É–±.)': budget_result.get('net_profit', 0),
            '–ü—Ä–æ—Ü–µ–Ω—Ç': f"{(budget_result.get('net_profit', 0)/estimate_data.get('total_cost', 1)*100):.2f}%"
        })
        
        df = pd.DataFrame(data)
        df.to_excel(excel_path, index=False, sheet_name='–ë—é–¥–∂–µ—Ç')
        
        return {'status': 'success', 'file_path': str(excel_path)}
        
    except Exception as e:
        return {'status': 'error', 'error': str(e)}

def _generate_budget_recommendations(budget_result: Dict[str, Any], estimate_data: Dict[str, Any]) -> List[str]:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –±—é–¥–∂–µ—Ç—É"""
    recommendations = []
    
    total_cost = estimate_data.get('total_cost', 0)
    profit_margin = budget_result.get('profit_margin', 0)
    
    if profit_margin > 80:
        recommendations.append("üéØ –û—Ç–ª–∏—á–Ω–∞—è –º–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏! –ü—Ä–æ–µ–∫—Ç –æ—á–µ–Ω—å —Ä–µ–Ω—Ç–∞–±–µ–ª–µ–Ω.")
    elif profit_margin > 50:
        recommendations.append("‚úÖ –•–æ—Ä–æ—à–∞—è –º–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏. –ü—Ä–æ–µ–∫—Ç —Ä–µ–Ω—Ç–∞–±–µ–ª–µ–Ω.")
    elif profit_margin > 20:
        recommendations.append("‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω–∞—è –º–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∑–∞—Ç—Ä–∞—Ç.")
    else:
        recommendations.append("üö® –ù–∏–∑–∫–∞—è –º–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏! –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±—é–¥–∂–µ—Ç–∞.")
    
    if total_cost > 100_000_000:
        recommendations.append("üí∞ –ö—Ä—É–ø–Ω—ã–π –ø—Ä–æ–µ–∫—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —ç—Ç–∞–ø–∞–º.")
    elif total_cost > 10_000_000:
        recommendations.append("üìä –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–µ–∫—Ç. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã.")
    else:
        recommendations.append("üîß –ù–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–µ–∫—Ç. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
    
    return recommendations
