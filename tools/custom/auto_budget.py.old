# namespace:financial
from typing import Any, Dict, List
import time
from core.tools.base_tool import ToolManifest, ToolInterface, ToolParam, ToolParamType

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –±—é–¥–∂–µ—Ç–∞
try:
    from core.enhanced_budget_parser import calculate_budget_from_estimate, create_budget_template
    HAS_ENHANCED_BUDGET = True
except ImportError:
    HAS_ENHANCED_BUDGET = False
    calculate_budget_from_estimate = None

# –°–æ–∑–¥–∞–µ–º Pydantic –º–æ–¥–µ–ª–∏ –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
coordinator_interface = ToolInterface(
    purpose='–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤: –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Ä–∞–±–æ—Ç, –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤, –ø—Ä–∏–±—ã–ª–∏, –Ω–∞–ª–æ–≥–æ–≤ –∏ —Ä–∏—Å–∫–æ–≤',
    input_requirements={
        'project_name': ToolParam(
            name='project_name',
            type=ToolParamType.STRING,
            required=True,
            description='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'
        ),
        'base_cost': ToolParam(
            name='base_cost',
            type=ToolParamType.NUMBER,
            required=True,
            description='–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ä–∞–±–æ—Ç'
        )
    },
    execution_flow=[
        '–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
        '–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
        '–£—á–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞ –∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏',
        '–†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤',
        '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã',
        '–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—å—è–º',
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
        '–í–æ–∑–≤—Ä–∞—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞'
    ],
    output_format={
        'status': 'success|error',
        'data': {
            'total_budget': 'float',
            'breakdown': 'object',
            'recommendations': 'array',
            'metadata': 'object'
        }
    },
    usage_guidelines={
        'for_coordinator': [
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±—é–¥–∂–µ—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤',
            '–ü–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
            '–£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤'
        ],
        'for_models': [
            '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç',
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ breakdown –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞—Ç—Ä–∞—Ç',
            '–°–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–∞'
        ]
    }
)

manifest = ToolManifest(
    name='auto_budget',
    version='1.0.0',
    title='üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞',
    description='–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤: –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Ä–∞–±–æ—Ç, –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤, –ø—Ä–∏–±—ã–ª–∏, –Ω–∞–ª–æ–≥–æ–≤ –∏ —Ä–∏—Å–∫–æ–≤.',
    category='financial',
    ui_placement='dashboard',
    enabled=True,
    system=False,
    entrypoint='tools.custom.auto_budget:execute',
    params=[
        ToolParam(
            name='project_name',
            type=ToolParamType.STRING,
            required=True,
            description='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
            ui={
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...',
                'maxLength': 200
            }
        ),
        ToolParam(
            name='base_cost',
            type=ToolParamType.NUMBER,
            required=True,
            description='–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–º–∞—Ç–µ—Ä–∏–∞–ª—ã + —Ä–∞–±–æ—Ç—ã)',
            ui={
                'min': 1000,
                'max': 100000000,
                'step': 1000,
                'currency': 'RUB'
            }
        ),
        ToolParam(
            name='project_type',
            type=ToolParamType.ENUM,
            required=False,
            default='residential',
            description='–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞',
            enum=[
                {'value': 'residential', 'label': '–ñ–∏–ª–æ–π –¥–æ–º'},
                {'value': 'commercial', 'label': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∑–¥–∞–Ω–∏–µ'},
                {'value': 'industrial', 'label': '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç'},
                {'value': 'infrastructure', 'label': '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞'},
                {'value': 'renovation', 'label': '–†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'},
                {'value': 'repair', 'label': '–†–µ–º–æ–Ω—Ç'}
            ]
        ),
        ToolParam(
            name='profit_margin',
            type=ToolParamType.NUMBER,
            required=False,
            default=0.15,
            description='–ù–æ—Ä–º–∞ –ø—Ä–∏–±—ã–ª–∏ (0.0-1.0)',
            ui={
                'min': 0.0,
                'max': 1.0,
                'step': 0.01,
                'slider': True
            }
        ),
        ToolParam(
            name='overhead_rate',
            type=ToolParamType.NUMBER,
            required=False,
            default=0.20,
            description='–ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (0.0-1.0)',
            ui={
                'min': 0.0,
                'max': 1.0,
                'step': 0.01,
                'slider': True
            }
        ),
        ToolParam(
            name='tax_rate',
            type=ToolParamType.NUMBER,
            required=False,
            default=0.20,
            description='–ù–∞–ª–æ–≥–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (0.0-1.0)',
            ui={
                'min': 0.0,
                'max': 1.0,
                'step': 0.01,
                'slider': True
            }
        ),
        ToolParam(
            name='risk_factor',
            type=ToolParamType.NUMBER,
            required=False,
            default=0.05,
            description='–§–∞–∫—Ç–æ—Ä —Ä–∏—Å–∫–∞ (0.0-0.5)',
            ui={
                'min': 0.0,
                'max': 0.5,
                'step': 0.01,
                'slider': True
            }
        ),
        ToolParam(
            name='inflation_rate',
            type=ToolParamType.NUMBER,
            required=False,
            default=0.08,
            description='–£—Ä–æ–≤–µ–Ω—å –∏–Ω—Ñ–ª—è—Ü–∏–∏ (0.0-1.0)',
            ui={
                'min': 0.0,
                'max': 1.0,
                'step': 0.01,
                'slider': True
            }
        ),
        ToolParam(
            name='project_duration',
            type=ToolParamType.NUMBER,
            required=False,
            default=12,
            description='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ (–º–µ—Å—è—Ü—ã)',
            ui={
                'min': 1,
                'max': 60,
                'step': 1
            }
        ),
        ToolParam(
            name='include_breakdown',
            type=ToolParamType.BOOLEAN,
            required=False,
            default=True,
            description='–í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –ø–æ —Å—Ç–∞—Ç—å—è–º',
            ui={
                'switch': True
            }
        ),
        ToolParam(
            name='currency',
            type=ToolParamType.ENUM,
            required=False,
            default='RUB',
            description='–í–∞–ª—é—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞',
            enum=[
                {'value': 'RUB', 'label': '–†—É–±–ª–∏ (‚ÇΩ)'},
                {'value': 'USD', 'label': '–î–æ–ª–ª–∞—Ä—ã ($)'},
                {'value': 'EUR', 'label': '–ï–≤—Ä–æ (‚Ç¨)'}
            ]
        )
    ],
    outputs=['budget', 'total_cost', 'breakdown', 'recommendations'],
    result_display={
        'type': 'financial_report',
        'title': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞',
        'description': '–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏',
        'features': {
            'exportable': True,
            'printable': True,
            'interactive': True,
            'charts': True
        }
    },
    permissions=['filesystem:write', 'network:out'],
    tags=['budget', 'finance', 'construction', 'planning', 'enterprise'],
    documentation={
        'examples': [
            {
                'title': '–ñ–∏–ª–æ–π –¥–æ–º',
                'project_name': '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∫–æ—Ç—Ç–µ–¥–∂–∞',
                'base_cost': 5000000,
                'project_type': 'residential',
                'profit_margin': 0.15
            },
            {
                'title': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∑–¥–∞–Ω–∏–µ',
                'project_name': '–û—Ñ–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä',
                'base_cost': 15000000,
                'project_type': 'commercial',
                'profit_margin': 0.20
            }
        ],
        'tips': [
            '–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ',
            '–ó–∞–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤ –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
            '–†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –±—é–¥–∂–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞'
        ]
    },
    coordinator_interface=coordinator_interface
)

def execute(**kwargs) -> Dict[str, Any]:
    """Execute enterprise-level budget calculation with advanced financial analysis."""
    start_time = time.time()
    
    try:
        # Validate and parse parameters
        project_name = kwargs.get('project_name', '').strip()
        if not project_name:
            return {
                'status': 'error',
                'error': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
                'execution_time': time.time() - start_time
            }
        
        base_cost = kwargs.get('base_cost', 0)
        if base_cost <= 0:
            return {
                'status': 'error',
                'error': '–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0',
                'execution_time': time.time() - start_time
            }
        
        # Parse parameters with defaults
        project_type = kwargs.get('project_type', 'residential')
        profit_margin = max(0.0, min(1.0, kwargs.get('profit_margin', 0.15)))
        overhead_rate = max(0.0, min(1.0, kwargs.get('overhead_rate', 0.20)))
        tax_rate = max(0.0, min(1.0, kwargs.get('tax_rate', 0.20)))
        risk_factor = max(0.0, min(0.5, kwargs.get('risk_factor', 0.05)))
        inflation_rate = max(0.0, min(1.0, kwargs.get('inflation_rate', 0.08)))
        project_duration = max(1, min(60, kwargs.get('project_duration', 12)))
        include_breakdown = kwargs.get('include_breakdown', True)
        currency = kwargs.get('currency', 'RUB')
        
        # Calculate comprehensive budget using enhanced parser if available
        if HAS_ENHANCED_BUDGET and calculate_budget_from_estimate is not None:
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–º–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
            estimate_data = {
                'total_cost': base_cost,
                'project_name': project_name,
                'project_type': project_type
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞
            enhanced_result = calculate_budget_from_estimate(estimate_data)
            
            if enhanced_result.get('status') == 'success':
                total_expenses = enhanced_result.get('total_expenses', 0)
                net_profit = enhanced_result.get('net_profit', 0)
                total_cost = base_cost  # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å = –±–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                
                budget_calculation = {
                    'base_cost': base_cost,
                    'total_cost': total_cost,
                    'net_profit': net_profit,
                    'profit_margin': enhanced_result.get('profit_margin', 0),
                    'budget_items': enhanced_result.get('budget_items', {}),
                    'enhanced_calculation': True,
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    'labor_cost': 0,
                    'insurance_cost': 0,
                    'travel_cost': 0,
                    'equipment_cost': 0,
                    'total_expenses': total_expenses,
                    'subtotal': total_cost,
                    'breakdown_percentages': {
                        'base': 100.0,
                        'labor': 0.0,
                        'insurance': 0.0,
                        'travel': 0.0,
                        'equipment': 0.0,
                        'expenses': 0.0,
                        'profit': 0.0
                    },
                    'currency_symbol': '‚ÇΩ'
                }
            else:
                # Fallback to original calculation
                budget_calculation = _calculate_comprehensive_budget(
                    base_cost, project_type, profit_margin, overhead_rate, 
                    tax_rate, risk_factor, inflation_rate, project_duration, currency
                )
        else:
            # Original calculation
            budget_calculation = _calculate_comprehensive_budget(
                base_cost, project_type, profit_margin, overhead_rate, 
                tax_rate, risk_factor, inflation_rate, project_duration, currency
            )
        
        # Generate recommendations
        recommendations = _generate_budget_recommendations(
            budget_calculation, project_type, project_duration
        )
        
        # Create detailed breakdown table
        table_data = _create_budget_breakdown_table(budget_calculation, currency)
        
        # Generate metadata
        metadata = {
            'project_name': project_name,
            'project_type': project_type,
            'base_cost': base_cost,
            'total_cost': budget_calculation['total_cost'],
            'profit_margin': profit_margin,
            'overhead_rate': overhead_rate,
            'tax_rate': tax_rate,
            'risk_factor': risk_factor,
            'inflation_rate': inflation_rate,
            'project_duration': project_duration,
            'currency': currency,
            'calculated_at': time.strftime('%Y-%m-%d %H:%M:%S'),
            'recommendations': recommendations
        }
        
        execution_time = time.time() - start_time
        
        return {
            'status': 'success',
            'data': {
                'budget': budget_calculation,
                'total_cost': budget_calculation['total_cost'],
                'breakdown': table_data,
                'recommendations': recommendations,
                'metadata': metadata
            },
            'execution_time': execution_time,
            'result_type': 'financial_report',
            'result_title': f'üí∞ –ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞: {project_name}',
            'result_table': table_data,
            'metadata': metadata
        }
        
    except Exception as e:
        return { 
            'status': 'error', 
            'error': str(e),
            'execution_time': time.time() - start_time
        }


def _calculate_comprehensive_budget(base_cost: float, project_type: str, profit_margin: float,
                                  overhead_rate: float, tax_rate: float, risk_factor: float,
                                  inflation_rate: float, project_duration: int, currency: str) -> Dict[str, Any]:
    """Calculate comprehensive budget with all factors using construction budgeting approach."""
    
    # Calculate budget items using construction budgeting approach
    # Labor costs (–§–û–¢) - 12% of base cost
    labor_cost = base_cost * 0.12
    
    # Insurance costs (–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤–∑–Ω–æ—Å—ã) - 30.2% of labor costs
    insurance_cost = labor_cost * 0.302
    
    # Travel costs (–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ) - 2.76% of base cost
    travel_cost = base_cost * 0.0276
    
    # Equipment costs (–°–ò–ó) - 0.24% of base cost
    equipment_cost = base_cost * 0.0024
    
    # Calculate total expenses
    total_expenses = labor_cost + insurance_cost + travel_cost + equipment_cost
    
    # Calculate net profit (base cost minus expenses)
    net_profit = base_cost - total_expenses
    
    # Calculate profit margin as percentage
    profit_margin_calc = (net_profit / base_cost * 100) if base_cost > 0 else 0
    
    # Currency formatting
    currency_symbol = {'RUB': '‚ÇΩ', 'USD': '$', 'EUR': '‚Ç¨'}.get(currency, '‚ÇΩ')
    
    return {
        'base_cost': base_cost,
        'labor_cost': labor_cost,
        'insurance_cost': insurance_cost,
        'travel_cost': travel_cost,
        'equipment_cost': equipment_cost,
        'total_expenses': total_expenses,
        'net_profit': net_profit,
        'profit_margin': profit_margin_calc,
        'total_cost': base_cost,  # Total cost is the base cost in construction budgeting
        'currency_symbol': currency_symbol,
        'breakdown_percentages': {
            'base': 100.0,
            'labor': (labor_cost / base_cost) * 100,
            'insurance': (insurance_cost / base_cost) * 100,
            'travel': (travel_cost / base_cost) * 100,
            'equipment': (equipment_cost / base_cost) * 100,
            'expenses': (total_expenses / base_cost) * 100,
            'profit': (net_profit / base_cost) * 100
        }
    }


def _create_budget_breakdown_table(budget_calculation: Dict[str, Any], currency: str) -> List[Dict[str, Any]]:
    """Create detailed budget breakdown table."""
    symbol = budget_calculation['currency_symbol']
    
    table_data = [
        {
            'item': '–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å',
            'amount': f"{budget_calculation['base_cost']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['base']:.1f}%",
            'category': '–û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã'
        },
        {
            'item': '–§–û–¢',
            'amount': f"{budget_calculation['labor_cost']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['labor']:.1f}%",
            'category': '–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'
        },
        {
            'item': '–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤–∑–Ω–æ—Å—ã',
            'amount': f"{budget_calculation['insurance_cost']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['insurance']:.1f}%",
            'category': '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ'
        },
        {
            'item': '–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ',
            'amount': f"{budget_calculation['travel_cost']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['travel']:.1f}%",
            'category': '–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏'
        },
        {
            'item': '–°–ò–ó',
            'amount': f"{budget_calculation['equipment_cost']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['equipment']:.1f}%",
            'category': '–°—Ä–µ–¥—Å—Ç–≤–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã'
        },
        {
            'item': '–ò–¢–û–ì–û –†–ê–°–•–û–î–´',
            'amount': f"{budget_calculation['total_expenses']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['expenses']:.1f}%",
            'category': '–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'
        },
        {
            'item': '–ß–ò–°–¢–ê–Ø –ü–†–ò–ë–´–õ–¨',
            'amount': f"{budget_calculation['net_profit']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['profit']:.1f}%",
            'category': '–ü—Ä–∏–±—ã–ª—å'
        }
    ]
    
    return table_data


def _generate_budget_recommendations(budget_calculation: Dict[str, Any], 
                                   project_type: str, project_duration: int) -> List[str]:
    """Generate budget recommendations based on analysis."""
    recommendations = []
    
    total_cost = budget_calculation['total_cost']
    base_cost = budget_calculation['base_cost']
    profit_rate = budget_calculation['breakdown_percentages']['profit']
    expenses_rate = budget_calculation['breakdown_percentages']['expenses']
    
    # Expenses analysis
    if expenses_rate > 25:
        recommendations.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã (>25% –æ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    elif expenses_rate < 15:
        recommendations.append("‚úÖ –†–∞—Å—Ö–æ–¥—ã –≤ –Ω–æ—Ä–º–µ. –•–æ—Ä–æ—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    
    # Profit analysis
    if profit_rate > 20:
        recommendations.append("üí∞ –í—ã—Å–æ–∫–∞—è –Ω–æ—Ä–º–∞ –ø—Ä–∏–±—ã–ª–∏. –ü—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.")
    elif profit_rate < 10:
        recommendations.append("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –Ω–æ—Ä–º–∞ –ø—Ä–∏–±—ã–ª–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
    
    # Project type specific recommendations
    if project_type == 'residential':
        recommendations.append("üè† –î–ª—è –∂–∏–ª—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ª–æ–∂–∏—Ç—å —Ä–µ–∑–µ—Ä–≤ 10-15% –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã.")
    elif project_type == 'commercial':
        recommendations.append("üè¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–æ–∫–æ–≤ –∏ –±—é–¥–∂–µ—Ç–∞.")
    elif project_type == 'industrial':
        recommendations.append("üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É—á–µ—Ç–∞ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.")
    
    # Duration analysis
    if project_duration > 24:
        recommendations.append("‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –±—é–¥–∂–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏.")
    
    # Cost analysis
    if total_cost > base_cost * 2:
        recommendations.append("üìä –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–∑–æ–≤—É—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å—á–µ—Ç—ã.")
    
    return recommendations


