# namespace:core_rag
from typing import Any, Dict, List

manifest = {
    'name': 'search_rag_database',
    'version': '0.1.0',
    'title': 'Поиск в базе знаний (RAG)',
    'description': 'Ищет релевантные фрагменты в базе знаний по запросу',
    'category': 'core_rag',
    'ui_placement': 'tools',
    'enabled': True,
    'system': False,
    'entrypoint': 'tools.custom.search_rag_database:execute',
    'params': [
        { 'name': 'query', 'type': 'string', 'required': True, 'description': 'Поисковый запрос' },
        { 'name': 'doc_types', 'type': 'string', 'required': False, 'description': 'Типы документов (через запятую)' },
        { 'name': 'k', 'type': 'number', 'required': False, 'default': 5, 'description': 'Количество результатов' },
        { 'name': 'use_sbert', 'type': 'boolean', 'required': False, 'default': True, 'description': 'Использовать SBERT для RU' }
    ],
    'outputs': ['results', 'ndcg']
}

def execute(**kwargs) -> Dict[str, Any]:
    """Delegate to unified tools system if available."""
    try:
        # Optional: parse doc_types from comma-separated string
        if isinstance(kwargs.get('doc_types'), str):
            parts = [p.strip() for p in kwargs['doc_types'].split(',') if p.strip()]
            if parts:
                kwargs['doc_types'] = parts
        from core.unified_tools_system import execute_tool as unified_exec
        res = unified_exec('search_rag_database', **kwargs)
        if getattr(res, 'status', None) == 'success':
            return { 'status': 'success', 'data': res.data }
        return { 'status': 'error', 'error': getattr(res, 'error', 'unknown error') }
    except Exception as e:
        return { 'status': 'error', 'error': str(e) }


