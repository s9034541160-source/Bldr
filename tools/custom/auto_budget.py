# namespace:financial
from typing import Any, Dict, List
import time
from core.tools.base_tool import ToolManifest, ToolInterface, ToolParam, ToolParamType

coordinator_interface = ToolInterface(
    purpose='–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤: –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Ä–∞–±–æ—Ç, –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤, –ø—Ä–∏–±—ã–ª–∏, –Ω–∞–ª–æ–≥–æ–≤ –∏ —Ä–∏—Å–∫–æ–≤',
    input_requirements={
        'project_name': ToolParam(
            name='project_name',
            type=ToolParamType.STRING,
            required=True,
            description='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞'
        ),
        'base_cost': ToolParam(
            name='base_cost',
            type=ToolParamType.NUMBER,
            required=True,
            description='–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ —Ä–∞–±–æ—Ç'
        )
    },
    execution_flow=[
        '–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
        '–†–∞—Å—á–µ—Ç –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
        '–£—á–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ä–∏—Å–∫–∞ –∏ –∏–Ω—Ñ–ª—è—Ü–∏–∏',
        '–†–∞—Å—á–µ—Ç –Ω–∞–ª–æ–≥–æ–≤',
        '–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã',
        '–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—å—è–º',
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π',
        '–í–æ–∑–≤—Ä–∞—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞'
    ],
    output_format={
        'status': 'success|error',
        'data': {
            'total_budget': 'float',
            'breakdown': 'object',
            'recommendations': 'array',
            'metadata': 'object'
        }
    },
    usage_guidelines={
        'for_coordinator': [
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –±—é–¥–∂–µ—Ç–æ–≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤',
            '–ü–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏',
            '–£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤'
        ],
        'for_models': [
            '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç',
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ breakdown –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞—Ç—Ä–∞—Ç',
            '–°–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—é–¥–∂–µ—Ç–∞'
        ]
    }
)

manifest = ToolManifest(
    name='auto_budget',
    version='1.0.0',
    title='üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞',
    description='–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤: –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, —Ä–∞–±–æ—Ç, –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤, –ø—Ä–∏–±—ã–ª–∏, –Ω–∞–ª–æ–≥–æ–≤ –∏ —Ä–∏—Å–∫–æ–≤.',
    category='financial',
    ui_placement='dashboard',
    enabled=True,
    system=False,
    entrypoint='tools.custom.auto_budget_full:execute',
    params=[
        ToolParam(
            name='project_name',
            type=ToolParamType.STRING,
            required=True,
            description='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
            ui={
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...',
                'maxLength': 200
            }
        ),
        ToolParam(
            name='base_cost',
            type=ToolParamType.NUMBER,
            required=True,
            description='–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–º–∞—Ç–µ—Ä–∏–∞–ª—ã + —Ä–∞–±–æ—Ç—ã)',
            ui={
                'min': 1000,
                'max': 100000000,
                'step': 1000,
                'currency': 'RUB'
            }
        ),
        ToolParam(
            name='project_type',
            type=ToolParamType.ENUM,
            required=False,
            default='residential',
            description='–¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞',
            enum=[
                {'value': 'residential', 'label': '–ñ–∏–ª–æ–π –¥–æ–º'},
                {'value': 'commercial', 'label': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∑–¥–∞–Ω–∏–µ'},
                {'value': 'industrial', 'label': '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç'},
                {'value': 'infrastructure', 'label': '–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞'},
                {'value': 'renovation', 'label': '–†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'},
                {'value': 'repair', 'label': '–†–µ–º–æ–Ω—Ç'}
            ]
        ),
        ToolParam(
            name='worker_daily_wage',
            type=ToolParamType.NUMBER,
            required=False,
            default=6700,
            description='–ó–∞—Ä–ø–ª–∞—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ, —Ä—É–±/—Å—É—Ç',
            ui={
                'min': 100,
                'max': 50000,
                'step': 100,
                'currency': 'RUB'
            }
        ),
        ToolParam(
            name='total_labor_hours',
            type=ToolParamType.NUMBER,
            required=False,
            default=40000,
            description='–û–±—â–∞—è —Ç—Ä—É–¥–æ—ë–º–∫–æ—Å—Ç—å, —á–µ–ª.-—á–∞—Å—ã',
            ui={
                'min': 100,
                'max': 1000000,
                'step': 100
            }
        ),
        ToolParam(
            name='project_duration_months',
            type=ToolParamType.NUMBER,
            required=False,
            default=12,
            description='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞, –º–µ—Å',
            ui={
                'min': 1,
                'max': 60,
                'step': 1
            }
        ),
        ToolParam(
            name='shifts_per_day',
            type=ToolParamType.NUMBER,
            required=False,
            default=1,
            description='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω –≤ –¥–µ–Ω—å',
            ui={
                'min': 1,
                'max': 3,
                'step': 1
            }
        ),
        ToolParam(
            name='hours_per_shift',
            type=ToolParamType.NUMBER,
            required=False,
            default=10,
            description='–ß–∞—Å–æ–≤ –≤ —Å–º–µ–Ω–µ',
            ui={
                'min': 1,
                'max': 24,
                'step': 1
            }
        ),
        ToolParam(
            name='shifts_per_month',
            type=ToolParamType.NUMBER,
            required=False,
            default=30,
            description='–°–º–µ–Ω –≤ –º–µ—Å—è—Ü–µ',
            ui={
                'min': 1,
                'max': 31,
                'step': 1
            }
        ),
        ToolParam(
            name='shift_mode_days',
            type=ToolParamType.NUMBER,
            required=False,
            default=45,
            description='–†–µ–∂–∏–º –≤–∞—Ö—Ç—ã, –¥–Ω–µ–π',
            ui={
                'min': 1,
                'max': 90,
                'step': 1
            }
        ),
        ToolParam(
            name='efficiency_coefficient',
            type=ToolParamType.NUMBER,
            required=False,
            default=0.8,
            description='–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã—Ä–∞–±–æ—Ç–∫–∏',
            ui={
                'min': 0.1,
                'max': 1.0,
                'step': 0.01
            }
        ),
        ToolParam(
            name='siz_cost',
            type=ToolParamType.NUMBER,
            required=False,
            default=30000,
            description='–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–ø–ª–µ–∫—Ç–∞ –°–ò–ó, —Ä—É–±',
            ui={
                'min': 1000,
                'max': 100000,
                'step': 1000,
                'currency': 'RUB'
            }
        ),
        ToolParam(
            name='ticket_cost',
            type=ToolParamType.NUMBER,
            required=False,
            default=15000,
            description='–°—Ç–æ–∏–º–æ—Å—Ç—å –±–∏–ª–µ—Ç–∞, —Ä—É–±',
            ui={
                'min': 1000,
                'max': 50000,
                'step': 1000,
                'currency': 'RUB'
            }
        ),
        ToolParam(
            name='meal_cost',
            type=ToolParamType.NUMBER,
            required=False,
            default=800,
            description='–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–∏—Ç–∞–Ω–∏—è, —Ä—É–±/—Å—É—Ç/—á–µ–ª',
            ui={
                'min': 100,
                'max': 5000,
                'step': 100,
                'currency': 'RUB'
            }
        ),
        ToolParam(
            name='accommodation_cost',
            type=ToolParamType.NUMBER,
            required=False,
            default=1200,
            description='–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, —Ä—É–±/—Å—É—Ç/—á–µ–ª',
            ui={
                'min': 100,
                'max': 5000,
                'step': 100,
                'currency': 'RUB'
            }
        ),
        ToolParam(
            name='engineer_daily_wage',
            type=ToolParamType.NUMBER,
            required=False,
            default=8335,
            description='–ó–∞—Ä–ø–ª–∞—Ç–∞ –ò–¢–†, —Ä—É–±/—Å—É—Ç',
            ui={
                'min': 1000,
                'max': 50000,
                'step': 100,
                'currency': 'RUB'
            }
        ),
        ToolParam(
            name='engineer_ratio',
            type=ToolParamType.NUMBER,
            required=False,
            default=0.14,
            description='–î–æ–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ò–¢–† –æ—Ç —Ä–∞–±–æ—á–∏—Ö',
            ui={
                'min': 0.01,
                'max': 1.0,
                'step': 0.01
            }
        ),
        ToolParam(
            name='mandatory_engineers',
            type=ToolParamType.NUMBER,
            required=False,
            default=8,
            description='–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ò–¢–† (—à—Ç.)',
            ui={
                'min': 1,
                'max': 50,
                'step': 1
            }
        ),
        ToolParam(
            name='insurance_rate',
            type=ToolParamType.NUMBER,
            required=False,
            default=0.32,
            description='–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤–∑–Ω–æ—Å—ã (0.0-1.0)',
            ui={
                'min': 0.0,
                'max': 1.0,
                'step': 0.01,
                'slider': True
            }
        ),
        ToolParam(
            name='currency',
            type=ToolParamType.ENUM,
            required=False,
            default='RUB',
            description='–í–∞–ª—é—Ç–∞ —Ä–∞—Å—á–µ—Ç–∞',
            enum=[
                {'value': 'RUB', 'label': '–†—É–±–ª–∏ (‚ÇΩ)'},
                {'value': 'USD', 'label': '–î–æ–ª–ª–∞—Ä—ã ($)'},
                {'value': 'EUR', 'label': '–ï–≤—Ä–æ (‚Ç¨)'}
            ]
        )
    ],
    outputs=['budget', 'total_cost', 'breakdown', 'recommendations'],
    result_display={
        'type': 'financial_report',
        'title': '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞',
        'description': '–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏',
        'features': {
            'exportable': True,
            'printable': True,
            'interactive': True,
            'charts': True
        }
    },
    permissions=['filesystem:write', 'network:out'],
    tags=['budget', 'finance', 'construction', 'planning', 'enterprise'],
    documentation={
        'examples': [
            {
                'title': '–ñ–∏–ª–æ–π –¥–æ–º',
                'project_name': '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∫–æ—Ç—Ç–µ–¥–∂–∞',
                'base_cost': 5000000,
                'project_type': 'residential'
            },
            {
                'title': '–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –∑–¥–∞–Ω–∏–µ',
                'project_name': '–û—Ñ–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä',
                'base_cost': 15000000,
                'project_type': 'commercial'
            }
        ],
        'tips': [
            '–£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ',
            '–ó–∞–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤ –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
            '–†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –±—é–¥–∂–µ—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞'
        ]
    },
    coordinator_interface=coordinator_interface
)

def execute(**kwargs) -> Dict[str, Any]:
    """Execute enterprise-level budget calculation with advanced financial analysis."""
    start_time = time.time()
    
    try:
        # Validate and parse parameters
        project_name = kwargs.get('project_name', '').strip()
        if not project_name:
            return {
                'status': 'error',
                'error': '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
                'execution_time': time.time() - start_time
            }
        
        base_cost = kwargs.get('base_cost', 0)
        if base_cost <= 0:
            return {
                'status': 'error',
                'error': '–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0',
                'execution_time': time.time() - start_time
            }
        
        # Parse parameters with defaults
        project_type = kwargs.get('project_type', 'residential')
        worker_daily_wage = kwargs.get('worker_daily_wage', 6700)
        total_labor_hours = kwargs.get('total_labor_hours', 40000)
        project_duration_months = kwargs.get('project_duration_months', 12)
        shifts_per_day = kwargs.get('shifts_per_day', 1)
        hours_per_shift = kwargs.get('hours_per_shift', 10)
        shifts_per_month = kwargs.get('shifts_per_month', 30)
        shift_mode_days = kwargs.get('shift_mode_days', 45)
        efficiency_coefficient = kwargs.get('efficiency_coefficient', 0.8)
        siz_cost = kwargs.get('siz_cost', 30000)
        ticket_cost = kwargs.get('ticket_cost', 15000)
        meal_cost = kwargs.get('meal_cost', 800)
        accommodation_cost = kwargs.get('accommodation_cost', 1200)
        engineer_daily_wage = kwargs.get('engineer_daily_wage', 8335)
        engineer_ratio = kwargs.get('engineer_ratio', 0.14)
        mandatory_engineers = kwargs.get('mandatory_engineers', 8)
        insurance_rate = kwargs.get('insurance_rate', 0.32)
        currency = kwargs.get('currency', 'RUB')
        
        # Calculate comprehensive budget using full budget_final logic
        budget_calculation = _calculate_comprehensive_budget(
            base_cost=base_cost,
            project_type=project_type,
            worker_daily_wage=worker_daily_wage,
            total_labor_hours=total_labor_hours,
            project_duration_months=project_duration_months,
            shifts_per_day=shifts_per_day,
            hours_per_shift=hours_per_shift,
            shifts_per_month=shifts_per_month,
            shift_mode_days=shift_mode_days,
            efficiency_coefficient=efficiency_coefficient,
            siz_cost=siz_cost,
            ticket_cost=ticket_cost,
            meal_cost=meal_cost,
            accommodation_cost=accommodation_cost,
            engineer_daily_wage=engineer_daily_wage,
            engineer_ratio=engineer_ratio,
            mandatory_engineers=mandatory_engineers,
            insurance_rate=insurance_rate,
            currency=currency
        )
        
        # Generate recommendations
        recommendations = _generate_budget_recommendations(
            budget_calculation, project_type, project_duration_months
        )
        
        # Create detailed breakdown table
        table_data = _create_budget_breakdown_table(budget_calculation, currency)
        
        # Generate metadata
        metadata = {
            'project_name': project_name,
            'project_type': project_type,
            'base_cost': base_cost,
            'total_cost': budget_calculation['total_cost'],
            'calculated_at': time.strftime('%Y-%m-%d %H:%M:%S'),
            'recommendations': recommendations
        }
        
        execution_time = time.time() - start_time
        
        return {
            'status': 'success',
            'data': {
                'budget': budget_calculation,
                'total_cost': budget_calculation['total_cost'],
                'breakdown': table_data,
                'recommendations': recommendations,
                'metadata': metadata
            },
            'execution_time': execution_time,
            'result_type': 'financial_report',
            'result_title': f'üí∞ –ë—é–¥–∂–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞: {project_name}',
            'result_table': table_data,
            'metadata': metadata
        }
        
    except Exception as e:
        return { 
            'status': 'error', 
            'error': str(e),
            'execution_time': time.time() - start_time
        }

def _calculate_comprehensive_budget(
    base_cost: float,
    project_type: str,
    worker_daily_wage: float,
    total_labor_hours: float,
    project_duration_months: int,
    shifts_per_day: int,
    hours_per_shift: int,
    shifts_per_month: int,
    shift_mode_days: int,
    efficiency_coefficient: float,
    siz_cost: float,
    ticket_cost: float,
    meal_cost: float,
    accommodation_cost: float,
    engineer_daily_wage: float,
    engineer_ratio: float,
    mandatory_engineers: int,
    insurance_rate: float,
    currency: str
) -> Dict[str, Any]:
    """Calculate comprehensive budget using full budget_final logic."""
    
    # Validate inputs
    if base_cost <= 0:
        raise ValueError("–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
    
    if total_labor_hours <= 0:
        raise ValueError("–¢—Ä—É–¥–æ–µ–º–∫–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
    if project_duration_months <= 0:
        raise ValueError("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        
    if efficiency_coefficient <= 0 or efficiency_coefficient > 1:
        raise ValueError("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ (0, 1]")
    
    # --- –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
    input_data = {
        "–°–¢–û–ò–ú–û–°–¢–¨_–°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–ê": base_cost,
        "–ó–ü_–†–ê–ë–û–ß–ï–ì–û_–í_–°–£–¢–ö–ò": worker_daily_wage,
        "–¢–†–£–î–û–ï–ú–ö–û–°–¢–¨": total_labor_hours,
        "–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨_–ú–ï–°": project_duration_months,
        "–°–ú–ï–ù": shifts_per_day,
        "–ß–ê–°–û–í_–í_–°–ú–ï–ù–ï": hours_per_shift,
        "–°–ú–ï–ù_–í_–ú–ï–°": shifts_per_month,
        "–†–ï–ñ–ò–ú_–í–ê–•–¢–´_–î–ù–ï–ô": shift_mode_days,
        "–ö–≠–§_–í–´–†–ê–ë–û–¢–ö–ò": efficiency_coefficient,
        "–°–¢–û–ò–ú–û–°–¢–¨_–°–ò–ó": siz_cost,
        "–°–¢–û–ò–ú–û–°–¢–¨_–ë–ò–õ–ï–¢–ê": ticket_cost,
        "–°–¢–û–ò–ú–û–°–¢–¨_–ü–ò–¢–ê–ù–ò–Ø": meal_cost,
        "–°–¢–û–ò–ú–û–°–¢–¨_–ü–†–û–ñ–ò–í–ê–ù–ò–Ø": accommodation_cost,
        "–ó–ü_–ò–¢–†_–í_–°–£–¢–ö–ò": engineer_daily_wage,
        "–î–û–õ–Ø_–ò–¢–†": engineer_ratio,
        "–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô_–ò–¢–†": mandatory_engineers,
    }
    
    # --- –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã ---
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—á–∏—Ö
    workers_count = round(
        input_data["–¢–†–£–î–û–ï–ú–ö–û–°–¢–¨"] / 
        input_data["–ö–≠–§_–í–´–†–ê–ë–û–¢–ö–ò"] / 
        (input_data["–ß–ê–°–û–í_–í_–°–ú–ï–ù–ï"] * input_data["–°–ú–ï–ù"] * input_data["–°–ú–ï–ù_–í_–ú–ï–°"] * input_data["–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨_–ú–ï–°"])
    )
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ò–¢–†
    engineers_count = input_data["–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô_–ò–¢–†"] + round(input_data["–î–û–õ–Ø_–ò–¢–†"] * workers_count)
    
    # –§–û–¢ —Ä–∞–±–æ—á–∏—Ö
    worker_fot = (
        workers_count * 
        input_data["–ó–ü_–†–ê–ë–û–ß–ï–ì–û_–í_–°–£–¢–ö–ò"] * 
        input_data["–°–ú–ï–ù"] * 
        input_data["–°–ú–ï–ù_–í_–ú–ï–°"] * 
        input_data["–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨_–ú–ï–°"]
    )
    
    # –§–û–¢ –ò–¢–†
    shifts_engineers = round(
        input_data["–°–ú–ï–ù_–í_–ú–ï–°"] / 
        input_data["–†–ï–ñ–ò–ú_–í–ê–•–¢–´_–î–ù–ï–ô"] * 
        input_data["–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨_–ú–ï–°"]
    )
    
    engineer_fot = (
        engineers_count * 
        input_data["–ó–ü_–ò–¢–†_–í_–°–£–¢–ö–ò"] * 
        shifts_engineers * 
        input_data["–†–ï–ñ–ò–ú_–í–ê–•–¢–´_–î–ù–ï–ô"]
    )
    
    # –§–û–¢ –≤—Å–µ–≥–æ
    total_fot = worker_fot + engineer_fot
    
    # –°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤–∑–Ω–æ—Å—ã
    insurance_contributions = total_fot * insurance_rate
    
    # –ö–æ–ª-–≤–æ –≤–∞—Ö—Ç —Ä–∞–±–æ—á–∏—Ö
    shifts_workers = round(
        input_data["–°–ú–ï–ù_–í_–ú–ï–°"] / 
        input_data["–†–ï–ñ–ò–ú_–í–ê–•–¢–´_–î–ù–ï–ô"] * 
        input_data["–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨_–ú–ï–°"]
    )
    
    # –ë–∏–ª–µ—Ç—ã
    tickets_cost = (
        (workers_count * 2 * shifts_workers + engineers_count * 2 * shifts_engineers) * 
        input_data["–°–¢–û–ò–ú–û–°–¢–¨_–ë–ò–õ–ï–¢–ê"]
    )
    
    # –ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ
    accommodation_total_cost = (
        (workers_count * shifts_workers * input_data["–†–ï–ñ–ò–ú_–í–ê–•–¢–´_–î–ù–ï–ô"] + 
         engineers_count * shifts_engineers * input_data["–†–ï–ñ–ò–ú_–í–ê–•–¢–´_–î–ù–ï–ô"]) * 
        input_data["–°–¢–û–ò–ú–û–°–¢–¨_–ü–†–û–ñ–ò–í–ê–ù–ò–Ø"]
    )
    
    # –ü–∏—Ç–∞–Ω–∏–µ
    meals_cost = (
        (workers_count * shifts_workers * input_data["–†–ï–ñ–ò–ú_–í–ê–•–¢–´_–î–ù–ï–ô"] + 
         engineers_count * shifts_engineers * input_data["–†–ï–ñ–ò–ú_–í–ê–•–¢–´_–î–ù–ï–ô"]) * 
        input_data["–°–¢–û–ò–ú–û–°–¢–¨_–ü–ò–¢–ê–ù–ò–Ø"]
    )
    
    # –°–ò–ó
    siz_total_cost = (
        (workers_count + engineers_count) * 2 * 
        input_data["–°–¢–û–ò–ú–û–°–¢–¨_–°–ò–ó"] * 
        round(input_data["–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨_–ú–ï–°"] / 12)
    )
    
    # –í—ã—Ä—É—á–∫–∞ –≤—Å–µ–≥–æ (—Ä–∞–≤–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞)
    total_revenue = input_data["–°–¢–û–ò–ú–û–°–¢–¨_–°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–ê"]
    
    # Calculate monthly breakdown
    monthly_breakdown = []
    for month in range(1, 13):
        if month <= input_data["–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨_–ú–ï–°"]:
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞—Ç—Ä–∞—Ç –ø–æ –º–µ—Å—è—Ü–∞–º
            monthly_worker_fot = worker_fot / input_data["–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨_–ú–ï–°"]
            monthly_engineer_fot = engineer_fot / input_data["–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨_–ú–ï–°"]
            monthly_insurance = insurance_contributions / input_data["–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨_–ú–ï–°"]
            monthly_tickets = tickets_cost / input_data["–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨_–ú–ï–°"]
            monthly_accommodation = accommodation_total_cost / input_data["–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨_–ú–ï–°"]
            monthly_meals = meals_cost / input_data["–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨_–ú–ï–°"]
            monthly_siz = siz_total_cost / input_data["–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨_–ú–ï–°"]
            monthly_revenue = total_revenue / input_data["–ü–†–û–î–û–õ–ñ–ò–¢–ï–õ–¨–ù–û–°–¢–¨_–ú–ï–°"]
            
            monthly_breakdown.append({
                'month': month,
                'revenue': monthly_revenue,
                'worker_fot': monthly_worker_fot,
                'engineer_fot': monthly_engineer_fot,
                'insurance': monthly_insurance,
                'tickets': monthly_tickets,
                'accommodation': monthly_accommodation,
                'meals': monthly_meals,
                'siz': monthly_siz,
                'total_expenses': (
                    monthly_worker_fot + monthly_engineer_fot + monthly_insurance +
                    monthly_tickets + monthly_accommodation + monthly_meals + monthly_siz
                )
            })
        else:
            monthly_breakdown.append({
                'month': month,
                'revenue': 0,
                'worker_fot': 0,
                'engineer_fot': 0,
                'insurance': 0,
                'tickets': 0,
                'accommodation': 0,
                'meals': 0,
                'siz': 0,
                'total_expenses': 0
            })
    
    # Calculate total expenses
    total_expenses = (
        worker_fot + engineer_fot + insurance_contributions +
        tickets_cost + accommodation_total_cost + meals_cost + siz_total_cost
    )
    
    # Calculate net profit
    net_profit = total_revenue - total_expenses
    
    # Calculate profit margin
    profit_margin = (net_profit / total_revenue * 100) if total_revenue > 0 else 0
    
    # Currency formatting
    currency_symbol = {'RUB': '‚ÇΩ', 'USD': '$', 'EUR': '‚Ç¨'}.get(currency, '‚ÇΩ')
    
    return {
        'base_cost': base_cost,
        'workers_count': workers_count,
        'engineers_count': engineers_count,
        'worker_fot': worker_fot,
        'engineer_fot': engineer_fot,
        'total_fot': total_fot,
        'insurance_contributions': insurance_contributions,
        'tickets_cost': tickets_cost,
        'accommodation_cost': accommodation_total_cost,
        'meals_cost': meals_cost,
        'siz_cost': siz_total_cost,
        'total_expenses': total_expenses,
        'total_revenue': total_revenue,
        'net_profit': net_profit,
        'profit_margin': profit_margin,
        'total_cost': total_revenue,  # Total cost is the base cost/revenue in construction budgeting
        'currency_symbol': currency_symbol,
        'monthly_breakdown': monthly_breakdown,
        'input_data': input_data,
        'breakdown_percentages': {
            'base': 100.0,
            'worker_fot': (worker_fot / base_cost) * 100,
            'engineer_fot': (engineer_fot / base_cost) * 100,
            'insurance': (insurance_contributions / base_cost) * 100,
            'tickets': (tickets_cost / base_cost) * 100,
            'accommodation': (accommodation_total_cost / base_cost) * 100,
            'meals': (meals_cost / base_cost) * 100,
            'siz': (siz_total_cost / base_cost) * 100,
            'expenses': (total_expenses / base_cost) * 100,
            'profit': (net_profit / base_cost) * 100
        }
    }

def _create_budget_breakdown_table(budget_calculation: Dict[str, Any], currency: str) -> List[Dict[str, Any]]:
    """Create detailed budget breakdown table."""
    symbol = budget_calculation['currency_symbol']
    
    table_data = [
        {
            'item': '–°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞',
            'amount': f"{budget_calculation['base_cost']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['base']:.1f}%",
            'category': '–í—ã—Ä—É—á–∫–∞'
        },
        {
            'item': '–§–û–¢ —Ä–∞–±–æ—á–∏—Ö',
            'amount': f"{budget_calculation['worker_fot']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['worker_fot']:.1f}%",
            'category': '–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'
        },
        {
            'item': '–§–û–¢ –ò–¢–†',
            'amount': f"{budget_calculation['engineer_fot']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['engineer_fot']:.1f}%",
            'category': '–ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞'
        },
        {
            'item': '–°—Ç—Ä–∞—Ö–æ–≤—ã–µ –≤–∑–Ω–æ—Å—ã',
            'amount': f"{budget_calculation['insurance_contributions']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['insurance']:.1f}%",
            'category': '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ'
        },
        {
            'item': '–ë–∏–ª–µ—Ç—ã',
            'amount': f"{budget_calculation['tickets_cost']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['tickets']:.1f}%",
            'category': '–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏'
        },
        {
            'item': '–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ',
            'amount': f"{budget_calculation['accommodation_cost']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['accommodation']:.1f}%",
            'category': '–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏'
        },
        {
            'item': '–ü–∏—Ç–∞–Ω–∏–µ',
            'amount': f"{budget_calculation['meals_cost']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['meals']:.1f}%",
            'category': '–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏'
        },
        {
            'item': '–°–ò–ó',
            'amount': f"{budget_calculation['siz_cost']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['siz']:.1f}%",
            'category': '–°—Ä–µ–¥—Å—Ç–≤–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã'
        },
        {
            'item': '–ò–¢–û–ì–û –†–ê–°–•–û–î–´',
            'amount': f"{budget_calculation['total_expenses']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['expenses']:.1f}%",
            'category': '–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã'
        },
        {
            'item': '–ß–ò–°–¢–ê–Ø –ü–†–ò–ë–´–õ–¨',
            'amount': f"{budget_calculation['net_profit']:,.2f} {symbol}",
            'percentage': f"{budget_calculation['breakdown_percentages']['profit']:.1f}%",
            'category': '–ü—Ä–∏–±—ã–ª—å'
        }
    ]
    
    return table_data

def _generate_budget_recommendations(budget_calculation: Dict[str, Any], 
                                   project_type: str, project_duration_months: int) -> List[str]:
    """Generate budget recommendations based on analysis."""
    recommendations = []
    
    total_cost = budget_calculation['total_cost']
    base_cost = budget_calculation['base_cost']
    profit_rate = budget_calculation['breakdown_percentages']['profit']
    expenses_rate = budget_calculation['breakdown_percentages']['expenses']
    
    # Expenses analysis
    if expenses_rate > 25:
        recommendations.append("‚ö†Ô∏è –í—ã—Å–æ–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã (>25% –æ—Ç –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    elif expenses_rate < 15:
        recommendations.append("‚úÖ –†–∞—Å—Ö–æ–¥—ã –≤ –Ω–æ—Ä–º–µ. –•–æ—Ä–æ—à–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    
    # Profit analysis
    if profit_rate > 20:
        recommendations.append("üí∞ –í—ã—Å–æ–∫–∞—è –Ω–æ—Ä–º–∞ –ø—Ä–∏–±—ã–ª–∏. –ü—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤.")
    elif profit_rate < 10:
        recommendations.append("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –Ω–æ—Ä–º–∞ –ø—Ä–∏–±—ã–ª–∏. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
    elif profit_rate < 0:
        recommendations.append("‚ùå –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å. –†–∞—Å—Ö–æ–¥—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å.")
    
    # Project type specific recommendations
    if project_type == 'residential':
        recommendations.append("üè† –î–ª—è –∂–∏–ª—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ª–æ–∂–∏—Ç—å —Ä–µ–∑–µ—Ä–≤ 10-15% –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã.")
    elif project_type == 'commercial':
        recommendations.append("üè¢ –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–æ–∫–æ–≤ –∏ –±—é–¥–∂–µ—Ç–∞.")
    elif project_type == 'industrial':
        recommendations.append("üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É—á–µ—Ç–∞ —ç–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.")
    
    # Duration analysis
    if project_duration_months > 24:
        recommendations.append("‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ –±—é–¥–∂–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –∏–Ω—Ñ–ª—è—Ü–∏–∏.")
    
    # Cost analysis
    if total_cost > base_cost * 2:
        recommendations.append("üìä –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–∑–æ–≤—É—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å—á–µ—Ç—ã.")
    
    return recommendations