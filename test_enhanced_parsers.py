#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ —Å–º–µ—Ç –∏ –±—é–¥–∂–µ—Ç–∞
"""

import os
import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_enhanced_smeta_parser():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å–º–µ—Ç"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å–º–µ—Ç...")
    
    try:
        from core.enhanced_smeta_parser import EnhancedSmetaParser
        
        parser = EnhancedSmetaParser()
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å–º–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞
        test_file = "I:\\–Ω–µ–π—Ä–æ—Å–µ—Ç–∫–∏\\—Å—Ç—Ä–æ–π—Ç—ç–∫\\–ø—Ä–æ–≥–∞\\02-10-01 –ö–ñ - –õ–°–† –ø–æ –ú–µ—Ç–æ–¥–∏–∫–µ 2020 (–ë–ò–ú).xlsx"
        if os.path.exists(test_file):
            format_type = parser.detect_format(test_file)
            print(f"üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç: {format_type.value}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            result = parser.parse_excel_estimate(test_file)
            print(f"üìà –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {result.get('positions_count', 0)}")
            print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result.get('total_cost', 0):,.2f} —Ä—É–±.")
            print(f"üìã –§–æ—Ä–º–∞—Ç: {result.get('format', 'unknown')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ–∑–∏—Ü–∏–∏
            positions = result.get('positions', [])
            if positions:
                print("\nüìù –ü–µ—Ä–≤—ã–µ 3 –ø–æ–∑–∏—Ü–∏–∏:")
                for i, pos in enumerate(positions[:3], 1):
                    print(f"  {i}. {pos.get('description', 'N/A')[:50]}...")
                    print(f"     –ö–æ–¥: {pos.get('code', 'N/A')}")
                    print(f"     –°—Ç–æ–∏–º–æ—Å—Ç—å: {pos.get('total_cost', 0):,.2f} —Ä—É–±.")
        else:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Å–º–µ—Ç: {e}")
        import traceback
        traceback.print_exc()

def test_enhanced_budget_parser():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –±—é–¥–∂–µ—Ç–∞"""
    print("\nüí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –±—é–¥–∂–µ—Ç–∞...")
    
    try:
        from core.enhanced_budget_parser import EnhancedBudgetParser
        
        parser = EnhancedBudgetParser()
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –±—é–¥–∂–µ—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º–µ—Ç—ã
        test_estimate_data = {
            'total_cost': 50_000_000,  # 50 –º–ª–Ω —Ä—É–±
            'project_name': '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç',
            'project_type': 'residential'
        }
        
        result = parser.calculate_budget_from_estimate(test_estimate_data)
        
        if result.get('status') == 'success':
            print(f"üìä –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result.get('base_cost', 0):,.2f} —Ä—É–±.")
            print(f"üí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {result.get('total_expenses', 0):,.2f} —Ä—É–±.")
            print(f"üíµ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {result.get('net_profit', 0):,.2f} —Ä—É–±.")
            print(f"üìà –ú–∞—Ä–∂–∞ –ø—Ä–∏–±—ã–ª–∏: {result.get('profit_margin', 0):.2f}%")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å–∏ –±—é–¥–∂–µ—Ç–∞
            budget_items = result.get('budget_items', {})
            if budget_items:
                print("\nüìã –°—Ç–∞—Ç—å–∏ –±—é–¥–∂–µ—Ç–∞:")
                for item_code, item_data in budget_items.items():
                    print(f"  ‚Ä¢ {item_data['name']}: {item_data['amount']:,.2f} —Ä—É–±. ({item_data['percentage']}%)")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –±—é–¥–∂–µ—Ç–∞: {result.get('error', 'Unknown error')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –±—é–¥–∂–µ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

def test_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π estimate_parser_enhanced
        from core.estimate_parser_enhanced import parse_estimate_gesn
        
        test_file = "I:\\–Ω–µ–π—Ä–æ—Å–µ—Ç–∫–∏\\—Å—Ç—Ä–æ–π—Ç—ç–∫\\–ø—Ä–æ–≥–∞\\02-10-01 –ö–ñ - –õ–°–† –ø–æ –ú–µ—Ç–æ–¥–∏–∫–µ 2020 (–ë–ò–ú).xlsx"
        if os.path.exists(test_file):
            result = parse_estimate_gesn(test_file)
            print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"üìä –ü–æ–∑–∏—Ü–∏–π: {len(result.get('positions', []))}")
            print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result.get('total_cost', 0):,.2f} —Ä—É–±.")
            print(f"üìã –§–æ—Ä–º–∞—Ç: {result.get('format', 'unknown')}")
        else:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

def test_auto_budget_tool():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ auto_budget –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    print("\nüõ†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ auto_budget –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞...")
    
    try:
        from tools.custom.auto_budget import execute
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        result = execute(
            project_name="–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç",
            base_cost=100_000_000,
            project_type="residential"
        )
        
        if result.get('status') == 'success':
            print("‚úÖ auto_budget –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
            data = result.get('data', {})
            print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {data.get('total_cost', 0):,.2f} —Ä—É–±.")
            print(f"üìä –°—Ç–∞—Ç—É—Å: {result.get('status')}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.get('execution_time', 0):.2f} —Å–µ–∫.")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ auto_budget: {result.get('error', 'Unknown error')}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è auto_budget: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–´–• –ü–ê–†–°–ï–†–û–í")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    test_enhanced_smeta_parser()
    test_enhanced_budget_parser()
    test_integration()
    test_auto_budget_tool()
    
    print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 50)

if __name__ == "__main__":
    main()
