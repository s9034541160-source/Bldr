#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –æ–±—É—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ API –±–µ–∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
"""

import requests
import json
import time
from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE = "http://localhost:8000"
TIMEOUT_SHORT = 30  # —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
TIMEOUT_TRAIN = 7200  # 2 —á–∞—Å–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è

# –¢–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
API_TOKEN = os.getenv("API_TOKEN")

def get_auth_token():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    global API_TOKEN
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞
    if API_TOKEN:
        print(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞")
        return API_TOKEN
    
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ /token —ç–Ω–¥–ø–æ–∏–Ω—Ç
    print("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...")
    try:
        response = requests.post(f"{API_BASE}/token", timeout=TIMEOUT_SHORT)
        if response.status_code == 200:
            data = response.json()
            API_TOKEN = data["access_token"]
            print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return API_TOKEN
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

def get_auth_headers():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    token = get_auth_token()
    if token:
        return {"Authorization": f"Bearer {token}"}
    return {}

def test_api_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
    print("üîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API...")
    
    try:
        response = requests.get(f"{API_BASE}/health", timeout=TIMEOUT_SHORT)
        if response.status_code == 200:
            print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def test_train_endpoint():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –æ–±—É—á–µ–Ω–∏—è"""
    print("\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /train...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_headers = get_auth_headers()
    if not auth_headers:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return False
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ–±—É—á–µ–Ω–∏—è
    train_data = {
        "custom_dir": "I:/docs/downloaded"  # –ø–∞–ø–∫–∞ —Å 1168 –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –ù–¢–î
    }
    
    try:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ: {train_data['custom_dir']}")
        
        response = requests.post(
            f"{API_BASE}/train",
            json=train_data,
            headers=auth_headers,
            timeout=TIMEOUT_TRAIN,
            stream=True  # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        )
        
        if response.status_code == 200:
            print("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç")
            
            # –ß—Ç–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            print("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è:")
            for line in response.iter_lines(decode_unicode=True):
                if line:
                    try:
                        # –ï—Å–ª–∏ —ç—Ç–æ JSON, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
                        if line.startswith('{'):
                            data = json.loads(line)
                            if 'stage' in data and 'message' in data:
                                progress = data.get('progress', 0)
                                print(f"  [{data['stage']}] {data['message']} ({progress}%)")
                        else:
                            # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
                            print(f"  üìù {line}")
                    except json.JSONDecodeError:
                        print(f"  üìù {line}")
                        
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            return True
            
        elif response.status_code == 422:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {response.text}")
            return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return False
            
    except requests.exceptions.Timeout:
        print("‚è∞ –¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è)")
        return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def test_query_endpoint():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø–æ–∏—Å–∫–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /query...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_headers = get_auth_headers()
    if not auth_headers:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return False
    
    query_data = {
        "query": "–°–ü 45 –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
        "k": 3
    }
    
    try:
        response = requests.post(
            f"{API_BASE}/query",
            json=query_data,
            headers=auth_headers,
            timeout=TIMEOUT_SHORT
        )
        
        if response.status_code == 200:
            results = response.json()
            print("‚úÖ –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            if 'results' in results and results['results']:
                print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results['results'])}")
                for i, result in enumerate(results['results'][:2], 1):
                    print(f"  {i}. {result.get('chunk', '')[:100]}...")
                    print(f"     Score: {result.get('score', 0):.3f}")
            else:
                print("‚ùå –ü–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code} - {response.text}")
            return False
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        return False

def check_data_directories():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–∞–Ω–Ω—ã—Ö...")
    
    directories = [
        "I:/docs/downloaded",
        "I:/docs/–ë–ê–ó–ê",
        "I:/docs/clean_base", 
        "I:/docs/reports",
        "C:/Bldr/data"
    ]
    
    all_exist = True
    for directory in directories:
        if Path(directory).exists():
            print(f"‚úÖ {directory}")
        else:
            print(f"‚ùå {directory} - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            all_exist = False
            
    return all_exist

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG API")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if not check_data_directories():
        print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ–±—É—á–µ–Ω–∏—è")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if not test_api_connection():
        print("\n‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∫–µ–Ω–¥ —Å–Ω–∞—á–∞–ª–∞.")
        print("–ö–æ–º–∞–Ω–¥–∞: python main.py")
        return
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ (–¥–æ –æ–±—É—á–µ–Ω–∏—è)
    print("\nüîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –¥–æ –æ–±—É—á–µ–Ω–∏—è:")
    test_query_endpoint()
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ
    print("\n" + "=" * 50)
    print("üéì –û–ë–£–ß–ï–ù–ò–ï")
    print("–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ RAG –Ω–∞ –±–∞–∑–µ –ù–¢–î?")
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤!")
    
    user_input = input("–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ? (y/N): ").lower().strip()
    
    if user_input == 'y' or user_input == 'yes':
        if test_train_endpoint():
            print("\nüéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
            print("\nüîç –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è:")
            test_query_endpoint()
        else:
            print("\n‚ùå –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π")
    else:
        print("‚è≠Ô∏è  –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
    
    print("\n" + "=" * 50)
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    main()