#!/usr/bin/env python3
"""
–¢–µ—Å—Ç API —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""

import requests
import json
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_api_with_auth():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ .env —Ñ–∞–π–ª–∞"""
    base_url = "http://localhost:8000"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
    api_token = os.getenv('API_TOKEN')
    if not api_token:
        print("‚ùå API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω: {api_token[:20]}...")
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å —Ç–æ–∫–µ–Ω–æ–º
    headers = {
        "Authorization": f"Bearer {api_token}",
        "Content-Type": "application/json"
    }
    
    # 1. Health check (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
    print("1Ô∏è‚É£ Health check...")
    try:
        response = requests.get(f"{base_url}/health", timeout=10)
        print(f"   Status: {response.status_code}")
        print(f"   Response: {response.json()}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")
    
    # 2. RAG query test (—Å —Ç–æ–∫–µ–Ω–æ–º)
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º RAG –ø–æ–∏—Å–∫ —Å —Ç–æ–∫–µ–Ω–æ–º...")
    try:
        query_data = {
            "query": "–°–ü 31",
            "k": 3
        }
        response = requests.post(f"{base_url}/query", json=query_data, headers=headers, timeout=30)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            results_count = len(data.get('results', []))
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {results_count}")
            print(f"   NDCG: {data.get('ndcg', 'N/A')}")
            if results_count > 0:
                first_result = data['results'][0]
                print(f"   –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {first_result.get('chunk', '')[:100]}...")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")
    
    # 3. AI request test (—Å —Ç–æ–∫–µ–Ω–æ–º)
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º...")
    try:
        ai_data = {
            "prompt": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç AI —Å–∏—Å—Ç–µ–º—ã",
            "model": "deepseek/deepseek-r1-0528-qwen3-8b"
        }
        response = requests.post(f"{base_url}/ai", json=ai_data, headers=headers, timeout=30)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            print(f"   Task ID: {data.get('task_id', 'N/A')}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")

    # 4. Coordinator test (—Å —Ç–æ–∫–µ–Ω–æ–º)
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å —Ç–æ–∫–µ–Ω–æ–º...")
    try:
        coord_data = {
            "query": "–°–æ–∑–¥–∞–π —Å–º–µ—Ç—É –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –±–µ—Å–µ–¥–∫–∏ 4x4 –º–µ—Ç—Ä–∞",
            "source": "test",
            "user_id": "test_user"
        }
        response = requests.post(f"{base_url}/submit_query", json=coord_data, headers=headers, timeout=60)
        print(f"   Status: {response.status_code}")
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ –°—Ç–∞—Ç—É—Å: {data.get('status')}")
            has_plan = 'plan' in data
            has_results = 'results' in data
            print(f"   –ï—Å—Ç—å –ø–ª–∞–Ω: {has_plan}")
            print(f"   –ï—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {has_results}")
            if has_plan and data['plan']:
                plan = data['plan']
                print(f"   –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {plan.get('query_type', 'N/A')}")
                tools = plan.get('tools', [])
                if tools:
                    tool_names = [tool.get('name', 'unknown') for tool in tools]
                    print(f"   –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {', '.join(tool_names)}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")

    # 5. Training endpoint search
    print("\n5Ô∏è‚É£ –ò—â–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π training endpoint...")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    training_endpoints = [
        "/api/training/status",
        "/training/status", 
        "/train/status",
        "/training-status"
    ]
    
    for endpoint in training_endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}", headers=headers, timeout=10)
            print(f"   {endpoint}: {response.status_code}")
            if response.status_code == 200:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω! –û—Ç–≤–µ—Ç: {response.json()}")
                break
        except Exception as e:
            print(f"   {endpoint}: –û—à–∏–±–∫–∞ - {e}")

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
    print("=" * 50)
    test_api_with_auth()
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")