#!/usr/bin/env python3
"""
Test Telegram Bot Multimedia Features
Test voice, photo, and document handling capabilities
"""

import requests
import json
import base64
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

API_BASE = 'http://localhost:8000'
API_TOKEN = os.getenv('API_TOKEN')

def get_auth_headers():
    """Get authentication headers for API calls"""
    headers = {
        "Content-Type": "application/json"
    }
    if API_TOKEN:
        headers['Authorization'] = f'Bearer {API_TOKEN}'
    return headers

def test_api_multimedia_support():
    """Test if API supports multimedia data"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –≤ API...")
    
    # Test 1: Check if AI endpoint accepts image_data
    test_image_data = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg=="  # 1x1 pixel PNG
    
    try:
        headers = get_auth_headers()
        payload = {
            'prompt': '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
            'image_data': test_image_data,
            'model': 'deepseek/deepseek-r1-0528-qwen3-8b'
        }
        
        response = requests.post(f'{API_BASE}/ai', json=payload, headers=headers, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        elif response.status_code == 422:
            print("‚ùå API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª–µ 'image_data' - –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–¥–µ–ª—å")
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {str(e)}")
    
    # Test 2: Check if AI endpoint accepts voice_data
    try:
        headers = get_auth_headers()
        payload = {
            'prompt': '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞',
            'voice_data': test_image_data,  # Using same base64 data for test
            'model': 'deepseek/deepseek-r1-0528-qwen3-8b'
        }
        
        response = requests.post(f'{API_BASE}/ai', json=payload, headers=headers, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        elif response.status_code == 422:
            print("‚ùå API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª–µ 'voice_data' - –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–¥–µ–ª—å")
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≥–æ–ª–æ—Å–∞: {str(e)}")
    
    # Test 3: Check if AI endpoint accepts document_data
    try:
        headers = get_auth_headers()
        payload = {
            'prompt': '–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞',
            'document_data': test_image_data,  # Using same base64 data for test
            'document_name': 'test.pdf',
            'model': 'deepseek/deepseek-r1-0528-qwen3-8b'
        }
        
        response = requests.post(f'{API_BASE}/ai', json=payload, headers=headers, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        elif response.status_code == 422:
            print("‚ùå API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª–µ 'document_data' - –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –º–æ–¥–µ–ª—å")
        else:
            print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}")

def check_bot_dependencies():
    """Check if bot dependencies are available"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –±–æ—Ç–∞...")
    
    try:
        import telegram
        print("‚úÖ Python-telegram-bot —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except ImportError:
        print("‚ùå Python-telegram-bot –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –Ω—É–∂–Ω–æ: pip install python-telegram-bot")
    
    try:
        telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
        if telegram_token and telegram_token != 'YOUR_TELEGRAM_BOT_TOKEN_HERE':
            print("‚úÖ TELEGRAM_BOT_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        else:
            print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")

def show_bot_features_summary():
    """Show summary of bot capabilities"""
    print("\nüìã –°–≤–æ–¥–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Telegram –±–æ—Ç–∞:")
    print("‚îÅ" * 60)
    
    features = [
        ("üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è + –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∏—Ç. –Ω–æ—Ä–º"),
        ("üì∏ –§–æ—Ç–æ/–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "OCR + –∞–Ω–∞–ª–∏–∑ —á–µ—Ä—Ç–µ–∂–µ–π/–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"),
        ("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", "PDF/Word/Excel/DWG - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ + –∞–Ω–∞–ª–∏–∑"),
        ("üí¨ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", "–ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞—Ö (–±–µ–∑ –∫–æ–º–∞–Ω–¥)"),
        ("ü§ñ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–û—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–µ–π DeepSeek"),
        ("üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏", "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"),
        ("üöÄ –û–±—É—á–µ–Ω–∏–µ RAG", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É"),
        ("üíæ Neo4j –∑–∞–ø—Ä–æ—Å—ã", "–ü—Ä—è–º—ã–µ Cypher –∑–∞–ø—Ä–æ—Å—ã –∫ –≥—Ä–∞—Ñ–æ–≤–æ–π –ë–î")
    ]
    
    for feature, description in features:
        print(f"  {feature:<20} - {description}")
    
    print("‚îÅ" * 60)
    print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:")
    print("  ‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç ‚Üí –±–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —Ç–∏–ø –∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–¥–ø–∏—Å–µ–π –∫ —Ñ–∞–π–ª–∞–º –∏ —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")  
    print("  ‚Ä¢ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
    print("  ‚Ä¢ –õ–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤: 20MB –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
def main():
    """Main test function"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Telegram –±–æ—Ç–∞")
    print("=" * 60)
    
    # Test API multimedia support
    test_api_multimedia_support()
    
    # Check dependencies
    check_bot_dependencies()
    
    # Show features summary  
    show_bot_features_summary()
    
    print("\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("  python integrations/telegram_bot.py")
    
    print("\n–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("  üìù '–∫–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–µ—Ç–æ–Ω—É –ú300?' - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    print("  üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º")
    print("  üì∏ –§–æ—Ç–æ —á–µ—Ä—Ç–µ–∂–∞ —Å –ø–æ–¥–ø–∏—Å—å—é '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π'")
    print("  üìÑ PDF —Ñ–∞–π–ª —Å–æ –°–ù–∏–ü –∏–ª–∏ –ì–û–°–¢")

if __name__ == '__main__':
    main()