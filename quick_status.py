#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import requests
import json
import os
from pathlib import Path

BASE_URL = "http://localhost:8001"

def check_api():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ API"""
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå API –ø—Ä–æ–±–ª–µ–º–∞: {response.status_code}")
            return False
    except:
        print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False

def check_training():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è"""
    try:
        response = requests.get(f"{BASE_URL}/api/training/status", timeout=5)
        if response.status_code == 200:
            status = response.json()
            is_training = status.get('is_training', False)
            progress = status.get('progress', 0)
            stage = status.get('current_stage', 'unknown')
            
            if is_training:
                print(f"üîÑ –û–±—É—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: {progress}% - {stage}")
            else:
                print("‚è∏Ô∏è –û–±—É—á–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è")
            return False
    except:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—É—á–µ–Ω–∏—è")
        return False

def check_search():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞"""
    try:
        search_data = {
            "query": "–°–ü 31",
            "limit": 3
        }
        
        response = requests.post(
            f"{BASE_URL}/api/search", 
            json=search_data,
            timeout=10
        )
        
        if response.status_code == 200:
            results = response.json()
            count = len(results.get('results', []))
            if count > 0:
                print(f"‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            else:
                print("‚ö†Ô∏è –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç (–æ–±—É—á–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ?)")
            return True
        else:
            print("‚ùå –ü–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
    except:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")
        return False

def check_files():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–π–ª—ã"""
    files_to_check = [
        ("App.tsx", "C:\\Bldr\\web\\bldr_dashboard\\src\\App.tsx"),
        ("ProFeatures.tsx", "C:\\Bldr\\web\\bldr_dashboard\\src\\components\\ProFeatures.tsx"),
        ("FileManager.tsx", "C:\\Bldr\\web\\bldr_dashboard\\src\\components\\FileManager.tsx"),
        ("api.ts", "C:\\Bldr\\web\\bldr_dashboard\\src\\services\\api.ts"),
    ]
    
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:")
    for name, path in files_to_check:
        if os.path.exists(path):
            print(f"   ‚úÖ {name}")
        else:
            print(f"   ‚ùå {name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

def main():
    print("‚ö° –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    check_files()
    
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ API:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    if check_api():
        check_training()
        check_search()
    else:
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:")
        print("   python start_api_server.py")
    
    print("\nüîç –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("   python test_fixes.py")

if __name__ == "__main__":
    main()