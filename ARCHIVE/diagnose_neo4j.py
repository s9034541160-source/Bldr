#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Neo4j –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""

from neo4j import GraphDatabase
import socket

def check_port_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—Ä—Ç—É 7687"""
    print("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ø–æ—Ä—Ç—É 7687...")
    
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        result = sock.connect_ex(('localhost', 7687))
        sock.close()
        
        if result == 0:
            print("‚úÖ –ü–æ—Ä—Ç 7687 –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print("‚ùå –ü–æ—Ä—Ç 7687 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞: {e}")
        return False

def test_neo4j_versions():
    """–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª–∞"""
    protocols = [
        "neo4j://localhost:7687",
        "bolt://localhost:7687", 
        "neo4j://127.0.0.1:7687",
        "bolt://127.0.0.1:7687"
    ]
    
    user = "neo4j"
    password = "neopassword"
    
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤...")
    
    for protocol in protocols:
        print(f"\n   –ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol}")
        
        try:
            driver = GraphDatabase.driver(protocol, auth=(user, password))
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
            with driver.session() as session:
                result = session.run("""
                    CALL dbms.components() YIELD name, versions, edition
                    RETURN name, versions, edition
                """)
                
                print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                for record in result:
                    print(f"      {record['name']}: {record['versions']} ({record['edition']})")
                
                driver.close()
                return protocol
                
        except Exception as e:
            error_str = str(e)
            if "authentication failure" in error_str.lower():
                print("   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")
            elif "connection refused" in error_str.lower():
                print("   ‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
            elif "timeout" in error_str.lower():
                print("   ‚ùå –¢–∞–π–º-–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {error_str}")
    
    return None

def test_first_time_setup():
    """–¢–µ—Å—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"""
    print("\nüîß –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    
    try:
        # –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –ø–∞—Ä–æ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å "neo4j"
        driver = GraphDatabase.driver("neo4j://localhost:7687", auth=("neo4j", "neo4j"))
        
        with driver.session() as session:
            # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
            session.run("ALTER CURRENT USER SET PASSWORD FROM 'neo4j' TO 'neopassword'")
            print("‚úÖ –ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω—ë–Ω —Å 'neo4j' –Ω–∞ 'neopassword'")
            
        driver.close()
        
        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º
        driver = GraphDatabase.driver("neo4j://localhost:7687", auth=("neo4j", "neopassword"))
        with driver.session() as session:
            result = session.run("RETURN 'Password changed successfully!' as msg")
            record = result.single()
            print(f"‚úÖ {record['msg']}")
        driver.close()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"""
    print("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Neo4j")
    print("=" * 40)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
    if not check_port_connection():
        print("\n‚ùå Neo4j –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 7687")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–Ω—Å—Ç–∞–Ω—Å Bldr_2 –∑–∞–ø—É—â–µ–Ω –≤ Neo4j Desktop")
        return
    
    # 2. –¢–µ—Å—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    working_protocol = test_neo4j_versions()
    if working_protocol:
        print(f"\nüéâ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª: {working_protocol}")
        update_env_config(working_protocol)
        return
    
    # 3. –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if test_first_time_setup():
        print("\nüéâ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        update_env_config("neo4j://localhost:7687")
        return
    
    print("\n‚ùå –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
    print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Neo4j Browser: http://localhost:7474")
    print("2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Neo4j –≤ Desktop")
    print("4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∏–Ω—Å—Ç–∞–Ω—Å Bldr_2 –∞–∫—Ç–∏–≤–µ–Ω")

def update_env_config(uri):
    """–û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ .env"""
    print(f"\nüíæ –û–±–Ω–æ–≤–ª—è–µ–º .env —Å —Ä–∞–±–æ—á–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏...")
    
    try:
        with open(".env", 'r') as f:
            lines = f.readlines()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = {
            "NEO4J_URI": uri,
            "NEO4J_USER": "neo4j",
            "NEO4J_PASSWORD": "neopassword"
        }
        
        for setting, value in settings.items():
            updated = False
            for i, line in enumerate(lines):
                if line.startswith(f"{setting}="):
                    lines[i] = f"{setting}={value}\r\n"
                    updated = True
                    break
            
            if not updated:
                lines.append(f"{setting}={value}\r\n")
        
        with open(".env", 'w') as f:
            f.writelines(lines)
        
        print("‚úÖ .env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª—ë–Ω")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env: {e}")

if __name__ == "__main__":
    main()