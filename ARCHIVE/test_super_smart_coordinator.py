#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –°–£–ü–ï–†-–£–ú–ù–û–ì–û –ö–û–û–†–î–ò–ù–ê–¢–û–†–ê —Å —Ä–µ–∞–ª—å–Ω—ã–º LLM
"""

import requests
import json
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BACKEND_URL = "http://localhost:8000"
TEST_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJhZG1pbiIsInJvbGUiOiJhZG1pbiIsImV4cCI6MTc5MDAwNDY4NX0.hVYULUk7tjUFUNAVSOulnNy6sQXFozEiel3b2tSNhME"

def test_coordinator(query: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º"""
    print(f"\n{'='*60}")
    print(f"üß† –¢–ï–°–¢–ò–†–£–ï–ú: {query}")
    print(f"{'='*60}")
    
    try:
        response = requests.post(
            f"{BACKEND_URL}/api/ai/chat",
            headers={
                "Authorization": f"Bearer {TEST_TOKEN}",
                "Content-Type": "application/json"
            },
            json={
                "message": query,
                "context_search": True,
                "agent_role": "coordinator"
            },
            timeout=30  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        )
        
        if response.status_code == 200:
            result = response.json()
            
            print(f"‚úÖ STATUS: {result.get('status', 'unknown')}")
            print(f"üìù –û–¢–í–ï–¢:")
            print(f"{result.get('response', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}")
            
            if result.get('execution_summary'):
                print(f"\n‚ö° –í–´–ü–û–õ–ù–ï–ù–ò–ï: {result['execution_summary']}")
            
            if result.get('context_used'):
                print(f"\nüìö –ö–û–ù–¢–ï–ö–°–¢: {len(result['context_used'])} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
            
            return True
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê HTTP: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"""
üöÄ –¢–ï–°–¢–ò–†–£–ï–ú –°–£–ü–ï–†-–£–ú–ù–û–ì–û –ö–û–û–†–î–ò–ù–ê–¢–û–†–ê v2.0
==========================================
–í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
Backend: {BACKEND_URL}
    """)
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    test_queries = [
        "—Å–¥–µ–ª–∞–π —á–µ–∫-–ª–∏—Å—Ç –º–∞—Å—Ç–µ—Ä–∞ –°–ú–†",
        "—á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –∑–µ–º–ª—è–Ω—ã—Ö —Ä–∞–±–æ—Ç",
        "–ø—Ä–æ–≤–µ—Ä—å –°–ü –ø–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–º",
        "—Å–º–µ—Ç–∞ –Ω–∞ –∫–æ—Ç–ª–æ–≤–∞–Ω 100 –∫—É–±.–º.",
        "—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–æ–π–ø–ª–æ—â–∞–¥–∫–∏"
    ]
    
    success_count = 0
    total_count = len(test_queries)
    
    for query in test_queries:
        if test_coordinator(query):
            success_count += 1
        
        print(f"\n{'.'*60}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞...")
    
    print(f"\n{'='*60}")
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}/{total_count}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {total_count - success_count}/{total_count}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_count/total_count*100:.1f}%")
    
    if success_count == total_count:
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ö–û–û–†–î–ò–ù–ê–¢–û–† –†–ê–ë–û–¢–ê–ï–¢!")
    else:
        print(f"\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞...")

if __name__ == "__main__":
    main()