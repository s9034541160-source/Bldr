#!/usr/bin/env python3
"""
üöÄ –ü–û–õ–ù–´–ô –†–ï–ê–õ–¨–ù–´–ô –ü–†–û–¶–ï–°–° –û–ë–£–ß–ï–ù–ò–Ø RAG –ù–ê –í–°–ï–• 1168 –î–û–ö–£–ú–ï–ù–¢–ê–•
Symbiotic 15-stage pipeline with GPU acceleration and automatic sorting
"""

from scripts.bldr_rag_trainer import BldrRAGTrainer
import os
import time
import hashlib
from pathlib import Path
import json

def full_rag_training():
    print("üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –§–£–õ–õ –†–ï–ê–õ–¨–ù–´–ô RAG –ü–†–û–¶–ï–°–°!")
    print("=" * 80)
    print("üìä –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    print("‚Ä¢ üóÇÔ∏è  –ò—Å—Ç–æ—á–Ω–∏–∫: I:/docs/downloaded (1168+ —Ñ–∞–π–ª–æ–≤)")
    print("‚Ä¢ üìÅ –ê–≤—Ç–æ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤: I:/docs/–ë–ê–ó–ê/{–∫–∞—Ç–µ–≥–æ—Ä–∏—è}/")
    print("‚Ä¢ üß† –ú–æ–¥–µ–ª—å: ai-forever/sbert_large_nlu_ru (GPU)")
    print("‚Ä¢ üîÑ Pipeline: 15 —Å—Ç–∞–¥–∏–π (Stage 0 + Stages 1-14)")
    print("‚Ä¢ üíæ –•—Ä–∞–Ω–µ–Ω–∏–µ: Neo4j + Qdrant + FAISS")
    print("=" * 80)
    print()
    
    # –°–æ–∑–¥–∞–µ–º –º–æ—â–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä —Å GPU
    trainer = BldrRAGTrainer(
        base_dir='I:/docs/downloaded',     # –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        reports_dir='I:/docs/reports',     # –û—Ç—á–µ—Ç—ã
        use_advanced_embeddings=True       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    source_dir = 'I:/docs/downloaded'
    all_files = []
    
    print("üì¶ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –§–ê–ô–õ–û–í...")
    for file in os.listdir(source_dir):
        file_path = os.path.join(source_dir, file)
        if os.path.isfile(file_path):
            all_files.append(file_path)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_files)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
    processed_hashes = set(trainer.processed_files.keys())
    completed_count = sum(1 for v in trainer.processed_files.values() if v.get('status') == 'completed')
    
    print(f"üèÅ –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {completed_count} —Ñ–∞–π–ª–æ–≤")
    print(f"üéØ –ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(all_files) - completed_count} —Ñ–∞–π–ª–æ–≤")
    print()
    
    # –û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    def progress_callback(stage, message, progress):
        timestamp = time.strftime('%H:%M:%S')
        print(f'  [{timestamp}] {stage} | {progress:3d}% | {message[:60]}...')

    # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
    start_time = time.time()
    processed_count = 0
    error_count = 0
    skipped_count = 0
    
    print("üî• –ù–ê–ß–ò–ù–ê–ï–ú –ú–ê–°–°–û–í–£–Æ –û–ë–†–ê–ë–û–¢–ö–£...")
    print("=" * 80)
    
    for i, file_path in enumerate(all_files):
        filename = Path(file_path).name
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç
            with open(file_path, 'rb') as f:
                file_hash = hashlib.sha256(f.read()).hexdigest()
            
            if file_hash in processed_hashes:
                skipped_count += 1
                if i % 50 == 0:  # –ö–∞–∂–¥—ã–µ 50 —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    progress_percent = (i / len(all_files)) * 100
                    print(f"‚è≠Ô∏è  [{i+1:4d}/{len(all_files)}] {progress_percent:5.1f}% | –ü—Ä–æ–ø—É—â–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: {filename[:40]}...")
                continue
            
            print(f"üîÑ [{i+1:4d}/{len(all_files)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {filename}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π 15-—Å—Ç–∞–¥–∏–π–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            success = trainer.process_document(file_path, progress_callback)
            
            if success:
                processed_count += 1
                print(f"‚úÖ [{i+1:4d}/{len(all_files)}] –ó–∞–≤–µ—Ä—à–µ–Ω: {filename}")
                
                # –ö–∞–∂–¥—ã–µ 10 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if processed_count % 10 == 0:
                    elapsed = time.time() - start_time
                    speed = processed_count / (elapsed / 60) if elapsed > 0 else 0
                    remaining = (len(all_files) - i - 1) / speed if speed > 0 else 0
                    print()
                    print(f"üìà –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                    print(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}")
                    print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
                    print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
                    print(f"   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {speed:.1f} —Ñ–∞–π–ª–æ–≤/–º–∏–Ω")
                    print(f"   ‚è±Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å: {remaining:.0f} –º–∏–Ω—É—Ç")
                    print()
            else:
                error_count += 1
                print(f"‚ùå [{i+1:4d}/{len(all_files)}] –û—à–∏–±–∫–∞: {filename}")
            
        except Exception as e:
            error_count += 1
            print(f"üí• [{i+1:4d}/{len(all_files)}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {filename}: {e}")
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_time = time.time() - start_time
    print("=" * 80)
    print("üéä –ü–û–õ–ù–û–ï RAG –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 80)
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time/3600:.1f} —á–∞—Å–æ–≤ ({total_time/60:.1f} –º–∏–Ω—É—Ç)")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count} —Ñ–∞–π–ª–æ–≤")
    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {skipped_count} —Ñ–∞–π–ª–æ–≤")
    print(f"‚ùå –û—à–∏–±–æ–∫: {error_count} —Ñ–∞–π–ª–æ–≤")
    print(f"üìä –û–±—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {processed_count/(total_time/60):.1f} —Ñ–∞–π–ª–æ–≤/–º–∏–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    print()
    print("üìà –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´:")
    
    try:
        # Qdrant —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if trainer.qdrant_client:
            collection_info = trainer.qdrant_client.get_collection('universal_docs')
            point_count = getattr(collection_info, 'points_count', 'unknown')
            print(f"üóÑÔ∏è  Qdrant –≤–µ–∫—Ç–æ—Ä–æ–≤: {point_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫–∏ –ë–ê–ó–ê
        base_folder = Path('I:/docs/–ë–ê–ó–ê')
        if base_folder.exists():
            subfolders = [f for f in base_folder.iterdir() if f.is_dir()]
            total_sorted_files = sum(len(list(folder.rglob('*.*'))) for folder in subfolders)
            print(f"üìÅ –§–∞–π–ª–æ–≤ –≤ –ë–ê–ó–ê —Å—Ç—Ä—É–∫—Ç—É—Ä–µ: {total_sorted_files}")
            print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–æ: {len(subfolders)}")
        
        # –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        reports_file = Path('I:/docs/reports/processed_files.json')
        if reports_file.exists():
            with open(reports_file, 'r') as f:
                processed_data = json.load(f)
            completed_total = sum(1 for v in processed_data.values() if v.get('status') == 'completed')
            print(f"üìã –ó–∞–ø–∏—Å–µ–π –≤ processed_files.json: {len(processed_data)}")
            print(f"üèÅ –°—Ç–∞—Ç—É—Å 'completed': {completed_total}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    print()
    print("üéØ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –û–ë–£–ß–ï–ù–ê –ò –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!")
    print("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!")
    
    return trainer

if __name__ == "__main__":
    trainer = full_rag_training()