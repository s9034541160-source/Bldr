#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è RAG –æ–±—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ uuid
"""

from scripts.bldr_rag_trainer import BldrRAGTrainer
import os
import time
import hashlib
from pathlib import Path

def continue_rag_training():
    print('üöÄ –ü–†–û–î–û–õ–ñ–ê–ï–ú RAG –û–ë–£–ß–ï–ù–ò–ï –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –û–®–ò–ë–ö–û–ô UUID!')
    print('=' * 60)

    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
    trainer = BldrRAGTrainer(
        base_dir='I:/docs/downloaded',
        reports_dir='I:/docs/reports'
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    source_dir = 'I:/docs/downloaded'
    all_files = []
    for file in os.listdir(source_dir):
        file_path = os.path.join(source_dir, file)
        if os.path.isfile(file_path):
            all_files.append(file_path)

    print(f'üì¶ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(all_files)}')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    processed_hashes = set(trainer.processed_files.keys())
    print(f'‚úÖ –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processed_hashes)} —Ñ–∞–π–ª–æ–≤')

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –ø–∞—Ä—Ç–∏—è–º–∏
    processed_count = 0
    start_time = time.time()

    def progress_callback(stage, message, progress):
        timestamp = time.strftime('%H:%M:%S')
        print(f'  [{timestamp}] {stage} | {progress:3d}% | {message}')

    print('üìã –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É...')
    print()

    # –û–±—Ä–∞–±–æ—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
    files_to_process = all_files[:20]
    
    for i, file_path in enumerate(files_to_process):
        filename = Path(file_path).name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ —Ñ–∞–π–ª
        try:
            with open(file_path, 'rb') as f:
                file_content = f.read()
                file_hash = hashlib.sha256(file_content).hexdigest()
            
            if file_hash in processed_hashes:
                print(f'‚è≠Ô∏è  [{i+1}/{len(files_to_process)}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (—É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω): {filename}')
                continue
                
            print(f'üîÑ [{i+1}/{len(files_to_process)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {filename}')
            
            success = trainer.process_document(file_path, progress_callback)
            
            if success:
                processed_count += 1
                print(f'‚úÖ [{i+1}/{len(files_to_process)}] –ó–∞–≤–µ—Ä—à–µ–Ω: {filename}')
            else:
                print(f'‚ùå [{i+1}/{len(files_to_process)}] –û—à–∏–±–∫–∞: {filename}')
                
        except Exception as e:
            print(f'‚ùå [{i+1}/{len(files_to_process)}] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}')
        
        print()

    elapsed_time = time.time() - start_time
    print('=' * 60)
    print(f'üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–ö–ï–¢–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò:')
    print(f'‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed_time/60:.1f} –º–∏–Ω—É—Ç')
    print(f'‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {processed_count} —Ñ–∞–π–ª–æ–≤')
    if elapsed_time > 0:
        print(f'üìà –°–∫–æ—Ä–æ—Å—Ç—å: {processed_count/(elapsed_time/60):.1f} —Ñ–∞–π–ª–æ–≤/–º–∏–Ω')
    print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Qdrant –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    try:
        if trainer.qdrant_client:
            collection_info = trainer.qdrant_client.get_collection('universal_docs')
            point_count = getattr(collection_info, 'points_count', 'unknown')
            print(f'üóÑÔ∏è  Qdrant –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç: {point_count} –≤–µ–∫—Ç–æ—Ä–æ–≤')
    except Exception as e:
        print(f'‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Qdrant: {e}')
    
    print('üéØ –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ!')

if __name__ == "__main__":
    continue_rag_training()