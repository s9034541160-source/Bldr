#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô
==================================

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã /token endpoint
2. –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –Ω–∞—Å—Ç—Ä–æ–µ–∫
4. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
"""

import os
import sys
import requests
import json
import jwt
from datetime import datetime, timedelta

def analyze_backend_auth():
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –≤ –±—ç–∫–µ–Ω–¥–µ"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±—ç–∫–µ–Ω–¥–∞...")
    
    issues = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ /token endpoint
    try:
        # –¢–µ—Å—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        form_data = {
            'username': 'admin',
            'password': 'admin',
            'grant_type': 'password'
        }
        
        response = requests.post(
            'http://localhost:8000/token',
            data=form_data,
            headers={'Content-Type': 'application/x-www-form-urlencoded'},
            timeout=10
        )
        
        if response.status_code == 200:
            token_data = response.json()
            print(f"‚úÖ Token endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç: {token_data}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–æ–∫–µ–Ω–∞
            if 'access_token' in token_data:
                token = token_data['access_token']
                try:
                    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    secret = os.getenv("SECRET_KEY", "your-secret-key-change-in-production")
                    payload = jwt.decode(token, secret, algorithms=["HS256"])
                    print(f"‚úÖ JWT —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π: {payload}")
                except Exception as e:
                    print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å JWT —Ç–æ–∫–µ–Ω–æ–º: {e}")
                    issues.append(f"JWT validation error: {e}")
            else:
                print("‚ùå –ù–µ—Ç access_token –≤ –æ—Ç–≤–µ—Ç–µ")
                issues.append("Missing access_token in response")
        else:
            print(f"‚ùå Token endpoint –æ—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            issues.append(f"Token endpoint error: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ token endpoint: {e}")
        issues.append(f"Token endpoint connection error: {e}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ CORS –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    try:
        # Preflight request
        response = requests.options(
            'http://localhost:8000/token',
            headers={
                'Origin': 'http://localhost:3001',
                'Access-Control-Request-Method': 'POST',
                'Access-Control-Request-Headers': 'Content-Type'
            }
        )
        
        cors_headers = {
            'Access-Control-Allow-Origin': response.headers.get('Access-Control-Allow-Origin'),
            'Access-Control-Allow-Methods': response.headers.get('Access-Control-Allow-Methods'),
            'Access-Control-Allow-Headers': response.headers.get('Access-Control-Allow-Headers')
        }
        
        print(f"üìã CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏: {cors_headers}")
        
        if not cors_headers['Access-Control-Allow-Origin']:
            issues.append("Missing CORS Allow-Origin header")
        if not cors_headers['Access-Control-Allow-Methods']:
            issues.append("Missing CORS Allow-Methods header")
        if not cors_headers['Access-Control-Allow-Headers']:
            issues.append("Missing CORS Allow-Headers header")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CORS: {e}")
        issues.append(f"CORS check error: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ SKIP_AUTH —Ä–µ–∂–∏–º–∞
    skip_auth = os.getenv("SKIP_AUTH", "false").lower() == "true"
    print(f"üîê SKIP_AUTH —Ä–µ–∂–∏–º: {skip_auth}")
    
    if skip_auth:
        # –¢–µ—Å—Ç protected endpoint –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
        try:
            response = requests.get('http://localhost:8000/health', timeout=5)
            if response.status_code == 200:
                print("‚úÖ Health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (SKIP_AUTH=true)")
            else:
                print(f"‚ùå Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                issues.append("Health endpoint not accessible with SKIP_AUTH=true")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SKIP_AUTH: {e}")
            issues.append(f"SKIP_AUTH test error: {e}")
    
    return issues

def analyze_frontend_auth_flow():
    """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ (—Å–∏–º—É–ª—è—Ü–∏—è)"""
    print("\nüñ•Ô∏è –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    
    issues = []
    
    # –°–∏–º—É–ª—è—Ü–∏—è getToken –∑–∞–ø—Ä–æ—Å–∞
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
        form_data = {
            'username': 'admin',
            'password': 'admin',
            'grant_type': 'password'
        }
        
        response = requests.post(
            'http://localhost:8000/token',
            data=form_data,
            headers={
                'Content-Type': 'application/x-www-form-urlencoded',
                'Origin': 'http://localhost:3001'  # –§—Ä–æ–Ω—Ç–µ–Ω–¥ origin
            },
            timeout=10
        )
        
        if response.status_code == 200:
            print("‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
            token_data = response.json()
            access_token = token_data.get('access_token')
            
            if access_token:
                # –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
                auth_response = requests.get(
                    'http://localhost:8000/health',
                    headers={
                        'Authorization': f'Bearer {access_token}',
                        'Origin': 'http://localhost:3001'
                    }
                )
                
                if auth_response.status_code == 200:
                    print("‚úÖ –¢–æ–∫–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                else:
                    print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {auth_response.status_code}")
                    issues.append("Token doesn't work for authorization")
            else:
                print("‚ùå –ù–µ—Ç access_token –≤ –æ—Ç–≤–µ—Ç–µ")
                issues.append("No access_token in response")
        else:
            print(f"‚ùå –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: {response.status_code}")
            issues.append(f"Frontend can't get token: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
        issues.append(f"Frontend simulation error: {e}")
    
    return issues

def check_jwt_configuration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ JWT"""
    print("\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    issues = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    secret_key = os.getenv("SECRET_KEY", "your-secret-key-change-in-production")
    algorithm = os.getenv("ALGORITHM", "HS256")
    expire_minutes = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", 30))
    
    print(f"üîê SECRET_KEY: {'***' if secret_key != 'your-secret-key-change-in-production' else 'DEFAULT (–Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ!)'}")
    print(f"üîê ALGORITHM: {algorithm}")
    print(f"üîê EXPIRE_MINUTES: {expire_minutes}")
    
    if secret_key == "your-secret-key-change-in-production":
        issues.append("Using default SECRET_KEY (security risk)")
    
    # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
    try:
        test_payload = {
            "sub": "test_user",
            "exp": datetime.utcnow() + timedelta(minutes=expire_minutes)
        }
        
        test_token = jwt.encode(test_payload, secret_key, algorithm=algorithm)
        decoded_payload = jwt.decode(test_token, secret_key, algorithms=[algorithm])
        
        print(f"‚úÖ JWT –≥–µ–Ω–µ—Ä–∞—Ü–∏—è/–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å JWT: {e}")
        issues.append(f"JWT generation/decoding error: {e}")
    
    return issues

def test_specific_auth_scenarios():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
    
    issues = []
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
    try:
        form_data = {
            'username': 'admin',
            'password': 'wrong_password',
            'grant_type': 'password'
        }
        
        response = requests.post(
            'http://localhost:8000/token',
            data=form_data,
            headers={'Content-Type': 'application/x-www-form-urlencoded'}
        )
        
        if response.status_code == 401:
            print("‚úÖ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è")
        else:
            print(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: {response.status_code}")
            issues.append("Wrong password not handled correctly")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è: {e}")
        issues.append(f"Wrong password test error: {e}")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
    try:
        response = requests.post(
            'http://localhost:8000/token',
            data={'username': 'admin'},  # –ù–µ—Ç –ø–∞—Ä–æ–ª—è
            headers={'Content-Type': 'application/x-www-form-urlencoded'}
        )
        
        if response.status_code == 422:  # Validation error
            print("‚úÖ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
        else:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {response.status_code}")
            issues.append("Missing fields not handled correctly")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π: {e}")
        issues.append(f"Missing fields test error: {e}")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        secret_key = os.getenv("SECRET_KEY", "your-secret-key-change-in-production")
        expired_payload = {
            "sub": "test_user",
            "exp": datetime.utcnow() - timedelta(minutes=1)  # –ò—Å—Ç—ë–∫ 1 –º–∏–Ω—É—Ç—É –Ω–∞–∑–∞–¥
        }
        
        expired_token = jwt.encode(expired_payload, secret_key, algorithm="HS256")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω
        response = requests.get(
            'http://localhost:8000/health',
            headers={'Authorization': f'Bearer {expired_token}'}
        )
        
        if response.status_code == 401:
            print("‚úÖ –ò—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç—Å—è")
        else:
            print(f"‚ùå –ò—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: {response.status_code}")
            issues.append("Expired token not handled correctly")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∏—Å—Ç—ë–∫—à–µ–≥–æ —Ç–æ–∫–µ–Ω–∞: {e}")
        issues.append(f"Expired token test error: {e}")
    
    return issues

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô")
    print("="*50)
    print(f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    all_issues = []
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã
    all_issues.extend(analyze_backend_auth())
    all_issues.extend(analyze_frontend_auth_flow())
    all_issues.extend(check_jwt_configuration())
    all_issues.extend(test_specific_auth_scenarios())
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*50}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ü–û –ü–†–û–ë–õ–ï–ú–ê–ú")
    print("="*50)
    
    if all_issues:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(all_issues)} –ø—Ä–æ–±–ª–µ–º:")
        for i, issue in enumerate(all_issues, 1):
            print(f"   {i}. {issue}")
        
        print(f"\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:")
        
        if any("CORS" in issue for issue in all_issues):
            print("   ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ FastAPI")
            
        if any("SECRET_KEY" in issue for issue in all_issues):
            print("   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π SECRET_KEY")
            
        if any("Token endpoint" in issue for issue in all_issues):
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å endpoint /token –∏ –µ–≥–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
            
        if any("JWT" in issue for issue in all_issues):
            print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ JWT –∏ –∏—Ö –≤–µ—Ä—Å–∏–∏")
            
        if any("Frontend" in issue for issue in all_issues):
            print("   ‚Ä¢ –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ")
    else:
        print("üéâ –ü—Ä–æ–±–ª–µ–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print(f"\nüìã –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:")
    print(f"   SKIP_AUTH: {os.getenv('SKIP_AUTH', 'false')}")
    print(f"   SECRET_KEY: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if os.getenv('SECRET_KEY') else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    print(f"   ALGORITHM: {os.getenv('ALGORITHM', 'HS256')}")
    print(f"   ACCESS_TOKEN_EXPIRE_MINUTES: {os.getenv('ACCESS_TOKEN_EXPIRE_MINUTES', '30')}")
    
    return len(all_issues) == 0

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)