#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ SuperBuilder Tools - –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ –∑–∞–ø—É—Å–∫—É.
"""

import subprocess
import sys
import os
import json
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ö†Ô∏è {description} - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞: {e}")
        return False

def install_python_deps():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    packages = [
        "python-multipart",
        "pillow", 
        "PyPDF2",
        "openpyxl",
        "fastapi",
        "uvicorn[standard]",
        "websockets",
        "aiofiles"
    ]
    
    success_count = 0
    for package in packages:
        if run_command(f'python -m pip install {package}', f'–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}'):
            success_count += 1
    
    print(f"üìä –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {success_count}/{len(packages)} –ø–∞–∫–µ—Ç–æ–≤")
    return success_count == len(packages)

def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env...")
    
    env_path = Path(".env")
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env
    with open(env_path, 'r', encoding='utf-8') as f:
        env_content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    required_vars = [
        'MAX_FILE_SIZE',
        'UPLOAD_DIR', 
        'CORS_ALLOW_ALL',
        'TOOLS_API_ENABLED',
        'WEBSOCKET_ENABLED'
    ]
    
    missing_vars = []
    for var in required_vars:
        if var not in env_content:
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {missing_vars}")
        return False
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã")
        return True

def check_frontend():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ frontend"""
    print("\nüé® –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend...")
    
    frontend_path = Path("web/bldr_dashboard")
    if not frontend_path.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    package_json = frontend_path / "package.json"
    if not package_json.exists():
        print("‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    components_path = frontend_path / "src" / "components"
    new_components = [
        "ToolsInterface.tsx",
        "EstimateAnalyzer.tsx", 
        "ImageAnalyzer.tsx",
        "DocumentAnalyzer.tsx"
    ]
    
    missing_components = []
    for component in new_components:
        if not (components_path / component).exists():
            missing_components.append(component)
    
    if missing_components:
        print(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {missing_components}")
        return False
    else:
        print("‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã")
        return True

def run_integration_test():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    test_script = Path("test_integration.py")
    if not test_script.exists():
        print("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    return run_command("python test_integration.py", "–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")

def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...")
    
    required_files = [
        "core/main.py",
        "core/bldr_api.py", 
        "core/websocket_manager.py",
        "backend/api/tools_api.py",
        "backend/api/meta_tools_api.py",
        "start_bldr.bat",
        ".env"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
        return True

def create_uploads_dir():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads"""
    print("\nüìÇ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ uploads...")
    
    uploads_dir = Path("uploads")
    if not uploads_dir.exists():
        uploads_dir.mkdir(exist_ok=True)
        print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è uploads —Å–æ–∑–¥–∞–Ω–∞")
    else:
        print("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è uploads —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    return True

def generate_startup_info():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ"""
    startup_info = {
        "system": "SuperBuilder Tools",
        "version": "2.0.0",
        "integration_complete": True,
        "services": {
            "redis": "localhost:6379",
            "neo4j": "localhost:7474", 
            "qdrant": "localhost:6333",
            "fastapi": "localhost:8000",
            "frontend": "localhost:3001",
            "websocket": "ws://localhost:8000/ws"
        },
        "api_endpoints": {
            "tools": [
                "POST /api/tools/analyze/estimate",
                "POST /api/tools/analyze/images",
                "POST /api/tools/analyze/documents",
                "GET /api/tools/jobs/{id}/status",
                "GET /api/tools/jobs/active",
                "GET /api/tools/health"
            ],
            "meta_tools": [
                "GET /api/meta-tools/list",
                "POST /api/meta-tools/execute"
            ],
            "documentation": [
                "GET /docs",
                "GET /redoc"
            ]
        },
        "setup_date": "2025-09-19",
        "ready_to_launch": True
    }
    
    with open("system_info.json", "w", encoding="utf-8") as f:
        json.dump(startup_info, f, ensure_ascii=False, indent=2)
    
    print("‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ system_info.json")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üöÄ SuperBuilder Tools - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    print("–í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø—É—Å–∫—É...")
    print()
    
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    checks = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤", check_file_structure),
        ("Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", install_python_deps),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", check_env_file),
        ("Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", check_frontend),
        ("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è uploads", create_uploads_dir),
        ("–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", run_integration_test)
    ]
    
    results = {}
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    for check_name, check_func in checks:
        results[check_name] = check_func()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    generate_startup_info()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ù–ê–°–¢–†–û–ô–ö–ò")
    print("=" * 60)
    
    success_count = sum(1 for result in results.values() if result)
    total_checks = len(results)
    
    for check_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if result else "‚ùå –û–®–ò–ë–ö–ê"
        print(f"{check_name:<25} : {status}")
    
    print("-" * 60)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{total_checks} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if success_count == total_checks:
        print("\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ó–ê–ü–£–°–ö–£!")
        print("\nüìã –î–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   start_bldr.bat")
        print("\nüåê –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã:")
        print("   ‚Ä¢ API: http://localhost:8000/docs")
        print("   ‚Ä¢ Frontend: http://localhost:3001") 
        print("   ‚Ä¢ WebSocket: ws://localhost:8000/ws")
        print("\n‚ú® –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–µ —á–∞—Å—ã! ‚ö°")
        
    else:
        failed_checks = [name for name, result in results.items() if not result]
        print(f"\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤: {failed_checks}")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
        print("   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print("   ‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å setup_complete.py –ø–æ–≤—Ç–æ—Ä–Ω–æ")
        
        return 1
    
    return 0

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        sys.exit(1)