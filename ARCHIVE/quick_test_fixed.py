#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
"""

from scripts.bldr_rag_trainer import BldrRAGTrainer
import os
import time
import hashlib
from pathlib import Path

def quick_test():
    print('üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò!')
    print('=' * 50)

    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
    trainer = BldrRAGTrainer(
        base_dir='I:/docs/downloaded',
        reports_dir='I:/docs/reports'
    )

    # –ë–µ—Ä–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
    source_dir = 'I:/docs/downloaded'
    all_files = [os.path.join(source_dir, f) for f in os.listdir(source_dir) if f.endswith('.pdf')]
    
    # –ù–∞–π–¥–µ–º —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    processed_hashes = set(trainer.processed_files.keys())
    
    test_file = None
    for file_path in all_files[:10]:  # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–µ—Ä–≤—ã–µ 10
        try:
            with open(file_path, 'rb') as f:
                file_hash = hashlib.sha256(f.read()).hexdigest()
            if file_hash not in processed_hashes:
                test_file = file_path
                break
        except:
            continue
    
    if not test_file:
        print('‚ùå –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ')
        return
    
    filename = Path(test_file).name
    print(f'üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {filename}')
    
    def progress_callback(stage, message, progress):
        timestamp = time.strftime('%H:%M:%S')
        print(f'  [{timestamp}] {stage} | {progress:3d}% | {message}')

    start_time = time.time()
    
    try:
        success = trainer.process_document(test_file, progress_callback)
        
        elapsed_time = time.time() - start_time
        
        if success:
            print(f'‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {elapsed_time/60:.1f} –º–∏–Ω—É—Ç')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Qdrant
            if trainer.qdrant_client:
                collection_info = trainer.qdrant_client.get_collection('universal_docs')
                point_count = getattr(collection_info, 'points_count', 'unknown')
                print(f'üóÑÔ∏è Qdrant —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç: {point_count} –≤–µ–∫—Ç–æ—Ä–æ–≤')
            
            print('üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!')
            print('‚úÖ –ë—ã—Å—Ç—Ä–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')
            print('‚úÖ –†–µ–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è')
            print('‚úÖ Neo4j –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ JSON')
            
        else:
            print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞')
            
    except Exception as e:
        print(f'‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}')
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    quick_test()