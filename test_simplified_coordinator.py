#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

def test_simple_queries():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        from core.model_manager import ModelManager
        from core.unified_tools_system import UnifiedToolsSystem
        from core.agents.coordinator_agent import CoordinatorAgent
        
        print("üîç –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        model_manager = ModelManager()
        tools_system = UnifiedToolsSystem()
        agent = CoordinatorAgent(tools_system=tools_system, enable_meta_tools=False)
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        simple_queries = [
            "–°–ü –ø–æ –∑–µ–º–ª—è–Ω—ã–º —Ä–∞–±–æ—Ç–∞–º",
            "–ì–û–°–¢ –ø–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–º", 
            "–ì–≠–°–ù –Ω–∞ –±–µ—Ç–æ–Ω",
            "–Ω–æ—Ä–º–∞ –ø–æ –¥—Ä–µ–Ω–∞–∂—É"
        ]
        
        for query in simple_queries:
            print(f"\nüìù –¢–µ—Å—Ç: '{query}'")
            response = agent.process_request(query)
            print(f"–û—Ç–≤–µ—Ç: {response[:100]}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –∞ –Ω–µ —Å–ª–æ–∂–Ω—ã–π –ø–ª–∞–Ω
            if "JSON" in response or "–ø–ª–∞–Ω" in response.lower() or "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" in response.lower():
                print("‚ùå –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ —Å–ª–æ–∂–Ω—ã–π (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
            else:
                print("‚úÖ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π (–ø—Ä–∞–≤–∏–ª—å–Ω–æ)")
        
        print("\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_complex_queries():
    """–¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        from core.model_manager import ModelManager
        from core.unified_tools_system import UnifiedToolsSystem
        from core.agents.coordinator_agent import CoordinatorAgent
        
        print("üîß –¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        model_manager = ModelManager()
        tools_system = UnifiedToolsSystem()
        agent = CoordinatorAgent(tools_system=tools_system, enable_meta_tools=False)
        
        # –¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        complex_queries = [
            "—Å–¥–µ–ª–∞–π —á–µ–∫-–ª–∏—Å—Ç –º–∞—Å—Ç–µ—Ä–∞ –°–ú–†",
            "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–º–µ—Ç—É",
            "—Å–æ–∑–¥–∞–π –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç"
        ]
        
        for query in complex_queries:
            print(f"\nüìù –¢–µ—Å—Ç: '{query}'")
            response = agent.process_request(query)
            print(f"–û—Ç–≤–µ—Ç: {response[:100]}...")
            
            # –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª
            print("‚úÖ –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª")
        
        print("\n‚úÖ –¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_memory_usage():
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    try:
        from core.model_manager import ModelManager
        
        print("üß† –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        model_manager = ModelManager()
        
        print(f"–†–∞–∑–º–µ—Ä –∫—ç—à–∞: {model_manager.cache_size}")
        print(f"TTL: {model_manager.ttl_minutes} –º–∏–Ω—É—Ç")
        print(f"–ú–æ–¥–µ–ª–µ–π –≤ –∫—ç—à–µ: {len(model_manager.model_cache)}")
        print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {len(model_manager.active_models)}")
        
        # –¢–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        model_manager.force_cleanup()
        print(f"–ú–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(model_manager.model_cache)}")
        
        print("‚úÖ –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–∞–º—è—Ç–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞")
    print("=" * 60)
    
    success1 = test_simple_queries()
    print("\n" + "=" * 60)
    success2 = test_complex_queries()
    print("\n" + "=" * 60)
    success3 = test_memory_usage()
    
    print("\n" + "=" * 60)
    if success1 and success2 and success3:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
