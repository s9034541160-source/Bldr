#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Stage 0 - NTD Preprocessing —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –≤ –ë–ê–ó–ê
"""

import os
import sys
import shutil
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.ntd_preprocessor import initialize_ntd_system, ntd_preprocess, _determine_document_category

def test_category_detection():
    """–¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 60)
    
    test_files = [
        ("SP_25.13330.2020.pdf", "–°–ü 25.13330.2020 –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–∞–º–µ–Ω–Ω—ã–µ –∏ –∞—Ä–º–æ–∫–∞–º–µ–Ω–Ω—ã–µ", "09. –°–í–û–î–´ –ü–†–ê–í–ò–õ"),
        ("GOST_52742-2007.pdf", "–ì–û–°–¢ 52742-2007 –ê—Ä–º–∞—Ç—É—Ä–∞ —Å—Ç–µ–∫–ª–æ–ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è", "07. –ì–û–°–¢—ã"),
        ("SNiP_2.02.01-83.pdf", "–°–ù–∏–ü 2.02.01-83 –û—Å–Ω–æ–≤–∞–Ω–∏—è –∑–¥–∞–Ω–∏–π –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏–π", "08. –°–ù–ò–ü—ã"),
        ("GESN_01.pdf", "–ì–≠–°–ù 01 –ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", "05. –ì–≠–°–ù–´"),
        ("MDS_21-1.98.pdf", "–ú–î–° 21-1.98 –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ", "02. –ú–î–°"),
        ("PPR_Karkas.pdf", "–ü—Ä–æ–µ–∫—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∫–∞—Ä–∫–∞—Å–∞", "03. –ü–û–°/–ü–ü–†"),
        ("Act_Skrytyh_Rabot.pdf", "–ê–∫—Ç –æ—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Å–∫—Ä—ã—Ç—ã—Ö —Ä–∞–±–æ—Ç", "06. –û–ë–†–ê–ó–¶–´ –î–û–ö–£–ú–ï–ù–¢–û–í"),
        ("Tipovoy_Proekt_Zhiloy_Dom.pdf", "–¢–∏–ø–æ–≤–æ–π –ø—Ä–æ–µ–∫—Ç –∂–∏–ª–æ–≥–æ –¥–æ–º–∞ —Å–µ—Ä–∏–∏ –ü-44–¢", "04. –¢–ò–ü–û–í–´–ï –ü–†–û–ï–ö–¢–´"),
        ("Prikaz_Minstroya_123.pdf", "–ü—Ä–∏–∫–∞–∑ –ú–∏–Ω—Å—Ç—Ä–æ—è –†–æ—Å—Å–∏–∏ ‚Ññ123 –æ—Ç 01.01.2024", "01. –ù–¢–î"),
        ("Neizvestny_Dokument.pdf", "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞", "10. –î–†–£–ì–ò–ï –î–û–ö–£–ú–ï–ù–¢–´")
    ]
    
    correct_predictions = 0
    for file_name, content, expected_category in test_files:
        predicted_category = _determine_document_category(file_name.lower(), content)
        status = "‚úÖ" if predicted_category == expected_category else "‚ùå"
        print(f"{status} {file_name}")
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_category}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ:  {predicted_category}")
        
        if predicted_category == expected_category:
            correct_predictions += 1
        print()
    
    accuracy = (correct_predictions / len(test_files)) * 100
    print(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {correct_predictions}/{len(test_files)} ({accuracy:.1f}%)")
    return accuracy > 80  # –¢—Ä–µ–±—É–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –≤—ã—à–µ 80%

def test_full_stage0_processing():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stage 0"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stage 0")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    test_dir = Path("C:/temp/test_ntd")
    test_dir.mkdir(exist_ok=True)
    
    test_files = [
        "SP_25.13330.2020_Konstrukcii_kamennye.pdf",
        "GOST_52742-2007_Armatura_stekloplastikovaya.pdf", 
        "GESN_01_Zemlyanye_raboty.pdf",
        "MDS_21-1.98_Metodicheskie_dokumenty.pdf",
        "PPR_Stroitelstvo_karkasa.pdf"
    ]
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –∏—Ö —Ç–∏–ø—É
    for file_name in test_files:
        test_file = test_dir / file_name
        # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if "SP_" in file_name or "–°–ü_" in file_name:
            content = f"–°–ü 25.13330.2020 –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–∞–º–µ–Ω–Ω—ã–µ –∏ –∞—Ä–º–æ–∫–∞–º–µ–Ω–Ω—ã–µ\n{file_name}\n–°–≤–æ–¥ –ø—Ä–∞–≤–∏–ª\n–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
        elif "GOST_" in file_name or "–ì–û–°–¢_" in file_name:
            content = f"–ì–û–°–¢ 52742-2007 –ê—Ä–º–∞—Ç—É—Ä–∞ —Å—Ç–µ–∫–ª–æ–ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è\n{file_name}\n–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç\n–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
        elif "GESN_" in file_name or "–ì–≠–°–ù_" in file_name:
            content = f"–ì–≠–°–ù 01 –ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã\n{file_name}\n–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–Ω—ã–µ —Å–º–µ—Ç–Ω—ã–µ –Ω–æ—Ä–º—ã\n–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
        elif "MDS_" in file_name or "–ú–î–°_" in file_name:
            content = f"–ú–î–° 21-1.98 –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ\n{file_name}\n–ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
        elif "PPR_" in file_name or "–ü–ü–†_" in file_name:
            content = f"–ü–ü–† –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∫–∞—Ä–∫–∞—Å–∞\n{file_name}\n–ü—Ä–æ–µ–∫—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç\n–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
        else:
            content = f"Test content for {file_name}\n–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
        
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {file_name}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ù–¢–î
    try:
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ù–¢–î...")
        normative_db, normative_checker = initialize_ntd_system()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ù–¢–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
        processed_files = []
        for file_name in test_files:
            test_file = test_dir / file_name
            print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_name}")
            
            result = ntd_preprocess(str(test_file), normative_db, normative_checker, test_mode=True)
            
            if result:
                print(f"‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {result}")
                processed_files.append(result)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É –ë–ê–ó–ê
                if "–ë–ê–ó–ê" in result:
                    print(f"üìÅ –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–ê–ó–ê: {Path(result).parent.name}")
                else:
                    print("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –±—ã–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –ë–ê–ó–ê")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {file_name}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(processed_files)}/{len(test_files)} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –ë–ê–ó–ê
        print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–ê–ó–ê:")
        base_path = Path("I:/docs/–ë–ê–ó–ê")
        if base_path.exists():
            for folder in base_path.iterdir():
                if folder.is_dir():
                    file_count = len([f for f in folder.iterdir() if f.is_file()])
                    print(f"   {folder.name}: {file_count} —Ñ–∞–π–ª–æ–≤")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        shutil.rmtree(test_dir, ignore_errors=True)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        
        return len(processed_files) > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def show_baza_structure():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–ê–ó–ê"""
    print("\nüìÅ –¢–ï–ö–£–©–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ë–ê–ó–ê:")
    print("=" * 60)
    
    base_path = Path("I:/docs/–ë–ê–ó–ê")
    if not base_path.exists():
        print("‚ùå –ü–∞–ø–∫–∞ –ë–ê–ó–ê –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    total_files = 0
    for folder in sorted(base_path.iterdir()):
        if folder.is_dir():
            files = [f for f in folder.iterdir() if f.is_file()]
            file_count = len(files)
            total_files += file_count
            
            print(f"üìÇ {folder.name}: {file_count} —Ñ–∞–π–ª–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞ –∫–∞–∫ –ø—Ä–∏–º–µ—Ä—ã
            for i, file in enumerate(files[:3]):
                print(f"   üìÑ {file.name}")
            
            if file_count > 3:
                print(f"   ... –∏ –µ—â—ë {file_count - 3} —Ñ–∞–π–ª–æ–≤")
            print()
    
    print(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –ë–ê–ó–ê: {total_files}")

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï STAGE 0 - NTD PREPROCESSING")
    print("üî• –° –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –°–û–†–¢–ò–†–û–í–ö–û–ô –í –°–¢–†–£–ö–¢–£–†–£ –ë–ê–ó–ê")
    print("=" * 80)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    show_baza_structure()
    
    # –¢–µ—Å—Ç 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    success1 = test_category_detection()
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Stage 0
    success2 = test_full_stage0_processing()
    
    print("\n" + "=" * 80)
    if success1 and success2:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ Stage 0 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π")
        print("üìÅ –§–∞–π–ª—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ I:/docs/–ë–ê–ó–ê/")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        if not success1:
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        if not success2:
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Stage 0")
    print("=" * 80)