# –ü–ï–†–ï–û–ë–†–ê–ë–û–¢–ö–ê RAG - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø
# ===================================

Write-Host "========================================" -ForegroundColor Cyan
Write-Host "   –ü–ï–†–ï–û–ë–†–ê–ë–û–¢–ö–ê RAG - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Python
try {
    $pythonVersion = python --version 2>&1
    Write-Host "‚úÖ Python –Ω–∞–π–¥–µ–Ω: $pythonVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå –û–®–ò–ë–ö–ê: Python –Ω–µ –Ω–∞–π–¥–µ–Ω!" -ForegroundColor Red
    Write-Host "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ PATH" -ForegroundColor Yellow
    Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
$requiredFiles = @(
    "enterprise_rag_trainer_full.py",
    "clear_rag_data.py"
)

foreach ($file in $requiredFiles) {
    if (-not (Test-Path $file)) {
        Write-Host "‚ùå –û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª $file" -ForegroundColor Red
        Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
        exit 1
    }
}

Write-Host "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã" -ForegroundColor Green
Write-Host ""

# –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö RAG
Write-Host "[1/3] –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö RAG..." -ForegroundColor Yellow
try {
    python clear_rag_data.py
    if ($LASTEXITCODE -ne 0) {
        throw "–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö RAG"
    }
    Write-Host "‚úÖ –î–∞–Ω–Ω—ã–µ RAG –æ—á–∏—â–µ–Ω—ã" -ForegroundColor Green
} catch {
    Write-Host "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ RAG!" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    exit 1
}

Write-Host ""

# –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ RAG-—Ç—Ä–µ–Ω–µ—Ä–∞
Write-Host "[2/3] –ó–∞–ø—É—Å–∫ RAG-—Ç—Ä–µ–Ω–µ—Ä–∞..." -ForegroundColor Yellow
try {
    python enterprise_rag_trainer_full.py
    if ($LASTEXITCODE -ne 0) {
        throw "–û—à–∏–±–∫–∞ RAG-—Ç—Ä–µ–Ω–µ—Ä–∞"
    }
    Write-Host "‚úÖ RAG-—Ç—Ä–µ–Ω–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω" -ForegroundColor Green
} catch {
    Write-Host "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å RAG-—Ç—Ä–µ–Ω–µ—Ä!" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
    exit 1
}

Write-Host ""

# –®–∞–≥ 3: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
Write-Host "[3/3] –ó–∞–≤–µ—Ä—à–µ–Ω–æ!" -ForegroundColor Yellow
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "   –ü–ï–†–ï–û–ë–†–ê–ë–û–¢–ö–ê RAG –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!" -ForegroundColor Cyan
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
if (Test-Path "processed_files.json") {
    $processedFiles = Get-Content "processed_files.json" | ConvertFrom-Json
    $totalFiles = $processedFiles.Count
    Write-Host "üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: $totalFiles" -ForegroundColor Green
}

Write-Host ""
Read-Host "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞"
