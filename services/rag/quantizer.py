"""
Int8 quantization –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
"""
import numpy as np
import logging
from typing import Optional, Union, Tuple
from dataclasses import dataclass

logger = logging.getLogger(__name__)

@dataclass
class QuantizationConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è quantization"""
    quantile: float = 0.99
    always_ram: bool = True
    use_optimum: bool = True

class Int8Quantizer:
    """Int8 quantization –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤"""
    
    def __init__(self, config: Optional[QuantizationConfig] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è quantizer
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è quantization
        """
        self.config = config or QuantizationConfig()
        self.optimum_available = False
        self.quantizer = None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å optimum
        self._check_optimum_availability()
    
    def _check_optimum_availability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ optimum-intel"""
        try:
            if self.config.use_optimum:
                from optimum.intel import OptimumQuantizer
                self.optimum_available = True
                logger.info("‚úÖ Optimum-intel –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è quantization")
            else:
                logger.info("‚ÑπÔ∏è Optimum-intel –æ—Ç–∫–ª—é—á–µ–Ω")
        except ImportError:
            logger.warning("‚ö†Ô∏è Optimum-intel –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback quantization")
            self.optimum_available = False
    
    def quantize(self, embeddings: np.ndarray) -> np.ndarray:
        """
        Quantization —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –≤ int8
        
        Args:
            embeddings: –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤ float32
            
        Returns:
            Quantized —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤ int8
        """
        try:
            if self.optimum_available and self.config.use_optimum:
                return self._quantize_with_optimum(embeddings)
            else:
                return self._quantize_fallback(embeddings)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ quantization: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return embeddings.astype(np.float32)
    
    def _quantize_with_optimum(self, embeddings: np.ndarray) -> np.ndarray:
        """Quantization —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º optimum-intel"""
        try:
            from optimum.intel import OptimumQuantizer
            
            # –°–æ–∑–¥–∞–µ–º quantizer –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
            if self.quantizer is None:
                self.quantizer = OptimumQuantizer()
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º quantization
            quantized = self.quantizer.quantize(embeddings)
            
            logger.info(f"‚úÖ Optimum quantization –ø—Ä–∏–º–µ–Ω–µ–Ω: {embeddings.shape} -> {quantized.shape}")
            return quantized
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ optimum quantization: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç–æ–π quantization
            return self._quantize_fallback(embeddings)
    
    def _quantize_fallback(self, embeddings: np.ndarray) -> np.ndarray:
        """Fallback quantization –±–µ–∑ optimum"""
        try:
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è scalar quantization
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ min/max –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            global_min = np.min(embeddings)
            global_max = np.max(embeddings)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1] —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
            normalized = (embeddings - global_min) / (global_max - global_min + 1e-8)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ int8 —Å –ª—É—á—à–∏–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º [-127, 127] –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            int8_embeddings = (normalized * 254 - 127).astype(np.int8)
            
            logger.info(f"‚úÖ Fallback quantization –ø—Ä–∏–º–µ–Ω–µ–Ω: {embeddings.shape} -> {int8_embeddings.shape}")
            return int8_embeddings
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ fallback quantization: {e}")
            return embeddings.astype(np.float32)
    
    def dequantize(self, quantized_embeddings: np.ndarray, 
                   min_vals: Optional[np.ndarray] = None,
                   max_vals: Optional[np.ndarray] = None) -> np.ndarray:
        """
        Dequantization –∏–∑ int8 –æ–±—Ä–∞—Ç–Ω–æ –≤ float32
        
        Args:
            quantized_embeddings: Quantized —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            min_vals: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã)
            max_vals: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã)
            
        Returns:
            Dequantized —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤ float32
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ int8 [-127, 127] –≤ [0, 1]
            normalized = (quantized_embeddings.astype(np.float32) + 127) / 254.0
            
            # –ï—Å–ª–∏ min/max –∏–∑–≤–µ—Å—Ç–Ω—ã, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
            if min_vals is not None and max_vals is not None:
                embeddings = normalized * (max_vals - min_vals) + min_vals
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                embeddings = normalized
            
            logger.info(f"‚úÖ Dequantization –ø—Ä–∏–º–µ–Ω–µ–Ω: {quantized_embeddings.shape} -> {embeddings.shape}")
            return embeddings
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ dequantization: {e}")
            return quantized_embeddings.astype(np.float32)
    
    def get_compression_ratio(self, original_embeddings: np.ndarray, 
                             quantized_embeddings: np.ndarray) -> float:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Å–∂–∞—Ç–∏—è
        
        Args:
            original_embeddings: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            quantized_embeddings: Quantized —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            
        Returns:
            –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è
        """
        try:
            original_size = original_embeddings.nbytes
            quantized_size = quantized_embeddings.nbytes
            compression_ratio = original_size / quantized_size if quantized_size > 0 else 1.0
            
            logger.info(f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {compression_ratio:.2f}x")
            return compression_ratio
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–∂–∞—Ç–∏—è: {e}")
            return 1.0
    
    def get_quality_metrics(self, original_embeddings: np.ndarray, 
                           quantized_embeddings: np.ndarray) -> dict:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ quantization
        
        Args:
            original_embeddings: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            quantized_embeddings: Quantized —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
            
        Returns:
            –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        try:
            # Dequantize –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            dequantized = self.dequantize(quantized_embeddings)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            mse = np.mean((original_embeddings - dequantized) ** 2)
            mae = np.mean(np.abs(original_embeddings - dequantized))
            
            # Cosine similarity
            original_norm = np.linalg.norm(original_embeddings, axis=1, keepdims=True)
            dequantized_norm = np.linalg.norm(dequantized, axis=1, keepdims=True)
            
            cosine_sim = np.mean(
                np.sum(original_embeddings * dequantized, axis=1) / 
                (original_norm.flatten() * dequantized_norm.flatten() + 1e-8)
            )
            
            metrics = {
                "mse": float(mse),
                "mae": float(mae),
                "cosine_similarity": float(cosine_sim),
                "compression_ratio": self.get_compression_ratio(original_embeddings, quantized_embeddings)
            }
            
            logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: MSE={metrics['mse']:.6f}, MAE={metrics['mae']:.6f}, "
                       f"Cosine={metrics['cosine_similarity']:.4f}")
            
            return metrics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return {
                "mse": float('inf'),
                "mae": float('inf'),
                "cosine_similarity": 0.0,
                "compression_ratio": 1.0
            }
    
    def is_quantized(self, embeddings: np.ndarray) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è—é—Ç—Å—è –ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ quantized
        
        Args:
            embeddings: –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ quantized
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
            if embeddings.dtype == np.int8:
                return True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–Ω–∞—á–µ–Ω–∏–π
            if embeddings.dtype in [np.uint8, np.int8]:
                return True
            
            return False
            
        except Exception:
            return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ quantization
def demonstrate_quantization():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã quantization"""
    print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø INT8 QUANTIZATION ===")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    print("üìä –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏...")
    original_embeddings = np.random.randn(100, 384).astype(np.float32)
    print(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {original_embeddings.shape}")
    print(f"  ‚Ä¢ –¢–∏–ø: {original_embeddings.dtype}")
    print(f"  ‚Ä¢ –ü–∞–º—è—Ç—å: {original_embeddings.nbytes / 1024:.1f} KB")
    
    # –°–æ–∑–¥–∞–µ–º quantizer
    quantizer = Int8Quantizer()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º quantization
    print("\nüîß –ü—Ä–∏–º–µ–Ω—è–µ–º quantization...")
    quantized_embeddings = quantizer.quantize(original_embeddings)
    print(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {quantized_embeddings.shape}")
    print(f"  ‚Ä¢ –¢–∏–ø: {quantized_embeddings.dtype}")
    print(f"  ‚Ä¢ –ü–∞–º—è—Ç—å: {quantized_embeddings.nbytes / 1024:.1f} KB")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    print("\nüìà –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞...")
    metrics = quantizer.get_quality_metrics(original_embeddings, quantized_embeddings)
    
    print(f"  ‚Ä¢ MSE: {metrics['mse']:.6f}")
    print(f"  ‚Ä¢ MAE: {metrics['mae']:.6f}")
    print(f"  ‚Ä¢ Cosine Similarity: {metrics['cosine_similarity']:.4f}")
    print(f"  ‚Ä¢ Compression Ratio: {metrics['compression_ratio']:.2f}x")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º dequantization
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º dequantization...")
    dequantized = quantizer.dequantize(quantized_embeddings)
    print(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä: {dequantized.shape}")
    print(f"  ‚Ä¢ –¢–∏–ø: {dequantized.dtype}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    reconstruction_error = np.mean((original_embeddings - dequantized) ** 2)
    print(f"  ‚Ä¢ Reconstruction Error: {reconstruction_error:.6f}")
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è quantization –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    demonstrate_quantization()
