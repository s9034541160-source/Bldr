"""
Redis cache –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ RAG –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import json
import time
import hashlib
import logging
from typing import Any, Dict, List, Optional, Union
import redis
from redis.exceptions import ConnectionError, TimeoutError

logger = logging.getLogger(__name__)

class RedisCache:
    """Redis –∫–µ—à –¥–ª—è RAG –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    def __init__(self, redis_url: str = "redis://localhost:6379", ttl: int = 3600):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis –∫–µ—à–∞
        
        Args:
            redis_url: URL Redis —Å–µ—Ä–≤–µ—Ä–∞
            ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        self.redis_url = redis_url
        self.ttl = ttl
        self.client = None
        self.use_memory_fallback = False
        self.memory_cache = {}
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
        self._connect()
    
    def _connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
        try:
            self.client = redis.from_url(self.redis_url, decode_responses=True)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.client.ping()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except (ConnectionError, TimeoutError) as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
            logger.info("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ in-memory –∫–µ—à")
            self.use_memory_fallback = True
            self.memory_cache = {}
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            self.use_memory_fallback = True
            self.memory_cache = {}
    
    def _generate_key(self, query: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫–µ—à–∞"""
        return f"rag_cache:{hashlib.md5(query.encode()).hexdigest()}"
    
    def get(self, key: str) -> Optional[List[Dict[str, Any]]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞
        
        Args:
            key: –ö–ª—é—á –∫–µ—à–∞
            
        Returns:
            –ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None
        """
        try:
            if self.use_memory_fallback:
                return self._get_from_memory(key)
            else:
                return self._get_from_redis(key)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞: {e}")
            return None
    
    def _get_from_redis(self, key: str) -> Optional[List[Dict[str, Any]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ Redis"""
        try:
            cached_data = self.client.get(key)
            if cached_data:
                return json.loads(cached_data)
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ Redis: {e}")
            return None
    
    def _get_from_memory(self, key: str) -> Optional[List[Dict[str, Any]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏"""
        try:
            if key in self.memory_cache:
                data, timestamp = self.memory_cache[key]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
                if time.time() - timestamp < self.ttl:
                    return data
                else:
                    # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π –∫–µ—à
                    del self.memory_cache[key]
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –ø–∞–º—è—Ç–∏: {e}")
            return None
    
    def set(self, key: str, value: List[Dict[str, Any]]) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à
        
        Args:
            key: –ö–ª—é—á –∫–µ—à–∞
            value: –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            if self.use_memory_fallback:
                return self._set_to_memory(key, value)
            else:
                return self._set_to_redis(key, value)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–µ—à: {e}")
            return False
    
    def _set_to_redis(self, key: str, value: List[Dict[str, Any]]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis"""
        try:
            serialized_data = json.dumps(value, ensure_ascii=False)
            self.client.setex(key, self.ttl, serialized_data)
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis: {e}")
            return False
    
    def _set_to_memory(self, key: str, value: List[Dict[str, Any]]) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å"""
        try:
            self.memory_cache[key] = (value, time.time())
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å: {e}")
            return False
    
    def delete(self, key: str) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–µ—à–∞
        
        Args:
            key: –ö–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ
        """
        try:
            if self.use_memory_fallback:
                if key in self.memory_cache:
                    del self.memory_cache[key]
                return True
            else:
                return self.client.delete(key) > 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞: {e}")
            return False
    
    def clear(self) -> bool:
        """
        –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫–µ—à–∞
        
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ
        """
        try:
            if self.use_memory_fallback:
                self.memory_cache.clear()
                return True
            else:
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º rag_cache:
                keys = self.client.keys("rag_cache:*")
                if keys:
                    return self.client.delete(*keys) > 0
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞: {e}")
            return False
    
    def get_stats(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à–∞
        
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞
        """
        try:
            if self.use_memory_fallback:
                return {
                    "type": "memory",
                    "keys_count": len(self.memory_cache),
                    "memory_usage": self._estimate_memory_usage()
                }
            else:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Redis
                info = self.client.info()
                keys_count = len(self.client.keys("rag_cache:*"))
                
                return {
                    "type": "redis",
                    "keys_count": keys_count,
                    "connected_clients": info.get("connected_clients", 0),
                    "used_memory": info.get("used_memory_human", "unknown"),
                    "keyspace": info.get("db0", {}).get("keys", 0)
                }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"type": "error", "error": str(e)}
    
    def _estimate_memory_usage(self) -> str:
        """–û—Ü–µ–Ω–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è in-memory –∫–µ—à–∞"""
        try:
            total_size = 0
            for key, (value, _) in self.memory_cache.items():
                total_size += len(key.encode('utf-8'))
                total_size += len(json.dumps(value, ensure_ascii=False).encode('utf-8'))
            
            if total_size < 1024:
                return f"{total_size} B"
            elif total_size < 1024 * 1024:
                return f"{total_size / 1024:.1f} KB"
            else:
                return f"{total_size / (1024 * 1024):.1f} MB"
        except Exception:
            return "unknown"
    
    def health_check(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–µ—à–∞
        
        Returns:
            –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–µ—à–∞
        """
        try:
            if self.use_memory_fallback:
                return {
                    "status": "healthy",
                    "type": "memory",
                    "keys_count": len(self.memory_cache)
                }
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
                self.client.ping()
                return {
                    "status": "healthy",
                    "type": "redis",
                    "keys_count": len(self.client.keys("rag_cache:*"))
                }
        except Exception as e:
            return {
                "status": "unhealthy",
                "error": str(e)
            }
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        try:
            if self.client and not self.use_memory_fallback:
                self.client.close()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–µ—à–µ–º –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–µ—à–∞
def demonstrate_cache():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–µ—à–∞"""
    print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø REDIS CACHE ===")
    
    # –°–æ–∑–¥–∞–µ–º –∫–µ—à
    cache = RedisCache(ttl=60)  # 1 –º–∏–Ω—É—Ç–∞ TTL –¥–ª—è –¥–µ–º–æ
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_query = "–ø–æ–∏—Å–∫ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö"
    test_results = [
        {"content": "–†–µ–∑—É–ª—å—Ç–∞—Ç 1", "score": 0.95},
        {"content": "–†–µ–∑—É–ª—å—Ç–∞—Ç 2", "score": 0.87},
        {"content": "–†–µ–∑—É–ª—å—Ç–∞—Ç 3", "score": 0.82}
    ]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à...")
    cache.set(test_query, test_results)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –∫–µ—à–∞
    print("üìñ –ü–æ–ª—É—á–∞–µ–º –∏–∑ –∫–µ—à–∞...")
    cached_results = cache.get(test_query)
    
    if cached_results:
        print(f"‚úÖ Cache hit: –Ω–∞–π–¥–µ–Ω–æ {len(cached_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        for i, result in enumerate(cached_results, 1):
            print(f"  {i}. {result['content']} (score: {result['score']})")
    else:
        print("‚ùå Cache miss")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = cache.get_stats()
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à–∞:")
    print(f"  ‚Ä¢ –¢–∏–ø: {stats['type']}")
    print(f"  ‚Ä¢ –ö–ª—é—á–µ–π: {stats['keys_count']}")
    if 'memory_usage' in stats:
        print(f"  ‚Ä¢ –ü–∞–º—è—Ç—å: {stats['memory_usage']}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
    health = cache.health_check()
    print(f"üè• –°–æ—Å—Ç–æ—è–Ω–∏–µ: {health['status']}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º
    cache.close()
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    demonstrate_cache()
