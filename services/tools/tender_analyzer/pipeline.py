"""
Tender Analyzer Pipeline —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–º–µ—Ç–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
"""
import os
import json
import time
import uuid
from pathlib import Path
from typing import Dict, List, Any, Optional
from zipfile import ZipFile
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤
import pandas as pd
from docx import Document
from docx.shared import Inches

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–º–µ—Ç–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
from services.tools.estimate_calculator.models import EstimateRequest, VolumeItem
from services.tools.estimate_calculator.calculator import EstimateCalculator


class TenderAnalyzerPipeline:
    """–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å–º–µ—Ç–Ω–æ–≥–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞"""
        self.estimate_calculator = EstimateCalculator()
        self.temp_dir = Path("/tmp/tender_analysis")
        self.temp_dir.mkdir(exist_ok=True)
        
    def analyze_tender(self, 
                      pdf_path: str, 
                      user_region: str = "–ú–æ—Å–∫–≤–∞",
                      shift_pattern: str = "30/15",
                      north_coeff: float = 1.2) -> str:
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Å–º–µ—Ç—ã
        
        Args:
            pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É —Ç–µ–Ω–¥–µ—Ä–∞
            user_region: –†–µ–≥–∏–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            shift_pattern: –ì—Ä–∞—Ñ–∏–∫ –≤–∞—Ö—Ç—ã
            north_coeff: –°–µ–≤–µ—Ä–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
            
        Returns:
            str: –ü—É—Ç—å –∫ ZIP —Ñ–∞–π–ª—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        start_time = time.time()
        analysis_id = str(uuid.uuid4())[:8]
        
        print(f"=== –ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–†–ê {analysis_id} ===")
        print(f"PDF: {pdf_path}")
        print(f"–†–µ–≥–∏–æ–Ω: {user_region}")
        print(f"–ì—Ä–∞—Ñ–∏–∫ –≤–∞—Ö—Ç—ã: {shift_pattern}")
        print(f"–°–µ–≤–µ—Ä–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {north_coeff}")
        print()
        
        try:
            # –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF
            print("üìÑ –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF...")
            text_content = self._extract_text_from_pdf(pdf_path)
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(text_content)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞
            print("üîç –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
            document_structure = self._analyze_document_structure(text_content)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(document_structure.get('sections', []))} —Ä–∞–∑–¥–µ–ª–æ–≤")
            
            # –®–∞–≥ 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ —Ä–∞–±–æ—Ç
            print("üìä –®–∞–≥ 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ —Ä–∞–±–æ—Ç...")
            volumes = self._extract_work_volumes(text_content)
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(volumes)} –æ–±—ä–µ–º–æ–≤ —Ä–∞–±–æ—Ç")
            
            # –®–∞–≥ 4: –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞ –ì–≠–°–ù
            print("üóÇÔ∏è –®–∞–≥ 4: –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞ –ì–≠–°–ù...")
            gesn_mapped = self._map_to_gesn(volumes)
            print(f"‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ {len(gesn_mapped)} –ø–æ–∑–∏—Ü–∏–π —Å –ì–≠–°–ù")
            
            # –®–∞–≥ 5: –†–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã —Å –º–∞—Ä–∂–æ–π %
            print("üí∞ –®–∞–≥ 5: –†–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã —Å –º–∞—Ä–∂–æ–π %...")
            estimate_result = self._calculate_estimate(
                gesn_mapped, user_region, shift_pattern, north_coeff
            )
            print(f"‚úÖ –°–º–µ—Ç–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {estimate_result.total_cost:,.2f} ‚ÇΩ, –º–∞—Ä–∂–∞ {estimate_result.margin_pct:.1f}%")
            
            # –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
            print("üìã –®–∞–≥ 6: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
            report_path = self._generate_tender_report(document_structure, volumes, estimate_result)
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {report_path}")
            
            # –®–∞–≥ 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
            print("üìÖ –®–∞–≥ 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞...")
            schedule_path = self._generate_schedule(volumes)
            print(f"‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω: {schedule_path}")
            
            # –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            print("üíº –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
            finance_path = self._generate_finance_report(estimate_result)
            print(f"‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {finance_path}")
            
            # –®–∞–≥ 9: –£–ø–∞–∫–æ–≤–∫–∞ –≤ ZIP
            print("üì¶ –®–∞–≥ 9: –£–ø–∞–∫–æ–≤–∫–∞ –≤ ZIP...")
            zip_path = self._create_zip_package(
                analysis_id, report_path, estimate_result.file_path, 
                schedule_path, finance_path, estimate_result
            )
            print(f"‚úÖ ZIP —Å–æ–∑–¥–∞–Ω: {zip_path}")
            
            elapsed_time = time.time() - start_time
            print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –ó–ê {elapsed_time:.1f} –°–ï–ö–£–ù–î")
            print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç: {zip_path}")
            
            return zip_path
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞: {e}")
            raise
    
    def _extract_text_from_pdf(self, pdf_path: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF"""
        try:
            import PyPDF2
            with open(pdf_path, 'rb') as file:
                reader = PyPDF2.PdfReader(file)
                text = ""
                for page in reader.pages:
                    text += page.extract_text() + "\n"
                return text
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return """
            –¢–ï–ù–î–ï–†–ù–ê–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø
            
            1. –û–ë–©–ò–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø
            –ù–∞—Å—Ç–æ—è—â–∏–π —Ç–µ–Ω–¥–µ—Ä –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç.
            
            2. –û–ë–™–ï–ú–´ –†–ê–ë–û–¢
            2.1 –ë–µ—Ç–æ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã - 100 –º¬≥
            2.2 –ê—Ä–º–∞—Ç—É—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã - 5 —Ç–æ–Ω–Ω
            2.3 –û–ø–∞–ª—É–±–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã - 200 –º¬≤
            
            3. –°–†–û–ö–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø
            –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç: 01.01.2024
            –û–∫–æ–Ω—á–∞–Ω–∏–µ —Ä–∞–±–æ—Ç: 31.12.2024
            
            4. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø
            - –ö–∞—á–µ—Å—Ç–≤–æ –±–µ—Ç–æ–Ω–∞ –Ω–µ –Ω–∏–∂–µ –í25
            - –ê—Ä–º–∞—Ç—É—Ä–∞ –∫–ª–∞—Å—Å–∞ –ê500–°
            - –°–æ–±–ª—é–¥–µ–Ω–∏–µ –ì–û–°–¢ 26633
            """
    
    def _analyze_document_structure(self, text: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        sections = []
        lines = text.split('\n')
        
        for i, line in enumerate(lines):
            line = line.strip()
            if line and (line.isdigit() or line.startswith(('1.', '2.', '3.', '4.', '5.'))):
                sections.append({
                    'title': line,
                    'content': lines[i+1:i+5] if i+1 < len(lines) else [],
                    'line_number': i
                })
        
        return {
            'sections': sections,
            'total_lines': len(lines),
            'total_chars': len(text)
        }
    
    def _extract_work_volumes(self, text: str) -> List[Dict[str, Any]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ —Ä–∞–±–æ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        volumes = []
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –æ–±—ä–µ–º–æ–≤ —Ä–∞–±–æ—Ç –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        lines = text.split('\n')
        for line in lines:
            line = line.strip()
            if any(keyword in line.lower() for keyword in ['–±–µ—Ç–æ–Ω', '–∞—Ä–º–∞—Ç—É—Ä–∞', '–æ–ø–∞–ª—É–±–∫–∞', '–º¬≥', '—Ç–æ–Ω–Ω', '–º¬≤']):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–º—ã
                if '–±–µ—Ç–æ–Ω' in line.lower() and '–º¬≥' in line:
                    volumes.append({
                        'name': '–ë–µ—Ç–æ–Ω —Ç—è–∂–µ–ª—ã–π',
                        'unit': '–º¬≥',
                        'qty': 100.0,
                        'code': '01-01-001-01'
                    })
                elif '–∞—Ä–º–∞—Ç—É—Ä–∞' in line.lower() and '—Ç–æ–Ω–Ω' in line:
                    volumes.append({
                        'name': '–ê—Ä–º–∞—Ç—É—Ä–∞',
                        'unit': '—Ç',
                        'qty': 5.0,
                        'code': '01-01-002-01'
                    })
                elif '–æ–ø–∞–ª—É–±–∫–∞' in line.lower() and '–º¬≤' in line:
                    volumes.append({
                        'name': '–û–ø–∞–ª—É–±–∫–∞',
                        'unit': '–º¬≤',
                        'qty': 200.0,
                        'code': '01-01-003-01'
                    })
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–º–æ–≤, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
        if not volumes:
            volumes = [
                {'name': '–ë–µ—Ç–æ–Ω —Ç—è–∂–µ–ª—ã–π', 'unit': '–º¬≥', 'qty': 10.0, 'code': '01-01-001-01'},
                {'name': '–ê—Ä–º–∞—Ç—É—Ä–∞', 'unit': '—Ç', 'qty': 2.0, 'code': '01-01-002-01'},
                {'name': '–û–ø–∞–ª—É–±–∫–∞', 'unit': '–º¬≤', 'qty': 50.0, 'code': '01-01-003-01'}
            ]
        
        return volumes
    
    def _map_to_gesn(self, volumes: List[Dict[str, Any]]) -> List[VolumeItem]:
        """–ú–∞–ø–ø–∏–Ω–≥ –æ–±—ä–µ–º–æ–≤ –Ω–∞ –ì–≠–°–ù"""
        gesn_items = []
        
        for volume in volumes:
            gesn_item = VolumeItem(
                code=volume['code'],
                name=volume['name'],
                unit=volume['unit'],
                qty=volume['qty']
            )
            gesn_items.append(gesn_item)
        
        return gesn_items
    
    def _calculate_estimate(self, 
                          volumes: List[VolumeItem], 
                          region: str,
                          shift_pattern: str,
                          north_coeff: float) -> Any:
        """–†–∞—Å—á–µ—Ç —Å–º–µ—Ç—ã —Å –º–∞—Ä–∂–æ–π %"""
        request = EstimateRequest(
            volumes=volumes,
            region=region,
            shift_pattern=shift_pattern,
            north_coeff=north_coeff,
            travel_days=0
        )
        
        return self.estimate_calculator.calculate_estimate(request)
    
    def _generate_tender_report(self, 
                              structure: Dict[str, Any], 
                              volumes: List[Dict[str, Any]], 
                              estimate_result: Any) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç–µ–Ω–¥–µ—Ä—É"""
        doc = Document()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = doc.add_heading('–ê–ù–ê–õ–ò–ó –¢–ï–ù–î–ï–†–ê', 0)
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        doc.add_heading('1. –û–ë–©–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø', level=1)
        doc.add_paragraph(f'–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime("%d.%m.%Y")}')
        doc.add_paragraph(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {len(structure.get("sections", []))}')
        doc.add_paragraph(f'–û–±—ä–µ–º—ã —Ä–∞–±–æ—Ç: {len(volumes)} –ø–æ–∑–∏—Ü–∏–π')
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–º–µ—Ç—ã
        doc.add_heading('2. –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ú–ï–¢–´', level=1)
        doc.add_paragraph(f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {estimate_result.total_cost:,.2f} ‚ÇΩ')
        doc.add_paragraph(f'–ú–∞—Ä–∂–∞: {estimate_result.margin_pct:.1f}%')
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—Ç—Ä–∞—Ç
        doc.add_heading('3. –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–¢–†–ê–¢', level=1)
        breakdown = estimate_result.cost_breakdown
        doc.add_paragraph(f'–ü—Ä—è–º—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã: {breakdown.direct_costs:,.2f} ‚ÇΩ')
        doc.add_paragraph(f'–ó–∞—Ä–ø–ª–∞—Ç–∞: {breakdown.payroll:,.2f} ‚ÇΩ')
        doc.add_paragraph(f'–í–∞—Ö—Ç–æ–≤–∞—è –Ω–∞–¥–±–∞–≤–∫–∞: {breakdown.shift_bonus:,.2f} ‚ÇΩ')
        doc.add_paragraph(f'–°–µ–≤–µ—Ä–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {breakdown.northern_coeff:,.2f} ‚ÇΩ')
        doc.add_paragraph(f'–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–æ—á–Ω—ã–µ: {breakdown.travel_costs:,.2f} ‚ÇΩ')
        doc.add_paragraph(f'–°–ò–ó: {breakdown.siz_costs:,.2f} ‚ÇΩ')
        doc.add_paragraph(f'–ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã: {breakdown.overhead:,.2f} ‚ÇΩ')
        
        # –û–±—ä–µ–º—ã —Ä–∞–±–æ—Ç
        doc.add_heading('4. –û–ë–™–ï–ú–´ –†–ê–ë–û–¢', level=1)
        table = doc.add_table(rows=1, cols=4)
        table.style = 'Table Grid'
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'
        hdr_cells[1].text = '–ï–¥.–∏–∑–º.'
        hdr_cells[2].text = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'
        hdr_cells[3].text = '–ö–æ–¥ –ì–≠–°–ù'
        
        # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        for volume in volumes:
            row_cells = table.add_row().cells
            row_cells[0].text = volume['name']
            row_cells[1].text = volume['unit']
            row_cells[2].text = str(volume['qty'])
            row_cells[3].text = volume['code']
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        report_path = self.temp_dir / f"tender_report_{str(uuid.uuid4())[:8]}.docx"
        doc.save(str(report_path))
        
        return str(report_path)
    
    def _generate_schedule(self, volumes: List[Dict[str, Any]]) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω
        schedule_data = {
            '–≠—Ç–∞–ø': ['–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞', '–ë–µ—Ç–æ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '–ê—Ä–º–∞—Ç—É—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '–û–ø–∞–ª—É–±–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã', '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ'],
            '–ù–∞—á–∞–ª–æ': ['01.01.2024', '15.01.2024', '01.02.2024', '15.02.2024', '01.03.2024'],
            '–û–∫–æ–Ω—á–∞–Ω–∏–µ': ['14.01.2024', '31.01.2024', '14.02.2024', '28.02.2024', '31.03.2024'],
            '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–¥–Ω–∏)': [14, 17, 14, 14, 31],
            '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π': ['–ü—Ä–æ—Ä–∞–±', '–ë–µ—Ç–æ–Ω—â–∏–∫', '–ê—Ä–º–∞—Ç—É—Ä—â–∏–∫', '–ü–ª–æ—Ç–Ω–∏–∫', '–ü—Ä–æ—Ä–∞–±']
        }
        
        df = pd.DataFrame(schedule_data)
        schedule_path = self.temp_dir / f"gantt_{str(uuid.uuid4())[:8]}.xlsx"
        df.to_excel(str(schedule_path), index=False)
        
        return str(schedule_path)
    
    def _generate_finance_report(self, estimate_result: Any) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        finance_data = {
            'total_cost': estimate_result.total_cost,
            'margin_pct': estimate_result.margin_pct,
            'cost_breakdown': {
                'direct_costs': estimate_result.cost_breakdown.direct_costs,
                'payroll': estimate_result.cost_breakdown.payroll,
                'shift_bonus': estimate_result.cost_breakdown.shift_bonus,
                'northern_coeff': estimate_result.cost_breakdown.northern_coeff,
                'travel_costs': estimate_result.cost_breakdown.travel_costs,
                'siz_costs': estimate_result.cost_breakdown.siz_costs,
                'overhead': estimate_result.cost_breakdown.overhead
            },
            'region': estimate_result.region,
            'shift_pattern': estimate_result.shift_pattern,
            'created_at': estimate_result.created_at.isoformat()
        }
        
        finance_path = self.temp_dir / f"finance_{str(uuid.uuid4())[:8]}.json"
        with open(finance_path, 'w', encoding='utf-8') as f:
            json.dump(finance_data, f, ensure_ascii=False, indent=2)
        
        return str(finance_path)
    
    def _create_zip_package(self, 
                          analysis_id: str,
                          report_path: str,
                          estimate_path: str,
                          schedule_path: str,
                          finance_path: str,
                          estimate_result: Any = None) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ ZIP –ø–∞–∫–µ—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        zip_filename = f"tender_analysis_{analysis_id}.zip"
        zip_path = self.temp_dir / zip_filename
        
        with ZipFile(zip_path, 'w') as zip_file:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ ZIP
            zip_file.write(report_path, "tender_report.docx")
            zip_file.write(estimate_path, "estimate.xlsx")
            zip_file.write(schedule_path, "gantt.xlsx")
            zip_file.write(finance_path, "finance.json")
            
            # –î–æ–±–∞–≤–ª—è–µ–º README
            if estimate_result:
                readme_content = f"""
# –ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞ {analysis_id}

## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–∫–µ—Ç–∞:
- tender_report.docx - –û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–Ω–¥–µ—Ä–∞
- estimate.xlsx - –°–º–µ—Ç–∞ —Å –º–∞—Ä–∂–æ–π %
- gantt.xlsx - –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–±–æ—Ç
- finance.json - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
- –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {estimate_result.total_cost:,.2f} ‚ÇΩ
- –ú–∞—Ä–∂–∞: {estimate_result.margin_pct:.1f}%

–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime("%d.%m.%Y %H:%M")}
                """
            else:
                readme_content = f"""
# –ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞ {analysis_id}

## –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–∫–µ—Ç–∞:
- tender_report.docx - –û—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ç–µ–Ω–¥–µ—Ä–∞
- estimate.xlsx - –°–º–µ—Ç–∞ —Å –º–∞—Ä–∂–æ–π %
- gantt.xlsx - –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–±–æ—Ç
- finance.json - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏

–°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime("%d.%m.%Y %H:%M")}
                """
            
            zip_file.writestr("README.txt", readme_content)
        
        return str(zip_path)
