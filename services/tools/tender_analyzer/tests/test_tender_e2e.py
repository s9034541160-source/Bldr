"""
E2E —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ tender_analyzer
"""
import pytest
import os
import sys
import time
import tempfile
import zipfile
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent.parent.parent))

from services.tools.tender_analyzer.pipeline import TenderAnalyzerPipeline


class TestTenderAnalyzerE2E:
    """E2E —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ tender_analyzer"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.pipeline = TenderAnalyzerPipeline()
    
    def test_full_pipeline_e2e(self):
        """E2E —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞"""
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª
        test_pdf_path = self._create_test_pdf()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            zip_path = self.pipeline.analyze_tender(
                pdf_path=test_pdf_path,
                user_region="–ú–æ—Å–∫–≤–∞",
                shift_pattern="30/15",
                north_coeff=1.2
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ZIP —Å–æ–∑–¥–∞–Ω
            assert os.path.exists(zip_path), f"ZIP —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {zip_path}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ZIP
            self._verify_zip_contents(zip_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            elapsed_time = time.time() - start_time
            assert elapsed_time <= 180, f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {elapsed_time:.1f}—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç 180—Å"
            
            print(f"‚úÖ E2E —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω –∑–∞ {elapsed_time:.1f} —Å–µ–∫—É–Ω–¥")
            print(f"üìÅ ZIP —Ñ–∞–π–ª: {zip_path}")
            
        finally:
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            if os.path.exists(test_pdf_path):
                os.unlink(test_pdf_path)
    
    def test_zip_contains_required_files(self):
        """–¢–µ—Å—Ç —á—Ç–æ ZIP —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã"""
        test_pdf_path = self._create_test_pdf()
        
        try:
            zip_path = self.pipeline.analyze_tender(
                pdf_path=test_pdf_path,
                user_region="–ú–æ—Å–∫–≤–∞",
                shift_pattern="30/15",
                north_coeff=1.2
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ ZIP
            with zipfile.ZipFile(zip_path, 'r') as zip_file:
                file_list = zip_file.namelist()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
                required_files = [
                    "tender_report.docx",
                    "estimate.xlsx", 
                    "gantt.xlsx",
                    "finance.json",
                    "README.txt"
                ]
                
                for required_file in required_files:
                    assert required_file in file_list, f"–§–∞–π–ª {required_file} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ZIP"
                
                print(f"‚úÖ ZIP —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã: {len(file_list)} —Ñ–∞–π–ª–æ–≤")
                
        finally:
            if os.path.exists(test_pdf_path):
                os.unlink(test_pdf_path)
    
    def test_finance_json_margin_range(self):
        """–¢–µ—Å—Ç —á—Ç–æ finance.json —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä–∂—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 15-25%"""
        test_pdf_path = self._create_test_pdf()
        
        try:
            zip_path = self.pipeline.analyze_tender(
                pdf_path=test_pdf_path,
                user_region="–ú–æ—Å–∫–≤–∞",
                shift_pattern="30/15",
                north_coeff=1.2
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º finance.json
            with zipfile.ZipFile(zip_path, 'r') as zip_file:
                finance_data = json.loads(zip_file.read("finance.json"))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É finance.json
                assert "total_cost" in finance_data
                assert "margin_pct" in finance_data
                assert "cost_breakdown" in finance_data
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –º–∞—Ä–∂–∏
                margin_pct = finance_data["margin_pct"]
                assert 15.0 <= margin_pct <= 25.0, f"–ú–∞—Ä–∂–∞ {margin_pct:.1f}% –Ω–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 15-25%"
                
                print(f"‚úÖ –ú–∞—Ä–∂–∞ {margin_pct:.1f}% –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 15-25%")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –∑–∞—Ç—Ä–∞—Ç
                breakdown = finance_data["cost_breakdown"]
                required_fields = [
                    "direct_costs", "payroll", "shift_bonus", 
                    "northern_coeff", "travel_costs", "siz_costs", "overhead"
                ]
                
                for field in required_fields:
                    assert field in breakdown, f"–ü–æ–ª–µ {field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ cost_breakdown"
                
                print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ finance.json –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                
        finally:
            if os.path.exists(test_pdf_path):
                os.unlink(test_pdf_path)
    
    def test_different_regions(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤"""
        regions = ["–ú–æ—Å–∫–≤–∞", "–°–ü–±", "–ú—É—Ä–º–∞–Ω—Å–∫", "–ù–æ—Ä–∏–ª—å—Å–∫"]
        
        for region in regions:
            test_pdf_path = self._create_test_pdf()
            
            try:
                zip_path = self.pipeline.analyze_tender(
                    pdf_path=test_pdf_path,
                    user_region=region,
                    shift_pattern="30/15",
                    north_coeff=1.2
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
                assert os.path.exists(zip_path), f"ZIP –Ω–µ —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ {region}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º finance.json
                with zipfile.ZipFile(zip_path, 'r') as zip_file:
                    finance_data = json.loads(zip_file.read("finance.json"))
                    assert finance_data["region"] == region
                    assert finance_data["margin_pct"] > 0
                
                print(f"‚úÖ –†–µ–≥–∏–æ–Ω {region}: –º–∞—Ä–∂–∞ {finance_data['margin_pct']:.1f}%")
                
            finally:
                if os.path.exists(test_pdf_path):
                    os.unlink(test_pdf_path)
    
    def test_performance_benchmark(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ‚â§ 180 —Å–µ–∫"""
        start_time = time.time()
        
        test_pdf_path = self._create_test_pdf()
        
        try:
            zip_path = self.pipeline.analyze_tender(
                pdf_path=test_pdf_path,
                user_region="–ú–æ—Å–∫–≤–∞",
                shift_pattern="30/15",
                north_coeff=1.2
            )
            
            elapsed_time = time.time() - start_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            assert elapsed_time <= 180, f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {elapsed_time:.1f}—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç 180—Å"
            
            print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {elapsed_time:.1f}—Å (–ª–∏–º–∏—Ç: 180—Å)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã
            assert os.path.exists(zip_path)
            
        finally:
            if os.path.exists(test_pdf_path):
                os.unlink(test_pdf_path)
    
    def _create_test_pdf(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF —Ñ–∞–π–ª–∞"""
        test_content = """
        TENDER DOCUMENTATION
        
        1. GENERAL PROVISIONS
        This tender is conducted for construction work.
        
        2. WORK VOLUMES
        2.1 Concrete works - 100 m3
        2.2 Reinforcement works - 5 tons
        2.3 Formwork works - 200 m2
        
        3. EXECUTION TERMS
        Start of works: 01.01.2024
        End of works: 31.12.2024
        
        4. TECHNICAL REQUIREMENTS
        - Concrete quality not lower than B25
        - Reinforcement class A500C
        - Compliance with GOST 26633
        """
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.pdf', encoding='utf-8') as f:
            f.write(test_content)
            return f.name
    
    def _verify_zip_contents(self, zip_path: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ZIP —Ñ–∞–π–ª–∞"""
        with zipfile.ZipFile(zip_path, 'r') as zip_file:
            file_list = zip_file.namelist()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
            assert len(file_list) >= 4, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ ZIP: {len(file_list)}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
            for file_name in file_list:
                file_info = zip_file.getinfo(file_name)
                assert file_info.file_size > 0, f"–§–∞–π–ª {file_name} –ø—É—Å—Ç–æ–π"
            
            print(f"‚úÖ ZIP —Å–æ–¥–µ—Ä–∂–∏—Ç {len(file_list)} —Ñ–∞–π–ª–æ–≤")


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
