"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤
"""
import os
import tempfile
from typing import Dict, Any
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from pathlib import Path

from services.tools.tender_analyzer.pipeline import TenderAnalyzerPipeline

def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    keyboard = [
        [KeyboardButton("üìÑ –°–º–µ—Ç–∞"), KeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫")],
        [KeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

async def handle_tender(update: Update, manifest: Dict[str, Any], data: Dict[str, Any], user_id: int, chat_id: int) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞
    
    Args:
        update: Telegram Update
        manifest: –ú–∞–Ω–∏—Ñ–µ—Å—Ç –¥–∏–∞–ª–æ–≥–∞
        data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id: ID —á–∞—Ç–∞
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        region = data.get("region", "–ú–æ—Å–∫–≤–∞")
        shift_pattern = data.get("shift_pattern", "30/15")
        pdf_data = data.get("pdf")
        
        if not pdf_data:
            await update.message.reply_text("‚ùå PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
            return {"ok": False, "error": "PDF file not found"}
        
        # –°–∫–∞—á–∏–≤–∞–µ–º PDF —Ñ–∞–π–ª
        file_id = pdf_data.get("file_id")
        if not file_id:
            await update.message.reply_text("‚ùå ID —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {"ok": False, "error": "File ID not found"}
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ update
        bot = update.effective_user.bot if hasattr(update.effective_user, 'bot') else None
        if not bot:
            await update.message.reply_text("‚ùå –ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return {"ok": False, "error": "Bot not available"}
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await bot.get_file(file_id)
        temp_pdf_path = f"/tmp/tender_{user_id}_{file_id}.pdf"
        await file.download_to_drive(temp_pdf_path)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–Ω–¥–µ—Ä... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
        
        pipeline = TenderAnalyzerPipeline()
        zip_path = pipeline.analyze_tender(
            pdf_path=temp_pdf_path,
            user_region=region,
            shift_pattern=shift_pattern,
            north_coeff=1.2
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ZIP —Ñ–∞–π–ª
        with open(zip_path, 'rb') as zip_file:
            await update.message.reply_document(
                document=zip_file,
                caption=f"‚úÖ **–ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                       f"üè¢ **–†–µ–≥–∏–æ–Ω:** {region}\n"
                       f"‚è∞ **–ì—Ä–∞—Ñ–∏–∫ –≤–∞—Ö—Ç—ã:** {shift_pattern}\n\n"
                       f"üì¶ **–í –∞—Ä—Ö–∏–≤–µ:**\n"
                       f"‚Ä¢ üìÑ –°–º–µ—Ç–∞ —Å –º–∞—Ä–∂–æ–π %\n"
                       f"‚Ä¢ üìä –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω\n"
                       f"‚Ä¢ üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç\n"
                       f"‚Ä¢ üìã –û—Ç—á–µ—Ç –ø–æ —Ç–µ–Ω–¥–µ—Ä—É",
                parse_mode="Markdown"
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üìÑ –°–∫–∞—á–∞—Ç—å —Å–º–µ—Ç—É", callback_data="download_estimate")],
            [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç", callback_data="view_schedule")],
            [InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="view_finance")],
            [InlineKeyboardButton("üîÑ –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="new_analysis")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(
            "üéâ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        main_keyboard = get_main_keyboard()
        await update.message.reply_text(
            "üí° **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:**",
            reply_markup=main_keyboard,
            parse_mode="Markdown"
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            os.unlink(temp_pdf_path)
        except:
            pass
        
        return {"ok": True, "message": "Tender analysis completed successfully"}
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå **–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞:**\n\n{str(e)}")
        return {"ok": False, "error": str(e)}


async def handle_download_estimate(update: Update, user_id: int, chat_id: int) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–º–µ—Ç—ã"""
    try:
        await update.callback_query.answer("üìÑ –°–º–µ—Ç–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–∞ –≤ ZIP —Ñ–∞–π–ª –≤—ã—à–µ")
        return {"ok": True, "message": "Estimate download info sent"}
    except Exception as e:
        return {"ok": False, "error": str(e)}


async def handle_view_schedule(update: Update, user_id: int, chat_id: int) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç"""
    try:
        await update.callback_query.answer("üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç –≤–∫–ª—é—á–µ–Ω –≤ ZIP —Ñ–∞–π–ª –∫–∞–∫ gantt.xlsx")
        return {"ok": True, "message": "Schedule view info sent"}
    except Exception as e:
        return {"ok": False, "error": str(e)}


async def handle_view_finance(update: Update, user_id: int, chat_id: int) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
    try:
        await update.callback_query.answer("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ ZIP —Ñ–∞–π–ª –∫–∞–∫ finance.json")
        return {"ok": True, "message": "Finance view info sent"}
    except Exception as e:
        return {"ok": False, "error": str(e)}


async def handle_new_analysis(update: Update, user_id: int, chat_id: int) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        from services.bot.state_manager import StateManager
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state_manager = StateManager()
        await state_manager.clear_user_state(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üìÑ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", callback_data="tender_analysis")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "üîÑ **–ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞**\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return {"ok": True, "message": "New analysis started"}
    except Exception as e:
        return {"ok": False, "error": str(e)}


async def handle_main_menu(update: Update, user_id: int, chat_id: int) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        from services.bot.state_manager import StateManager
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state_manager = StateManager()
        await state_manager.clear_user_state(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = [
            [InlineKeyboardButton("üìÑ –°–º–µ—Ç–∞", callback_data="tender_analysis")],
            [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫", callback_data="schedule")],
            [InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="finance")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return {"ok": True, "message": "Main menu shown"}
    except Exception as e:
        return {"ok": False, "error": str(e)}
