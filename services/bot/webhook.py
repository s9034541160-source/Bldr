"""
FastAPI webhook –¥–ª—è Telegram –±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π tender_analyzer
"""
import os
import json
import hmac
import hashlib
import time
from typing import Dict, Any, Optional
from fastapi import APIRouter, HTTPException, Request, Header
from fastapi.responses import JSONResponse
import asyncio
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram
from telegram import Update
from telegram.ext import Application

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–æ–≤
from services.bot.manifest_processor import ManifestProcessor
from services.bot.state_manager import StateManager
from services.bot.rate_limit import RateLimiter

# –°–æ–∑–¥–∞–µ–º router
router = APIRouter(prefix="/tg", tags=["telegram"])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
manifest_processor = ManifestProcessor()
state_manager = StateManager()
rate_limiter = RateLimiter()

# Telegram Bot Token (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_SECRET = os.getenv("TELEGRAM_WEBHOOK_SECRET", "default_secret")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
if BOT_TOKEN:
    application = Application.builder().token(BOT_TOKEN).build()
else:
    application = None


def verify_telegram_hash(data: bytes, secret: str, hash_header: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ Telegram webhook
    
    Args:
        data: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        secret: –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
        hash_header: –ó–∞–≥–æ–ª–æ–≤–æ–∫ X-Telegram-Bot-Api-Secret-Token
        
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
    """
    try:
        # –°–æ–∑–¥–∞–µ–º HMAC SHA-256 –ø–æ–¥–ø–∏—Å—å
        expected_hash = hmac.new(
            secret.encode('utf-8'),
            data,
            hashlib.sha256
        ).hexdigest()
        
        return hmac.compare_digest(expected_hash, hash_header)
    except Exception:
        return False


@router.post("/webhook")
async def telegram_webhook(
    request: Request,
    x_telegram_bot_api_secret_token: Optional[str] = Header(None)
):
    """
    Webhook endpoint –¥–ª—è Telegram –±–æ—Ç–∞
    
    Args:
        request: FastAPI Request –æ–±—ä–µ–∫—Ç
        x_telegram_bot_api_secret_token: –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω Telegram
        
    Returns:
        JSONResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.body()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)
        if x_telegram_bot_api_secret_token:
            if not verify_telegram_hash(body, WEBHOOK_SECRET, x_telegram_bot_api_secret_token):
                raise HTTPException(status_code=403, detail="Invalid signature")
        
        # –ü–∞—Ä—Å–∏–º JSON
        try:
            update_data = json.loads(body.decode('utf-8'))
        except json.JSONDecodeError:
            raise HTTPException(status_code=400, detail="Invalid JSON")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Update
        update = Update.de_json(update_data, application.bot if application else None)
        
        if not update:
            return JSONResponse(content={"ok": True, "message": "No update to process"})
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        result = await process_telegram_update(update)
        
        return JSONResponse(content=result)
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        raise HTTPException(status_code=500, detail=f"Internal server error: {str(e)}")


async def process_telegram_update(update: Update) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
    
    Args:
        update: Telegram Update –æ–±—ä–µ–∫—Ç
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = update.effective_user.id if update.effective_user else None
        chat_id = update.effective_chat.id if update.effective_chat else None
        
        if not user_id or not chat_id:
            return {"ok": False, "error": "No user or chat ID"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        is_allowed, remaining = await rate_limiter.check_rate_limit(user_id)
        if not is_allowed:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω
            is_banned, ban_until = await rate_limiter.is_user_banned(user_id)
            if is_banned:
                ban_time = ban_until - int(time.time()) if ban_until else 0
                await update.effective_message.reply_text(
                    f"üö´ **–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º!**\n\n"
                    f"‚è∞ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑: {ban_time // 60} –º–∏–Ω {ban_time % 60} —Å–µ–∫\n"
                    f"üìù –õ–∏–º–∏—Ç: 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É",
                    parse_mode="Markdown"
                )
                return {"ok": False, "error": "User banned for spam"}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        is_banned, ban_until = await rate_limiter.is_user_banned(user_id)
        if is_banned:
            ban_time = ban_until - int(time.time()) if ban_until else 0
            await update.effective_message.reply_text(
                f"üö´ **–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ —Å–ø–∞–º!**\n\n"
                f"‚è∞ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —á–µ—Ä–µ–∑: {ban_time // 60} –º–∏–Ω {ban_time % 60} —Å–µ–∫",
                parse_mode="Markdown"
            )
            return {"ok": False, "error": "User banned"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_state = await state_manager.get_user_state(user_id)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if update.message:
            return await handle_message(update, user_state, user_id, chat_id)
        elif update.callback_query:
            return await handle_callback_query(update, user_state, user_id, chat_id)
        else:
            return {"ok": True, "message": "Unsupported update type"}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return {"ok": False, "error": str(e)}


async def handle_message(update: Update, user_state: Dict, user_id: int, chat_id: int) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        update: Telegram Update
        user_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id: ID —á–∞—Ç–∞
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    message = update.message
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text:
        if message.text.startswith('/'):
            return await handle_command(update, user_state, user_id, chat_id)
        else:
            return await handle_text_message(update, user_state, user_id, chat_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    elif message.document:
        return await handle_document(update, user_state, user_id, chat_id)
    
    else:
        return {"ok": True, "message": "Unsupported message type"}


async def handle_callback_query(update: Update, user_state: Dict, user_id: int, chat_id: int) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
    
    Args:
        update: Telegram Update
        user_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id: ID —á–∞—Ç–∞
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    callback_query = update.callback_query
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
    callback_data = callback_query.data
    
    if callback_data == "tender_analysis":
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞
        return await start_tender_analysis(update, user_state, user_id, chat_id)
    elif callback_data == "schedule":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç
        return await show_schedule(update, user_state, user_id, chat_id)
    elif callback_data == "finance":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        return await show_finance(update, user_state, user_id, chat_id)
    else:
        return {"ok": True, "message": "Unknown callback"}


async def handle_command(update: Update, user_state: Dict, user_id: int, chat_id: int) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    
    Args:
        update: Telegram Update
        user_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id: ID —á–∞—Ç–∞
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    command = update.message.text
    
    if command == "/start":
        return await send_welcome_message(update, user_id, chat_id)
    elif command == "/tender":
        return await start_tender_analysis(update, user_state, user_id, chat_id)
    elif command == "/schedule":
        return await show_schedule(update, user_state, user_id, chat_id)
    elif command == "/finance":
        return await show_finance(update, user_state, user_id, chat_id)
    elif command == "/help":
        return await send_help_message(update, user_id, chat_id)
    elif command == "/—Å–º–µ—Ç–∞":
        return await start_tender_analysis(update, user_state, user_id, chat_id)
    elif command == "/–≥—Ä–∞—Ñ–∏–∫":
        return await show_schedule(update, user_state, user_id, chat_id)
    elif command == "/–ø—Ä–æ–≤–µ—Ä–∏—Ç—å_—Ä–¥":
        return await check_project_docs(update, user_state, user_id, chat_id)
    elif command == "/—Å—Ç–∞—Ç—É—Å":
        return await show_status(update, user_id, chat_id)
    else:
        return {"ok": True, "message": "Unknown command"}


async def handle_text_message(update: Update, user_state: Dict, user_id: int, chat_id: int) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        update: Telegram Update
        user_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id: ID —á–∞—Ç–∞
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç—É
    if user_state and user_state.get("current_manifest"):
        return await manifest_processor.process_step(update, user_state, user_id, chat_id)
    else:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return await send_main_menu(update, user_id, chat_id)


async def handle_document(update: Update, user_state: Dict, user_id: int, chat_id: int) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    
    Args:
        update: Telegram Update
        user_state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        chat_id: ID —á–∞—Ç–∞
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    document = update.message.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if document.mime_type == "application/pdf":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞
        if user_state and user_state.get("current_manifest") == "tender":
            return await process_tender_pdf(update, user_state, user_id, chat_id)
        else:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑
            return await suggest_tender_analysis(update, user_id, chat_id)
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.")
        return {"ok": True, "message": "Invalid file type"}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def send_welcome_message(update: Update, user_id: int, chat_id: int) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    welcome_text = """
üèóÔ∏è **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Tender Analyzer!**

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üìÑ –°–æ–∑–¥–∞—Ç—å —Å–º–µ—Ç—É —Å –º–∞—Ä–∂–æ–π %
‚Ä¢ üìä –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω
‚Ä¢ üí∞ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    keyboard = [
        [{"text": "üìÑ –°–º–µ—Ç–∞", "callback_data": "tender_analysis"}],
        [{"text": "üìä –ì—Ä–∞—Ñ–∏–∫", "callback_data": "schedule"}],
        [{"text": "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "callback_data": "finance"}]
    ]
    
    await update.message.reply_text(
        welcome_text,
        reply_markup={"inline_keyboard": keyboard},
        parse_mode="Markdown"
    )
    
    return {"ok": True, "message": "Welcome message sent"}


async def start_tender_analysis(update: Update, user_state: Dict, user_id: int, chat_id: int) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
    manifest_path = Path("manifests/tender.json")
    if not manifest_path.exists():
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –º–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {"ok": False, "error": "Manifest not found"}
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state_manager.set_user_state(user_id, {
        "current_manifest": "tender",
        "step": 0,
        "data": {}
    })
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
    return await manifest_processor.start_manifest(update, manifest_path, user_id, chat_id)


async def process_tender_pdf(update: Update, user_state: Dict, user_id: int, chat_id: int) -> Dict[str, Any]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–∞ —Ç–µ–Ω–¥–µ—Ä–∞"""
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await application.bot.get_file(update.message.document.file_id)
        file_path = f"/tmp/tender_{user_id}_{update.message.document.file_id}.pdf"
        
        await file.download_to_drive(file_path)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ tender_analyzer
        from services.tools.tender_analyzer.pipeline import TenderAnalyzerPipeline
        
        pipeline = TenderAnalyzerPipeline()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        region = user_state.get("data", {}).get("region", "–ú–æ—Å–∫–≤–∞")
        shift_pattern = user_state.get("data", {}).get("shift_pattern", "30/15")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–Ω–¥–µ—Ä... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
        
        zip_path = pipeline.analyze_tender(
            pdf_path=file_path,
            user_region=region,
            shift_pattern=shift_pattern,
            north_coeff=1.2
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ZIP —Ñ–∞–π–ª
        with open(zip_path, 'rb') as zip_file:
            await update.message.reply_document(
                document=zip_file,
                caption="‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\nüì¶ –í –∞—Ä—Ö–∏–≤–µ:\n‚Ä¢ –°–º–µ—Ç–∞ —Å –º–∞—Ä–∂–æ–π %\n‚Ä¢ –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–π –ø–ª–∞–Ω\n‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç\n‚Ä¢ –û—Ç—á–µ—Ç –ø–æ —Ç–µ–Ω–¥–µ—Ä—É"
            )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state_manager.clear_user_state(user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await send_main_menu(update, user_id, chat_id)
        
        return {"ok": True, "message": "Tender analysis completed"}
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return {"ok": False, "error": str(e)}


async def show_schedule(update: Update, user_state: Dict, user_id: int, chat_id: int) -> Dict[str, Any]:
    """–ü–æ–∫–∞–∑ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç"""
    await update.message.reply_text("üìä –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞.")
    return {"ok": True, "message": "Schedule shown"}


async def show_finance(update: Update, user_state: Dict, user_id: int, chat_id: int) -> Dict[str, Any]:
    """–ü–æ–∫–∞–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
    await update.message.reply_text("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞.")
    return {"ok": True, "message": "Finance shown"}


async def send_help_message(update: Update, user_id: int, chat_id: int) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏"""
    help_text = """
‚ùì **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/tender - –ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞
/schedule - –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç
/finance - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –ù–∞–∂–º–∏—Ç–µ "üìÑ –°–º–µ—Ç–∞"
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –∏ –≥—Ä–∞—Ñ–∏–∫ –≤–∞—Ö—Ç—ã
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª —Ç–µ–Ω–¥–µ—Ä–∞
4. –ü–æ–ª—É—á–∏—Ç–µ ZIP —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
    """
    
    await update.message.reply_text(help_text, parse_mode="Markdown")
    return {"ok": True, "message": "Help sent"}


async def send_main_menu(update: Update, user_id: int, chat_id: int) -> Dict[str, Any]:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [{"text": "üìÑ –°–º–µ—Ç–∞", "callback_data": "tender_analysis"}],
        [{"text": "üìä –ì—Ä–∞—Ñ–∏–∫", "callback_data": "schedule"}],
        [{"text": "üí∞ –§–∏–Ω–∞–Ω—Å—ã", "callback_data": "finance"}]
    ]
    
    await update.message.reply_text(
        "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup={"inline_keyboard": keyboard},
        parse_mode="Markdown"
    )
    
    return {"ok": True, "message": "Main menu sent"}


async def suggest_tender_analysis(update: Update, user_id: int, chat_id: int) -> Dict[str, Any]:
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞"""
    await update.message.reply_text(
        "üìÑ –û—Ç–ª–∏—á–Ω–æ! –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ PDF —Ñ–∞–π–ª.\n\n–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup={"inline_keyboard": [[{"text": "üìÑ –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑", "callback_data": "tender_analysis"}]]}
    )
    return {"ok": True, "message": "Tender analysis suggested"}


async def check_project_docs(update: Update, user_state: Dict, user_id: int, chat_id: int) -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏**\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö.\n"
        "–ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /—Å–º–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤.",
        parse_mode="Markdown"
    )
    return {"ok": True, "message": "Project docs check shown"}


async def show_status(update: Update, user_id: int, chat_id: int) -> Dict[str, Any]:
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∏ –ª–∏–º–∏—Ç–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = await rate_limiter.get_user_stats(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        storage_info = rate_limiter.get_storage_info()
        
        status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**

üë§ **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['message_count']}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if stats['is_banned'] else '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}
‚Ä¢ –•—Ä–∞–Ω–∏–ª–∏—â–µ: {stats['storage_type']}

üîß **–°–∏—Å—Ç–µ–º–∞:**
‚Ä¢ –•—Ä–∞–Ω–∏–ª–∏—â–µ: {storage_info['type']}
‚Ä¢ –õ–∏–º–∏—Ç: 20 —Å–æ–æ–±—â–µ–Ω–∏–π/–º–∏–Ω—É—Ç—É
‚Ä¢ –ë–∞–Ω: 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏

üí° **–°–æ–≤–µ—Ç—ã:**
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞
‚Ä¢ –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Ä—è–¥
‚Ä¢ –ü—Ä–∏ –±–∞–Ω–µ –∂–¥–∏—Ç–µ 5 –º–∏–Ω—É—Ç
        """
        
        await update.message.reply_text(status_text, parse_mode="Markdown")
        return {"ok": True, "message": "Status shown"}
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        return {"ok": False, "error": str(e)}


@router.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è webhook"""
    return {
        "status": "healthy",
        "service": "telegram_webhook",
        "bot_token_configured": bool(BOT_TOKEN),
        "application_ready": bool(application)
    }
