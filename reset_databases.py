#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º
"""

import os
import shutil
import json
from pathlib import Path

def reset_databases():
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîÑ –°–ë–†–û–° –í–°–ï–• –ë–ê–ó –î–ê–ù–ù–´–•")
    print("=" * 40)
    
    base_dir = os.getenv("BASE_DIR", "I:/docs")
    
    # 1. –û—á–∏—Å—Ç–∫–∞ JSON —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    processed_files = [
        f"{base_dir}/reports/processed_files.json",
        f"{base_dir}/clean_base/processed_files.json",
        "C:/Bldr/processed_files.json"
    ]
    
    for file_path in processed_files:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω: {file_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file_path}: {e}")
    
    # 2. –û—á–∏—Å—Ç–∫–∞ Qdrant –±–∞–∑—ã
    qdrant_path = f"{base_dir}/qdrant_db"
    if os.path.exists(qdrant_path):
        try:
            shutil.rmtree(qdrant_path)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ Qdrant –±–∞–∑–∞: {qdrant_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Qdrant: {e}")
    
    # 3. –û—á–∏—Å—Ç–∫–∞ FAISS –∏–Ω–¥–µ–∫—Å–∞
    faiss_files = [
        f"{base_dir}/faiss_index.index",
        f"{base_dir}/clean_base/faiss_index.index"
    ]
    
    for file_path in faiss_files:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω FAISS –∏–Ω–¥–µ–∫—Å: {file_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è FAISS: {e}")
    
    # 4. –û—á–∏—Å—Ç–∫–∞ Neo4j –±–∞–∑—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–∞—è)
    neo4j_data_path = f"{base_dir}/neo4j_data"
    if os.path.exists(neo4j_data_path):
        try:
            shutil.rmtree(neo4j_data_path)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ Neo4j –±–∞–∑–∞: {neo4j_data_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Neo4j: {e}")
    
    # 5. –û—á–∏—Å—Ç–∫–∞ SQLite –±–∞–∑ NTD
    ntd_db_files = [
        f"{base_dir}/norms_db/ntd_local.db",
        f"{base_dir}/clean_base/ntd_local.db"
    ]
    
    for file_path in ntd_db_files:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ NTD –±–∞–∑–∞: {file_path}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è NTD: {e}")
    
    # 6. –û—á–∏—Å—Ç–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
    reports_dir = f"{base_dir}/reports"
    if os.path.exists(reports_dir):
        try:
            shutil.rmtree(reports_dir)
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –æ—Ç—á–µ—Ç—ã: {reports_dir}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤: {e}")
    
    # 7. –°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    os.makedirs(f"{base_dir}/reports", exist_ok=True)
    os.makedirs(f"{base_dir}/norms_db", exist_ok=True)
    
    # –ü—É—Å—Ç–æ–π JSON —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    with open(f"{base_dir}/reports/processed_files.json", "w") as f:
        json.dump({}, f)
    
    print("\nüéâ –í–°–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• –û–ß–ò–©–ï–ù–´!")
    print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–Ω–æ–≤–æ")

if __name__ == "__main__":
    reset_databases()