#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –∏ —É–ø—Ä–æ—â–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

def test_memory_management():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é"""
    try:
        from core.model_manager import ModelManager
        
        print("üß† –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é...")
        model_manager = ModelManager()
        
        print(f"–†–∞–∑–º–µ—Ä –∫—ç—à–∞: {model_manager.cache_size}")
        print(f"TTL: {model_manager.ttl_minutes} –º–∏–Ω—É—Ç")
        print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏: {len(model_manager.active_models)}")
        
        # –¢–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
        print("\nüßπ –¢–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏...")
        model_manager.force_cleanup()
        print(f"–ú–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {len(model_manager.model_cache)}")
        
        print("‚úÖ –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_simple_requests():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        from core.model_manager import ModelManager
        from core.unified_tools_system import UnifiedToolsSystem
        from core.coordinator import Coordinator
        
        print("üìù –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...")
        model_manager = ModelManager()
        tools_system = UnifiedToolsSystem()
        coordinator = Coordinator(model_manager, tools_system, None)
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        print("\nüîç –¢–µ—Å—Ç: '–°–ü –ø–æ –∑–µ–º–ª—è–Ω—ã–º —Ä–∞–±–æ—Ç–∞–º'")
        response = coordinator.process_request("–°–ü –ø–æ –∑–µ–º–ª—è–Ω—ã–º —Ä–∞–±–æ—Ç–∞–º")
        print(f"–û—Ç–≤–µ—Ç: {response[:200]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—Ä–∏–≤–ª–µ–∫–∞–ª–∏—Å—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã
        if "–ú–Ω–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤" not in response:
            print("‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –Ω–µ –ø—Ä–∏–≤–ª–µ–∫–∞–ª–∏—Å—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
        else:
            print("‚ùå –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø—Ä–∏–≤–ª–µ–∫–∞–ª–∏—Å—å –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
        
        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_memory_after_requests():
    """–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        from core.model_manager import ModelManager
        from core.unified_tools_system import UnifiedToolsSystem
        from core.coordinator import Coordinator
        
        print("üß† –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–æ–≤...")
        model_manager = ModelManager()
        tools_system = UnifiedToolsSystem()
        coordinator = Coordinator(model_manager, tools_system, None)
        
        # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        for i in range(3):
            print(f"\nüìù –ó–∞–ø—Ä–æ—Å {i+1}: '–°–ü –ø–æ –∑–µ–º–ª—è–Ω—ã–º —Ä–∞–±–æ—Ç–∞–º'")
            response = coordinator.process_request("–°–ü –ø–æ –∑–µ–º–ª—è–Ω—ã–º —Ä–∞–±–æ—Ç–∞–º")
            print(f"–ú–æ–¥–µ–ª–µ–π –≤ –∫—ç—à–µ: {len(model_manager.model_cache)}")
            print(f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: {len(model_manager.active_models)}")
        
        print("‚úÖ –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
    print("=" * 50)
    
    success1 = test_memory_management()
    print("\n" + "=" * 50)
    success2 = test_simple_requests()
    print("\n" + "=" * 50)
    success3 = test_memory_after_requests()
    
    print("\n" + "=" * 50)
    if success1 and success2 and success3:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
