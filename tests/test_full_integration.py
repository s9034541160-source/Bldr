"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RAG API —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ endpoints –≤ FastAPI
"""

import os
import sys
import logging
import time
import requests
from typing import List, Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_fastapi_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö endpoints –≤ FastAPI"""
    
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_files = []
    for root, dirs, files in os.walk("I:/docs/downloaded"):
        for file in files:
            if file.endswith('.pdf') and '58' not in file:
                test_files.append(os.path.join(root, file))
                if len(test_files) >= 3:
                    break
        if len(test_files) >= 3:
            break
    
    if not test_files:
        logger.warning("‚ö†Ô∏è No test PDF files found")
        return
    
    logger.info(f"üìÅ Found {len(test_files)} test files")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    logger.info("üîç Test 1: Health check")
    try:
        response = requests.get(f"{base_url}/health")
        if response.status_code == 200:
            logger.info("‚úÖ Health check passed")
        else:
            logger.error(f"‚ùå Health check failed: {response.status_code}")
    except Exception as e:
        logger.error(f"‚ùå Health check error: {e}")
    
    # –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    logger.info("üîç Test 2: Analyze single file")
    try:
        test_file = test_files[0]
        response = requests.post(f"{base_url}/api/analyze-file", json={
            "file_path": test_file,
            "save_to_db": False
        })
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                logger.info(f"‚úÖ File analysis successful: {data.get('data', {}).get('file_name')}")
                logger.info(f"   - Doc type: {data.get('data', {}).get('doc_type')}")
                logger.info(f"   - Chunks: {data.get('data', {}).get('chunks_count')}")
            else:
                logger.error(f"‚ùå File analysis failed: {data.get('error')}")
        else:
            logger.error(f"‚ùå API error: {response.status_code}")
    except Exception as e:
        logger.error(f"‚ùå File analysis error: {e}")
    
    # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
    logger.info("üîç Test 3: Analyze project")
    try:
        response = requests.post(f"{base_url}/api/analyze-project", json={
            "file_paths": test_files[:2]  # –ë–µ—Ä–µ–º 2 —Ñ–∞–π–ª–∞
        })
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                results = data.get('data', [])
                logger.info(f"‚úÖ Project analysis successful: {len(results)} files")
                for i, result in enumerate(results):
                    if result.get('status') == 'success':
                        logger.info(f"   - File {i+1}: {result.get('file_name')} ({result.get('doc_type')})")
                    else:
                        logger.warning(f"   - File {i+1}: {result.get('file_name')} - {result.get('error')}")
            else:
                logger.error(f"‚ùå Project analysis failed: {data.get('error')}")
        else:
            logger.error(f"‚ùå API error: {response.status_code}")
    except Exception as e:
        logger.error(f"‚ùå Project analysis error: {e}")
    
    # –¢–µ—Å—Ç 4: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
    logger.info("üîç Test 4: Get file info")
    try:
        test_file = test_files[0]
        response = requests.get(f"{base_url}/api/get-file-info", params={
            "file_path": test_file
        })
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                file_info = data.get('data', {})
                logger.info(f"‚úÖ File info retrieved: {file_info.get('file_name')}")
                logger.info(f"   - Size: {file_info.get('file_size')} bytes")
                logger.info(f"   - Extension: {file_info.get('file_extension')}")
            else:
                logger.error(f"‚ùå File info failed: {data.get('error')}")
        else:
            logger.error(f"‚ùå API error: {response.status_code}")
    except Exception as e:
        logger.error(f"‚ùå File info error: {e}")
    
    # –¢–µ—Å—Ç 5: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    logger.info("üîç Test 5: List files")
    try:
        response = requests.get(f"{base_url}/api/list-files", params={
            "directory": "I:/docs/downloaded",
            "extension": ".pdf"
        })
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                files_data = data.get('data', {})
                logger.info(f"‚úÖ Files list retrieved: {files_data.get('count')} files")
                files = files_data.get('files', [])
                for i, file_info in enumerate(files[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    logger.info(f"   - File {i+1}: {file_info.get('file_name')}")
            else:
                logger.error(f"‚ùå Files list failed: {data.get('error')}")
        else:
            logger.error(f"‚ùå API error: {response.status_code}")
    except Exception as e:
        logger.error(f"‚ùå Files list error: {e}")
    
    logger.info("üéâ FastAPI endpoints testing completed!")

def test_existing_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö endpoints"""
    
    base_url = "http://localhost:8000"
    
    logger.info("üîç Testing existing endpoints...")
    
    # –¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö endpoints
    endpoints_to_test = [
        ("/health", "GET"),
        ("/metrics", "GET"),
        ("/rag/health", "GET"),
        ("/rag/metrics", "GET")
    ]
    
    for endpoint, method in endpoints_to_test:
        try:
            if method == "GET":
                response = requests.get(f"{base_url}{endpoint}")
            else:
                response = requests.post(f"{base_url}{endpoint}")
            
            if response.status_code == 200:
                logger.info(f"‚úÖ {endpoint} - OK")
            else:
                logger.warning(f"‚ö†Ô∏è {endpoint} - {response.status_code}")
        except Exception as e:
            logger.error(f"‚ùå {endpoint} - Error: {e}")
    
    logger.info("üéâ Existing endpoints testing completed!")

def test_frontend_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º"""
    
    logger.info("üîç Testing frontend integration...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ API
    logger.info("‚úÖ Frontend API service updated with new methods:")
    logger.info("   - apiService.analyzeFile()")
    logger.info("   - apiService.analyzeProject()")
    logger.info("   - apiService.trainFile()")
    logger.info("   - apiService.getFileInfo()")
    logger.info("   - apiService.listFiles()")
    
    logger.info("‚úÖ Frontend integration ready!")
    logger.info("üí° Use these methods in React components:")
    logger.info("   - RAGModule.tsx")
    logger.info("   - EnhancedRAGModule.tsx")
    logger.info("   - Any custom components")

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ RAG API")
    
    # –¢–µ—Å—Ç 1: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ endpoints
    logger.info("="*50)
    logger.info("üîç –¢–ï–°–¢ 1: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ endpoints")
    logger.info("="*50)
    test_existing_endpoints()
    
    print("\n" + "="*50 + "\n")
    
    # –¢–µ—Å—Ç 2: –ù–æ–≤—ã–µ endpoints
    logger.info("="*50)
    logger.info("üîç –¢–ï–°–¢ 2: –ù–æ–≤—ã–µ RAG API endpoints")
    logger.info("="*50)
    test_fastapi_endpoints()
    
    print("\n" + "="*50 + "\n")
    
    # –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    logger.info("="*50)
    logger.info("üîç –¢–ï–°–¢ 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º")
    logger.info("="*50)
    test_frontend_integration()
    
    logger.info("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    logger.info("üéâ RAG API –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º!")
