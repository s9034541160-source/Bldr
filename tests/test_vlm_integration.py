#!/usr/bin/env python3
"""
ENTERPRISE RAG 3.0: VLM Integration Test
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ VLM –≤ –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–∞–¥–∏–∏ RAG –ø–∞–π–ø–ª–∞–π–Ω–∞
"""

import logging
from enterprise_rag_trainer_full import EnterpriseRAGTrainer

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_vlm_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ VLM –≤ RAG –ø–∞–π–ø–ª–∞–π–Ω"""
    
    logger.info("ENTERPRISE RAG 3.0: VLM Integration Test")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞
        trainer = EnterpriseRAGTrainer()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º VLM –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
        if trainer.vlm_available:
            logger.info("‚úÖ VLM –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ç—Ä–µ–Ω–µ—Ä–µ")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º VLM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            if trainer.vlm_processor and trainer.vlm_processor.is_available():
                logger.info("‚úÖ VLM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≥–æ—Ç–æ–≤")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º GPU
                if trainer.vlm_processor.device == "cuda":
                    logger.info("‚úÖ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ")
                else:
                    logger.info("‚ö†Ô∏è VLM —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ CPU")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã VLM
                vlm_methods = [
                    '_extract_number_with_vlm_titulnik',
                    '_analyze_titulnik_with_vlm',
                    '_analyze_stamps_with_vlm',
                    '_extract_formulas_with_vlm'
                ]
                
                for method_name in vlm_methods:
                    if hasattr(trainer, method_name):
                        logger.info(f"‚úÖ –ú–µ—Ç–æ–¥ {method_name} –¥–æ—Å—Ç—É–ø–µ–Ω")
                    else:
                        logger.warning(f"‚ùå –ú–µ—Ç–æ–¥ {method_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                logger.info("üéâ VLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                return True
            else:
                logger.error("‚ùå VLM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ –≥–æ—Ç–æ–≤")
                return False
        else:
            logger.warning("‚ö†Ô∏è VLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå VLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è failed: {e}")
        return False

def test_vlm_stages():
    """–¢–µ—Å—Ç VLM –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç–∞–¥–∏—è—Ö"""
    
    logger.info("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ VLM –≤ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç–∞–¥–∏—è—Ö...")
    
    # Stage 8: Metadata Extraction
    logger.info("Stage 8: VLM-OCR –¥–ª—è —Ç–∏—Ç—É–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü")
    logger.info("  - VLM-OCR –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF")
    logger.info("  - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    logger.info("  - Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã")
    
    # Stage 10: Type-specific Processing
    logger.info("Stage 10: VLM-—É—Å–∏–ª–µ–Ω–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞")
    logger.info("  - –ê–Ω–∞–ª–∏–∑ —à—Ç–∞–º–ø–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    logger.info("  - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª –¥–ª—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    logger.info("  - –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    # Stage 5: Structural Analysis
    logger.info("Stage 5: VLM —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    logger.info("  - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é")
    logger.info("  - –ê–Ω–∞–ª–∏–∑ –º–∞–∫–µ—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    logger.info("  - –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
    
    logger.info("‚úÖ VLM —Å—Ç–∞–¥–∏–∏ –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    logger.info("üöÄ ENTERPRISE RAG 3.0: VLM Integration Test")
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    integration_success = test_vlm_integration()
    
    # –¢–µ—Å—Ç —Å—Ç–∞–¥–∏–π
    test_vlm_stages()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if integration_success:
        logger.info("üéâ VLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞!")
        logger.info("üí° –¢–µ–ø–µ—Ä—å –≤–∞—à RAG –ø–∞–π–ø–ª–∞–π–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç VLM –¥–ª—è:")
        logger.info("   - –ò–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∏—Ç—É–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü")
        logger.info("   - –ê–Ω–∞–ª–∏–∑–∞ —à—Ç–∞–º–ø–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
        logger.info("   - –ò–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª –∏–∑ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        logger.info("   - –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    else:
        logger.info("‚ö†Ô∏è VLM –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ fallback —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç")
        logger.info("üí° RAG –ø–∞–π–ø–ª–∞–π–Ω –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ VLM —Ñ—É–Ω–∫—Ü–∏–π")

if __name__ == "__main__":
    main()
