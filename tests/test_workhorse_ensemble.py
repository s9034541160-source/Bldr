"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –∞–Ω—Å–∞–º–±–ª—è LLM –¥–ª—è RTX 4060 (–ë–ï–ó 30B –º–æ–¥–µ–ª–∏)
Qwen3-8B (—Ä–∞–±–æ—á–∞—è –ª–æ—à–∞–¥–∫–∞) + RuT5 (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é)
"""

import os
import sys
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_workhorse_ensemble():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –∞–Ω—Å–∞–º–±–ª—è LLM (–ë–ï–ó 30B –º–æ–¥–µ–ª–∏)"""
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—á–∏–π –∞–Ω—Å–∞–º–±–ª—å
        from workhorse_llm_ensemble import WorkhorseLLMEnsemble, WorkhorseLLMConfig
        
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ –∞–Ω—Å–∞–º–±–ª—è LLM (–ë–ï–ó 30B –º–æ–¥–µ–ª–∏)...")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è RTX 4060 (–ë–ï–ó 30B –º–æ–¥–µ–ª–∏)
        config = WorkhorseLLMConfig(
            workhorse_model="Qwen/Qwen2.5-7B-Instruct",  # Qwen3-8B
            extraction_model="ai-forever/rugpt3large_based_on_gpt2",  # RuT5 fallback
            use_4bit_quantization=True,
            max_memory_gb=7.0,
            device="auto"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω—Å–∞–º–±–ª—å
        ensemble = WorkhorseLLMEnsemble(config)
        
        logger.info("‚úÖ –†–∞–±–æ—á–∏–π –∞–Ω—Å–∞–º–±–ª—å LLM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ë–ï–ó 30B –º–æ–¥–µ–ª–∏)")
        logger.info(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω—Å–∞–º–±–ª–µ: {ensemble.get_ensemble_info()}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        test_content = """
        –°–ù–∏–ü 2.01.07-85* "–ù–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è"
        
        –£—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ì–æ—Å—Å—Ç—Ä–æ—è –†–æ—Å—Å–∏–∏ –æ—Ç 29.12.2020 ‚Ññ 1234
        –í–≤–µ–¥–µ–Ω –≤ –¥–µ–π—Å—Ç–≤–∏–µ —Å 1 —è–Ω–≤–∞—Ä—è 2021 –≥–æ–¥–∞
        
        1. –û–ë–©–ò–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø
        1.1. –ù–∞—Å—Ç–æ—è—â–∏–µ –Ω–æ—Ä–º—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
        
        2. –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ù–ê–ì–†–£–ó–û–ö
        2.1. –ü–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –Ω–∞:
        - –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ;
        - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ;
        - –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ;
        - –æ—Å–æ–±—ã–µ.
        
        3. –ü–û–°–¢–û–Ø–ù–ù–´–ï –ù–ê–ì–†–£–ó–ö–ò
        3.1. –ö –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –Ω–∞–≥—Ä—É–∑–∫–∞–º –æ—Ç–Ω–æ—Å—è—Ç—Å—è:
        - —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π;
        - –≤–µ—Å —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è;
        - –¥–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–Ω—Ç–∞.
        """
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ VLM –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        vlm_metadata = {
            'tables': [
                {'title': '–¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä—É–∑–æ–∫', 'data': '–î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã'}
            ],
            'sections': [
                {'title': '–û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è', 'level': 1},
                {'title': '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ–∫', 'level': 1}
            ]
        }
        
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        # Stage 4: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (Qwen3-8B)
        logger.info("üêé Stage 4: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (Qwen3-8B)...")
        classification = ensemble.stage_4_classify_document(test_content)
        if classification.get('classification_available', False):
            logger.info(f"‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: {classification.get('document_type', 'unknown')} (confidence: {classification.get('confidence', 0.0)})")
        else:
            logger.warning(f"‚ö†Ô∏è –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {classification.get('error', 'unknown error')}")
        
        # Stage 8: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (RuT5)
        logger.info("üîç Stage 8: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (RuT5)...")
        metadata = ensemble.stage_8_extract_metadata(test_content, {})
        if metadata.get('extraction_available', False):
            logger.info(f"‚úÖ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata.get('fields_extracted', 0)} –ø–æ–ª–µ–π –∏–∑–≤–ª–µ—á–µ–Ω–æ")
            llm_metadata = metadata.get('metadata', {})
            for key, value in llm_metadata.items():
                logger.info(f"   - {key}: {value}")
        else:
            logger.warning(f"‚ö†Ô∏è –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å: {metadata.get('error', 'unknown error')}")
        
        # Stage 5.5: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ (Qwen3-8B)
        logger.info("üß† Stage 5.5: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ (Qwen3-8B)...")
        analysis = ensemble.stage_5_5_deep_analysis(test_content, vlm_metadata)
        if analysis.get('analysis_available', False):
            analysis_data = analysis.get('analysis', {})
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑: {analysis.get('enhanced_sections', 0)} —Å–µ–∫—Ü–∏–π, {analysis.get('extracted_entities', 0)} —Å—É—â–Ω–æ—Å—Ç–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏–∏
            sections = analysis_data.get('sections', [])
            for i, section in enumerate(sections[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                logger.info(f"   - –°–µ–∫—Ü–∏—è {i+1}: {section.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏
            entities = analysis_data.get('entities', [])
            for i, entity in enumerate(entities[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                logger.info(f"   - –°—É—â–Ω–æ—Å—Ç—å {i+1}: {entity.get('text', '')} ({entity.get('type', 'unknown')})")
        else:
            logger.warning(f"‚ö†Ô∏è –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {analysis.get('error', 'unknown error')}")
        
        # Stage 10: –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ (Qwen3-8B)
        logger.info("‚ö° Stage 10: –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ (Qwen3-8B)...")
        complex_logic = ensemble.stage_10_complex_logic(
            "–°–æ–∑–¥–∞–π Cypher –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∞–≥—Ä—É–∑–∫–∞–º–∏",
            test_content
        )
        if complex_logic.get('complex_logic_available', False):
            result = complex_logic.get('result', {})
            logger.info(f"‚úÖ –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {result.get('task_type', 'unknown')}")
            logger.info(f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('task_result', '')[:200]}...")
        else:
            logger.warning(f"‚ö†Ô∏è –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {complex_logic.get('error', 'unknown error')}")
        
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –∞–Ω—Å–∞–º–±–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üí° –ê–Ω—Å–∞–º–±–ª—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è RTX 4060: Qwen3-8B + RuT5 (–ë–ï–ó 30B –º–æ–¥–µ–ª–∏)")
        
    except ImportError as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–∏–π –∞–Ω—Å–∞–º–±–ª—å: {e}")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install transformers torch accelerate bitsandbytes")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU –∏ —Å–≤–æ–±–æ–¥–Ω—É—é –ø–∞–º—è—Ç—å")

def test_vram_usage():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VRAM"""
    
    try:
        import torch
        
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VRAM...")
        
        if torch.cuda.is_available():
            logger.info(f"üéÆ GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.get_device_name(0)}")
            logger.info(f"üíæ –û–±—â–∞—è –ø–∞–º—è—Ç—å GPU: {torch.cuda.get_device_properties(0).total_memory / 1e9:.1f} GB")
            logger.info(f"üíæ –°–≤–æ–±–æ–¥–Ω–∞—è –ø–∞–º—è—Ç—å GPU: {torch.cuda.memory_reserved(0) / 1e9:.1f} GB")
            logger.info(f"üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å GPU: {torch.cuda.memory_allocated(0) / 1e9:.1f} GB")
        else:
            logger.info("üíª –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ VRAM: {e}")

def test_ensemble_strategy():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞–Ω—Å–∞–º–±–ª—è"""
    
    logger.info("üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–±–æ—á–µ–≥–æ –∞–Ω—Å–∞–º–±–ª—è:")
    logger.info("üêé Qwen3-8B (–†–∞–±–æ—á–∞—è –ª–æ—à–∞–¥–∫–∞):")
    logger.info("   - Stage 4: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    logger.info("   - Stage 5.5: –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑")
    logger.info("   - Stage 10: –°–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏ Cypher –∑–∞–ø—Ä–æ—Å—ã")
    logger.info("")
    logger.info("üîç RuT5 (–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é):")
    logger.info("   - Stage 8: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    logger.info("   - QA –ø–æ–¥—Ö–æ–¥ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤")
    logger.info("")
    logger.info("‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–û: Qwen3-Coder-30B (—Å–ª–∏—à–∫–æ–º —Ç—è–∂–µ–ª—ã–π –¥–ª—è RAG-—Ç—Ä–µ–Ω–µ—Ä–∞)")
    logger.info("üí° –†–µ–∑—É–ª—å—Ç–∞—Ç: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å + –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è RTX 4060")

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –∞–Ω—Å–∞–º–±–ª—è LLM (–ë–ï–ó 30B –º–æ–¥–µ–ª–∏)")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ VRAM
    test_vram_usage()
    
    print("\n" + "="*50 + "\n")
    
    # –¢–µ—Å—Ç 2: –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∞–Ω—Å–∞–º–±–ª—è
    test_ensemble_strategy()
    
    print("\n" + "="*50 + "\n")
    
    # –¢–µ—Å—Ç 3: –ü–æ–ª–Ω—ã–π –∞–Ω—Å–∞–º–±–ª—å
    test_workhorse_ensemble()
    
    logger.info("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
