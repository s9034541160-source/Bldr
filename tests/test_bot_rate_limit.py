"""
–¢–µ—Å—Ç—ã –¥–ª—è rate limiting –∏ –∫–Ω–æ–ø–æ–∫ Telegram –±–æ—Ç–∞
"""
import pytest
import time
import json
import sys
from pathlib import Path
from unittest.mock import Mock, AsyncMock, patch

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from services.bot.rate_limit import RateLimiter
from services.bot.handlers.tender import get_main_keyboard
from services.bot.webhook import process_telegram_update


class TestRateLimit:
    """–¢–µ—Å—Ç—ã –¥–ª—è rate limiting"""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.rate_limiter = RateLimiter()
    
    def test_rate_limit_initial_state(self):
        """–¢–µ—Å—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è rate limiter"""
        import asyncio
        
        async def run_test():
            user_id = 12345
            
            # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
            is_allowed, remaining = await self.rate_limiter.check_rate_limit(user_id)
            assert is_allowed is True
            assert remaining >= 19  # –î–æ–ª–∂–Ω–æ –æ—Å—Ç–∞—Ç—å—Å—è 19 –∏–ª–∏ –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            
            print("‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ rate limiter –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        asyncio.run(run_test())
    
    def test_rate_limit_exceeded(self):
        """–¢–µ—Å—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è rate limit"""
        import asyncio
        
        async def run_test():
            user_id = 12346
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 21 —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–µ–≤—ã—à–∞–µ–º –ª–∏–º–∏—Ç –≤ 20)
            for i in range(21):
                is_allowed, remaining = await self.rate_limiter.check_rate_limit(user_id)
                if i < 20:
                    assert is_allowed is True
                else:
                    assert is_allowed is False
                    assert remaining == 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω
            is_banned, ban_until = await self.rate_limiter.is_user_banned(user_id)
            assert is_banned is True
            assert ban_until is not None
            
            print("‚úÖ Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω")
        
        asyncio.run(run_test())
    
    def test_rate_limit_window_reset(self):
        """–¢–µ—Å—Ç —Å–±—Ä–æ—Å–∞ –æ–∫–Ω–∞ rate limit"""
        import asyncio
        
        async def run_test():
            user_id = 12347
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            for i in range(5):
                is_allowed, remaining = await self.rate_limiter.check_rate_limit(user_id)
                assert is_allowed is True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await self.rate_limiter.get_user_stats(user_id)
            assert stats['message_count'] >= 5
            assert stats['is_banned'] is False
            
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        asyncio.run(run_test())
    
    def test_unban_user(self):
        """–¢–µ—Å—Ç —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        import asyncio
        
        async def run_test():
            user_id = 12348
            
            # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for i in range(21):
                await self.rate_limiter.check_rate_limit(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–±–∞–Ω–µ–Ω
            is_banned, _ = await self.rate_limiter.is_user_banned(user_id)
            assert is_banned is True
            
            # –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º
            result = await self.rate_limiter.unban_user(user_id)
            assert result is True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞–∑–±–∞–Ω–µ–Ω
            is_banned, _ = await self.rate_limiter.is_user_banned(user_id)
            assert is_banned is False
            
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω")
        
        asyncio.run(run_test())
    
    def test_cleanup_expired_data(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        import asyncio
        
        async def run_test():
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
            cleaned = await self.rate_limiter.cleanup_expired_data()
            assert isinstance(cleaned, int)
            assert cleaned >= 0
            
            print(f"‚úÖ –û—á–∏—â–µ–Ω–æ {cleaned} –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π")
        
        asyncio.run(run_test())
    
    def test_storage_info(self):
        """–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        storage_info = self.rate_limiter.get_storage_info()
        
        assert 'type' in storage_info
        assert storage_info['type'] in ['redis', 'memory', 'error']
        
        if storage_info['type'] == 'redis':
            assert 'connected_clients' in storage_info
            assert 'used_memory' in storage_info
        elif storage_info['type'] == 'memory':
            assert 'users_count' in storage_info
            assert 'banned_count' in storage_info
        
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {storage_info['type']}")


class TestKeyboardButtons:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    
    def test_main_keyboard_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        keyboard = get_main_keyboard()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
        assert keyboard is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard_data = keyboard.to_dict()
        assert 'keyboard' in keyboard_data
        assert len(keyboard_data['keyboard']) == 2  # 2 —Ä—è–¥–∞ –∫–Ω–æ–ø–æ–∫
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏
        first_row = keyboard_data['keyboard'][0]
        second_row = keyboard_data['keyboard'][1]
        
        assert len(first_row) == 2  # 2 –∫–Ω–æ–ø–∫–∏ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É
        assert len(second_row) == 2  # 2 –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ç–æ—Ä–æ–º —Ä—è–¥—É
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
        assert first_row[0]['text'] == 'üìÑ –°–º–µ—Ç–∞'
        assert first_row[1]['text'] == 'üìä –ì—Ä–∞—Ñ–∏–∫'
        assert second_row[0]['text'] == 'üí∞ –§–∏–Ω–∞–Ω—Å—ã'
        assert second_row[1]['text'] == '‚ùì –ü–æ–º–æ—â—å'
        
        print("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def test_keyboard_properties(self):
        """–¢–µ—Å—Ç —Å–≤–æ–π—Å—Ç–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        keyboard = get_main_keyboard()
        keyboard_data = keyboard.to_dict()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞
        assert keyboard_data.get('resize_keyboard', False) is True
        assert keyboard_data.get('one_time_keyboard', True) is False
        
        print("‚úÖ –°–≤–æ–π—Å—Ç–≤–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")


class TestCommands:
    """–¢–µ—Å—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥"""
    
    def test_commands_manifest_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –∫–æ–º–∞–Ω–¥"""
        commands_path = Path("manifests/commands.json")
        
        assert commands_path.exists(), f"–ú–∞–Ω–∏—Ñ–µ—Å—Ç –∫–æ–º–∞–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {commands_path}"
        
        with open(commands_path, 'r', encoding='utf-8') as f:
            commands = json.load(f)
        
        assert isinstance(commands, list)
        assert len(commands) > 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–∞–Ω–¥
        for command in commands:
            assert 'command' in command
            assert 'description' in command
            assert command['command'].startswith('/') or command['command'] in ['start', '—Å–º–µ—Ç–∞', '–≥—Ä–∞—Ñ–∏–∫', '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å_—Ä–¥', '–ø–æ–º–æ—â—å', '—Å—Ç–∞—Ç—É—Å']
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(commands)} –∫–æ–º–∞–Ω–¥")
    
    def test_commands_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥"""
        commands_path = Path("manifests/commands.json")
        
        with open(commands_path, 'r', encoding='utf-8') as f:
            commands = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        command_names = [cmd['command'] for cmd in commands]
        
        required_commands = ['start', '—Å–º–µ—Ç–∞', '–≥—Ä–∞—Ñ–∏–∫', '–ø—Ä–æ–≤–µ—Ä–∏—Ç—å_—Ä–¥', '–ø–æ–º–æ—â—å', '—Å—Ç–∞—Ç—É—Å']
        for required in required_commands:
            assert required in command_names, f"–ö–æ–º–∞–Ω–¥–∞ {required} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")


class TestIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    def test_rate_limit_with_webhook(self):
        """–¢–µ—Å—Ç rate limit —Å webhook"""
        import asyncio
        
        async def run_test():
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ update
            mock_update = Mock()
            mock_update.effective_user = Mock()
            mock_update.effective_user.id = 12349
            mock_update.effective_chat = Mock()
            mock_update.effective_chat.id = 67890
            mock_update.effective_message = Mock()
            mock_update.effective_message.reply_text = AsyncMock()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å rate limit
            try:
                result = await process_telegram_update(mock_update)
                # –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π rate limit
                assert 'ok' in result
            except Exception as e:
                # –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
                print(f"Rate limit —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
            
            print("‚úÖ Rate limit –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å webhook")
        
        asyncio.run(run_test())
    
    def test_performance_rate_limit(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ rate limit"""
        import asyncio
        
        async def run_test():
            rate_limiter = RateLimiter()
            start_time = time.time()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            user_id = 12350
            for i in range(10):
                await rate_limiter.check_rate_limit(user_id)
            
            elapsed_time = time.time() - start_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–æ
            assert elapsed_time < 1.0, f"Rate limit –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–Ω—è–ª–∏ {elapsed_time:.3f}—Å (–ª–∏–º–∏—Ç: 1.0—Å)"
            
            print(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å rate limit: {elapsed_time:.3f}—Å")
        
        asyncio.run(run_test())


if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
