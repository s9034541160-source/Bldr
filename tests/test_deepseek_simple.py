#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è DeepSeek-Coder (–±–µ–∑ —Ç–∞–π–º–∞—É—Ç–æ–≤)
"""

import os
import sys
import time
import logging

# –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à Python
os.environ['PYTHONDONTWRITEBYTECODE'] = '1'
os.environ['PYTHONUNBUFFERED'] = '1'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_deepseek_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    logger.info("=== –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –†–ê–ó–ú–ï–†–û–í DEEPSEEK-CODER ===")
    
    try:
        from hybrid_llm_ensemble import HybridLLMEnsemble, HybridLLMConfig
        
        config = HybridLLMConfig.from_env()
        ensemble = HybridLLMEnsemble(config)
        
        if not ensemble.qwen_model:
            logger.error("‚ùå DeepSeek-Coder –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return False
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø—Ä–æ–º–ø—Ç–æ–≤
        test_sizes = [500, 1000, 2000]
        
        for size in test_sizes:
            logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Ä–∞–∑–º–µ—Ä–æ–º {size} —Å–∏–º–≤–æ–ª–æ–≤...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            test_text = "–°–ü 158.13330.2014 " * (size // 20)  # –ü—Ä–∏–º–µ—Ä–Ω–æ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            test_text = test_text[:size]  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            
            prompt = f"""–ó–ê–î–ê–ß–ê: –ò—Å–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ—à–∏–±–∫–∏.

–¢–ï–ö–°–¢: {test_text}

–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô:"""
            
            start_time = time.time()
            try:
                response = ensemble.qwen_model(
                    prompt,
                    max_tokens=min(size, 500),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º max_tokens
                    temperature=0.1,
                    stop=["–¢–ï–ö–°–¢:", "–ó–ê–î–ê–ß–ê:"]
                )
                
                elapsed = time.time() - start_time
                result = response['choices'][0]['text'].strip()
                
                logger.info(f"‚úÖ –†–∞–∑–º–µ—Ä {size}: {elapsed:.2f}s - {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥–æ–ª—å—à–µ 15 —Å–µ–∫—É–Ω–¥, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º
                if elapsed > 15:
                    logger.warning(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä {size} –º–µ–¥–ª–µ–Ω–Ω—ã–π: {elapsed:.2f}s")
                    logger.info(f"üéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –†–ê–ó–ú–ï–†: {size-200} —Å–∏–º–≤–æ–ª–æ–≤")
                    return size-200
                
            except Exception as e:
                logger.error(f"‚ùå –†–∞–∑–º–µ—Ä {size} –û–®–ò–ë–ö–ê: {e}")
                logger.info(f"üéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –†–ê–ó–ú–ï–†: {size-200} —Å–∏–º–≤–æ–ª–æ–≤")
                return size-200
        
        logger.info("üéâ –í–°–ï –†–ê–ó–ú–ï–†–´ –ü–†–û–®–õ–ò! DeepSeek-Coder —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤")
        return 2000
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return 1000

def test_optimal_size():
    """–ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞"""
    
    logger.info("=== –ü–û–ò–°–ö –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ì–û –†–ê–ó–ú–ï–†–ê ===")
    
    try:
        from hybrid_llm_ensemble import HybridLLMEnsemble, HybridLLMConfig
        
        config = HybridLLMConfig.from_env()
        ensemble = HybridLLMEnsemble(config)
        
        if not ensemble.qwen_model:
            logger.error("‚ùå DeepSeek-Coder –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return 1000
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ—Ç 200 –¥–æ 1500 —Å —à–∞–≥–æ–º 200
        optimal_size = 1000
        best_time = float('inf')
        
        for size in range(200, 1501, 200):
            logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä {size}...")
            
            test_text = "–°–ü 158.13330.2014 " * (size // 20)
            test_text = test_text[:size]
            
            prompt = f"""–ó–ê–î–ê–ß–ê: –ò—Å–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ—à–∏–±–∫–∏.

–¢–ï–ö–°–¢: {test_text}

–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô:"""
            
            start_time = time.time()
            try:
                response = ensemble.qwen_model(
                    prompt,
                    max_tokens=min(size, 300),
                    temperature=0.1,
                    stop=["–¢–ï–ö–°–¢:", "–ó–ê–î–ê–ß–ê:"]
                )
                
                elapsed = time.time() - start_time
                
                if elapsed < best_time and elapsed < 8:  # –ë—ã—Å—Ç—Ä–µ–µ 8 —Å–µ–∫—É–Ω–¥
                    best_time = elapsed
                    optimal_size = size
                
                logger.info(f"‚úÖ –†–∞–∑–º–µ—Ä {size}: {elapsed:.2f}s")
                
                # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if elapsed > 10:
                    logger.warning(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä {size} —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π: {elapsed:.2f}s")
                    break
                
            except Exception as e:
                logger.error(f"‚ùå –†–∞–∑–º–µ—Ä {size} –û–®–ò–ë–ö–ê: {e}")
                break
        
        logger.info(f"üéØ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô –†–ê–ó–ú–ï–†: {optimal_size} —Å–∏–º–≤–æ–ª–æ–≤ ({best_time:.2f}s)")
        return optimal_size
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return 1000

if __name__ == "__main__":
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–°–¢–û–ì–û –¢–ï–°–¢–ê –†–ê–ó–ú–ï–†–û–í")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    max_size = test_deepseek_simple()
    
    if max_size < 2000:
        # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        optimal_size = test_optimal_size()
        logger.info(f"üéØ –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ô –†–ê–ó–ú–ï–†: {optimal_size}")
        logger.info(f"üéØ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –†–ê–ó–ú–ï–†: {max_size}")
    else:
        logger.info("üéâ DeepSeek-Coder —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ –≤—Å–µ–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏!")
    
    logger.info("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
