#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —á–∞–Ω–∫–∏–Ω–≥–∞ –ø–æ –ì–û–°–¢-—Ä–∞–∑–¥–µ–ª–∞–º –¥–ª—è RAG-—Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_recursive_gost_chunking():
    """–¢–µ—Å—Ç —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —á–∞–Ω–∫–∏–Ω–≥–∞ –ø–æ –ì–û–°–¢-—Ä–∞–∑–¥–µ–ª–∞–º"""
    
    logger.info("=== –¢–ï–°–¢ –†–ï–ö–£–†–°–ò–í–ù–û–ì–û –ß–ê–ù–ö–ò–ù–ì–ê –ü–û –ì–û–°–¢-–†–ê–ó–î–ï–õ–ê–ú ===")
    
    try:
        from enterprise_rag_trainer_full import EnterpriseRAGTrainer, DocumentChunk
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
        trainer = EnterpriseRAGTrainer()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ì–û–°–¢-—Ä–∞–∑–¥–µ–ª–∞–º–∏ 3 —É—Ä–æ–≤–Ω–µ–π
        test_content = """
1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è
1.1. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
1.1.1. –û–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
–≠—Ç–æ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è.

1.2. –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏
–¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ 1.2.

2. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
2.1. –ë–µ—Ç–æ–Ω–Ω—ã–µ —Å–º–µ—Å–∏
2.1.1. –ú–∞—Ä–∫–∞ –±–µ—Ç–æ–Ω–∞
2.1.2. –ü–æ–¥–≤–∏–∂–Ω–æ—Å—Ç—å –±–µ—Ç–æ–Ω–Ω–æ–π —Å–º–µ—Å–∏
–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –±–µ—Ç–æ–Ω—É.

2.2. –ê—Ä–º–∞—Ç—É—Ä–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è
2.2.1. –°–æ—Ä—Ç–∞–º–µ–Ω—Ç –∞—Ä–º–∞—Ç—É—Ä—ã
2.2.2. –ó–∞—â–∏—Ç–Ω—ã–π —Å–ª–æ–π –±–µ—Ç–æ–Ω–∞
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.

3. –ú–µ—Ç–æ–¥—ã –∫–æ–Ω—Ç—Ä–æ–ª—è
3.1. –í–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å
3.1.1. –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
3.1.2. –ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏
–û–ø–∏—Å–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞.
"""
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        metadata = {
            'doc_type': 'gost',
            'canonical_id': '–ì–û–°–¢ 12345-2024',
            'title': '–¢–µ—Å—Ç–æ–≤—ã–π –ì–û–°–¢ –¥–æ–∫—É–º–µ–Ω—Ç'
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥
        logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥...")
        chunks = trainer._recursive_gost_chunking(test_content, metadata)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if not chunks:
            logger.error("‚ùå –ù–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞!")
            return False
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —á–∞–Ω–∫–∏ —Å –ø—É—Ç—è–º–∏ –¥–ª–∏–Ω–æ–π ‚â• 2
        chunks_with_path_length_ge_2 = 0
        for chunk in chunks:
            if hasattr(chunk, 'metadata') and 'path' in chunk.metadata:
                path = chunk.metadata['path']
                if isinstance(path, list) and len(path) >= 2:
                    chunks_with_path_length_ge_2 += 1
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —á–∞–Ω–∫ —Å –ø—É—Ç–µ–º –¥–ª–∏–Ω–æ–π ‚â• 2: {path}")
        
        if chunks_with_path_length_ge_2 >= 1:
            logger.info(f"‚úÖ –£–°–ü–ï–•: –ù–∞–π–¥–µ–Ω–æ {chunks_with_path_length_ge_2} —á–∞–Ω–∫–æ–≤ —Å –ø—É—Ç–µ–º –¥–ª–∏–Ω–æ–π ‚â• 2")
            return True
        else:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤ —Å –ø—É—Ç–µ–º –¥–ª–∏–Ω–æ–π ‚â• 2")
            # –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

if __name__ == "__main__":
    logger.info("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –†–ï–ö–£–†–°–ò–í–ù–û–ì–û –ß–ê–ù–ö–ò–ù–ì–ê")
    
    # –¢–µ—Å—Ç: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥ –ø–æ –ì–û–°–¢-—Ä–∞–∑–¥–µ–ª–∞–º
    success = test_recursive_gost_chunking()
    
    if success:
        logger.info("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û")
        sys.exit(0)
    else:
        logger.error("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
        sys.exit(1)