#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

def test_tools_system():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    try:
        from core.unified_tools_system import UnifiedToolsSystem
        from core.model_manager import ModelManager
        
        print("üîß –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        model_manager = ModelManager()
        tools_system = UnifiedToolsSystem(rag_system=None, model_manager=model_manager)
        
        print(f"–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞: {tools_system is not None}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        try:
            tools = tools_system.list_tools()
            print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: {len(tools)}")
            for tool in tools[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"  - {tool}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
        
        # –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        try:
            print("\nüîç –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è search_rag_database...")
            result = tools_system.execute_tool("search_rag_database", query="–°–ü –ø–æ –∑–µ–º–ª—è–Ω—ã–º —Ä–∞–±–æ—Ç–∞–º", doc_types=["norms"], n_results=3)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            print(f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {type(result)}")
            if hasattr(result, 'status'):
                print(f"–°—Ç–∞—Ç—É—Å: {result.status}")
            if hasattr(result, 'data'):
                print(f"–î–∞–Ω–Ω—ã–µ: {result.data}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {e}")
            import traceback
            traceback.print_exc()
        
        print("‚úÖ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_coordinator_tools():
    """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä"""
    try:
        from core.model_manager import ModelManager
        from core.unified_tools_system import UnifiedToolsSystem
        from core.coordinator import Coordinator
        
        print("üîß –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä...")
        model_manager = ModelManager()
        tools_system = UnifiedToolsSystem(rag_system=None, model_manager=model_manager)
        coordinator = Coordinator(model_manager, tools_system, None)
        
        print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: {coordinator is not None}")
        print(f"Tools system –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–µ: {coordinator.tools_system is not None}")
        
        # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–ª–∞–Ω–∞
        plan = {
            "status": "planning",
            "query_type": "normative_simple",
            "requires_tools": True,
            "tools": [
                {"name": "search_rag_database", "arguments": {"query": "–°–ü –ø–æ –∑–µ–º–ª—è–Ω—ã–º —Ä–∞–±–æ—Ç–∞–º", "doc_types": ["norms"], "n_results": 3}}
            ],
            "simple_response": True
        }
        
        print("\nüîç –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞...")
        tool_results = coordinator.execute_tools(plan)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tool_results)}")
        for i, result in enumerate(tool_results):
            print(f"  {i+1}. {result}")
        
        print("‚úÖ –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    print("=" * 50)
    
    success1 = test_tools_system()
    print("\n" + "=" * 50)
    success2 = test_coordinator_tools()
    
    print("\n" + "=" * 50)
    if success1 and success2:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
