import os
import ast
import re
from pathlib import Path

def find_function_references(root_dir, func_name):
    """–ò—â–µ—Ç –≤—Å–µ –≤—ã–∑–æ–≤—ã –∏ –∏–º–ø–æ—Ä—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –∏–º–µ–Ω–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ."""
    references = []
    exclude_dirs = {'.git', 'venv', '__pycache__', 'archive'}
    
    for dirpath, dirnames, filenames in os.walk(root_dir):
        # Skip excluded directories
        dirnames[:] = [d for d in dirnames if d.lower() not in exclude_dirs]
        
        # Check if we're in an excluded directory
        if any(excluded in dirpath.lower() for excluded in exclude_dirs):
            continue
            
        for filename in filenames:
            if filename.endswith('.py'):
                file_path = os.path.join(dirpath, filename)
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        source = f.read()

                    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ —Ç–µ–∫—Å—Ç—É (–¥–ª—è –≤—ã–∑–æ–≤–æ–≤ func_name(...))
                    # Use word boundary to avoid partial matches
                    if re.search(rf'\b{func_name}\s*\(', source):
                        references.append(f"–í—ã–∑–æ–≤ –≤: {file_path}")

                    # –ü–∞—Ä—Å–∏–º AST –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
                    tree = ast.parse(source)
                    for node in ast.walk(tree):
                        if isinstance(node, ast.ImportFrom):
                            for alias in node.names:
                                if alias.name == func_name:
                                    references.append(f"–ò–º–ø–æ—Ä—Ç –∏–∑: {file_path} (from {node.module} import {func_name})")
                        elif isinstance(node, ast.Import):
                            for alias in node.names:
                                if alias.name == func_name or (alias.asname and alias.asname == func_name):
                                    references.append(f"–ò–º–ø–æ—Ä—Ç: {file_path} (import {alias.name})")
                        # Also check for attribute access (obj.func_name)
                        elif isinstance(node, ast.Call) and isinstance(node.func, ast.Attribute):
                            if node.func.attr == func_name:
                                references.append(f"–í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞: {file_path}")
                except Exception as e:
                    # Silently skip files that can't be parsed
                    pass
    return references

if __name__ == "__main__":
    project_root = r"C:\Bldr"
    function_to_check = "initialize_system"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ "–æ—á–∏—Å—Ç–∏–ª"

    refs = find_function_references(project_root, function_to_check)
    if refs:
        print(f"\nüîç –ù–∞–π–¥–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞ '{function_to_check}':")
        for ref in refs:
            print(f"  {ref}")
    else:
        print(f"‚úÖ –°—Å—ã–ª–∫–∏ –Ω–∞ '{function_to_check}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")