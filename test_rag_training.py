#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RAG –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –±–∞–∑–µ –ù–¢–î –±–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import sys
import os
from pathlib import Path

# Add project root to path
sys.path.append(str(Path(__file__).parent))

# Set environment variables
os.environ["NEO4J_URI"] = "neo4j://localhost:7687"
os.environ["NEO4J_USER"] = "neo4j"  
os.environ["NEO4J_PASSWORD"] = "neopassword"
os.environ["BASE_DIR"] = "I:/docs"
os.environ["SKIP_NEO4J"] = "false"

def progress_callback(stage: str, log: str, progress: int = 0):
    """Callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
    print(f"üìä [{stage}] {log} ({progress}%)")

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG –æ–±—É—á–µ–Ω–∏—è")
    
    try:
        # Import the RAG trainer
        from scripts.bldr_rag_trainer import BldrRAGTrainer
        
        print("‚úÖ BldrRAGTrainer –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # Initialize trainer
        trainer = BldrRAGTrainer(
            base_dir="I:/docs/clean_base",
            neo4j_uri="neo4j://localhost:7687",
            neo4j_user="neo4j",
            neo4j_pass="neopassword",
            qdrant_path="C:/Bldr/data/qdrant_db",
            norms_db="I:/docs/clean_base", 
            reports_dir="I:/docs/reports",
            use_advanced_embeddings=True
        )
        
        print("‚úÖ Trainer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # Test with one specific file first
        test_file = "I:/docs/–ë–ê–ó–ê/3. sp-45.pdf"
        
        if os.path.exists(test_file):
            print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ñ–∞–π–ª–µ: {test_file}")
            
            try:
                # Process single document
                success = trainer.process_document(test_file, update_callback=progress_callback)
                
                if success:
                    print("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                    
                    # Test query
                    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞...")
                    results = trainer.query("–°–ü 45", k=3)
                    
                    if results and "results" in results:
                        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results['results'])}")
                        for i, result in enumerate(results['results'][:2], 1):
                            print(f"  {i}. {result.get('chunk', '')[:100]}...")
                            print(f"     Score: {result.get('score', 0):.3f}")
                    else:
                        print("‚ùå –ü–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                        
                else:
                    print("‚ùå –§–∞–π–ª –ù–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –¥—É–±–ª–∏–∫–∞—Ç)")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
                import traceback
                traceback.print_exc()
                
        else:
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_file}")
            print("üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            
            base_path = "I:/docs/–ë–ê–ó–ê"
            if os.path.exists(base_path):
                files = list(Path(base_path).glob("*.pdf"))[:5]
                for file in files:
                    print(f"  - {file}")
                    
                if files:
                    # Try first available file
                    first_file = str(files[0])
                    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ–º —Ñ–∞–π–ª–µ: {first_file}")
                    
                    try:
                        success = trainer.process_document(first_file, update_callback=progress_callback)
                        if success:
                            print("‚úÖ –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
                        else:
                            print("‚ùå –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª –ù–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            else:
                print(f"‚ùå –ë–∞–∑–æ–≤–∞—è –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {base_path}")
                
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()