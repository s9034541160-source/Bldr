"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ LLM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
"""

import os
import sys
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_local_llm_processor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ LLM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π LLM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        from local_russian_llm_processor import LocalRussianLLMProcessor, LocalLLMConfig
        
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ LLM...")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        config = LocalLLMConfig(
            model_name="ai-forever/rugpt3large_based_on_gpt2",
            device="auto",
            max_length=2048,  # –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            temperature=0.1,
            use_quantization=True,
            cache_dir="./models_cache"
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        processor = LocalRussianLLMProcessor(config)
        
        logger.info("‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π LLM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏: {processor.get_model_info()}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        test_content = """
        –°–ù–∏–ü 2.01.07-85* "–ù–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è"
        
        1. –û–ë–©–ò–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø
        1.1. –ù–∞—Å—Ç–æ—è—â–∏–µ –Ω–æ—Ä–º—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.
        
        2. –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ù–ê–ì–†–£–ó–û–ö
        2.1. –ü–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –Ω–∞:
        - –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ;
        - –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ;
        - –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ;
        - –æ—Å–æ–±—ã–µ.
        
        3. –ü–û–°–¢–û–Ø–ù–ù–´–ï –ù–ê–ì–†–£–ó–ö–ò
        3.1. –ö –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –Ω–∞–≥—Ä—É–∑–∫–∞–º –æ—Ç–Ω–æ—Å—è—Ç—Å—è:
        - —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π;
        - –≤–µ—Å —Å—Ç–∞—Ü–∏–æ–Ω–∞—Ä–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è;
        - –¥–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–Ω—Ç–∞.
        """
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ VLM –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        vlm_metadata = {
            'tables': [
                {'title': '–¢–∞–±–ª–∏—Ü–∞ –Ω–∞–≥—Ä—É–∑–æ–∫', 'data': '–î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã'}
            ],
            'sections': [
                {'title': '–û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è', 'level': 1},
                {'title': '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞–≥—Ä—É–∑–æ–∫', 'level': 1}
            ]
        }
        
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        result = processor.analyze_document_structure(test_content, vlm_metadata)
        
        if result.get('local_llm_available', False):
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            logger.info(f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {result.get('analysis', {}).get('document_type', 'unknown')}")
            logger.info(f"üìä –°–µ–∫—Ü–∏–∏: {len(result.get('analysis', {}).get('sections', []))}")
            logger.info(f"üìã –¢–∞–±–ª–∏—Ü—ã: {len(result.get('analysis', {}).get('tables', []))}")
            logger.info(f"‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('analysis', {}).get('processing_time', 0):.2f} —Å–µ–∫")
            
            # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
            analysis = result.get('analysis', {})
            if 'requirements' in analysis:
                logger.info(f"üìù –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {len(analysis['requirements'])}")
                for req in analysis['requirements'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    logger.info(f"   - {req}")
            
            if 'scope' in analysis:
                logger.info(f"üéØ –û–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: {analysis['scope']}")
                
        else:
            logger.error(f"‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {result.get('error', 'unknown error')}")
            
    except ImportError as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π LLM –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: {e}")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install transformers torch")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        logger.info("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU –∏ —Å–≤–æ–±–æ–¥–Ω—É—é –ø–∞–º—è—Ç—å")

def test_model_loading():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏"""
    
    try:
        from transformers import AutoTokenizer, AutoModelForCausalLM
        
        logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏...")
        
        model_name = "ai-forever/rugpt3large_based_on_gpt2"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
        logger.info("üìù –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä–∞...")
        tokenizer = AutoTokenizer.from_pretrained(model_name)
        logger.info("‚úÖ –¢–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—é
        test_text = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏."
        tokens = tokenizer.encode(test_text)
        logger.info(f"üìä –¢–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ—Å—Ç–µ: {len(tokens)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
        import torch
        if torch.cuda.is_available():
            logger.info(f"üéÆ GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.get_device_name(0)}")
            logger.info(f"üíæ –ü–∞–º—è—Ç—å GPU: {torch.cuda.get_device_properties(0).total_memory / 1e9:.1f} GB")
        else:
            logger.info("üíª –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ LLM")
    
    # –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    test_model_loading()
    
    print("\n" + "="*50 + "\n")
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    test_local_llm_processor()
    
    logger.info("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
