#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∫–∞–Ω-PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""

import os
import sys
import traceback
from pathlib import Path

def test_ocr_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é OCR —Ü–µ–ø–æ—á–∫—É"""
    
    print("üß™ –¢–ï–°–¢ OCR –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Tesseract
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º Tesseract...")
    try:
        import pytesseract
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –¥–ª—è Windows
        if os.name == 'nt':
            tesseract_paths = [
                r'C:\Program Files\Tesseract-OCR\tesseract.exe',
                r'C:\Program Files (x86)\Tesseract-OCR\tesseract.exe',
                r'C:\Tesseract-OCR\tesseract.exe'
            ]
            for tess_path in tesseract_paths:
                if os.path.exists(tess_path):
                    pytesseract.pytesseract.tesseract_cmd = tess_path
                    print(f"‚úÖ Tesseract –Ω–∞–π–¥–µ–Ω: {tess_path}")
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∏ —è–∑—ã–∫–∏
        version_info = pytesseract.get_tesseract_version()
        print(f"‚úÖ Tesseract –≤–µ—Ä—Å–∏—è: {version_info}")
        
        languages = pytesseract.get_languages()
        print(f"‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: {languages}")
        
        if 'rus' in languages:
            print("‚úÖ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        else:
            print("‚ùå –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –ù–ï –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Tesseract: {e}")
        return False
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º pdf2image
    print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º pdf2image...")
    try:
        import pdf2image
        print("‚úÖ pdf2image –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º poppler
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π PDF
            # –ù–∞–π–¥–µ–º –ª—é–±–æ–π PDF —Ñ–∞–π–ª –≤ —Å–∏—Å—Ç–µ–º–µ –¥–ª—è —Ç–µ—Å—Ç–∞
            test_pdf = None
            search_paths = [
                "I:/docs/downloaded",
                "C:/temp",
                os.getcwd()
            ]
            
            for search_path in search_paths:
                if os.path.exists(search_path):
                    for file in os.listdir(search_path):
                        if file.endswith('.pdf'):
                            test_pdf = os.path.join(search_path, file)
                            break
                    if test_pdf:
                        break
            
            if test_pdf and os.path.exists(test_pdf):
                print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ñ–∞–π–ª–æ–º: {test_pdf}")
                
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                # Set poppler path
                poppler_path = None
                poppler_paths = [
                    r'C:\poppler\Library\bin',
                    r'C:\poppler\bin',
                    r'C:\Program Files\poppler\bin'
                ]
                
                for path in poppler_paths:
                    if os.path.exists(os.path.join(path, 'pdftoppm.exe')):
                        poppler_path = path
                        print(f'üìÅ Using poppler: {poppler_path}')
                        break
                
                images = pdf2image.convert_from_path(
                    test_pdf, 
                    dpi=150, 
                    first_page=1, 
                    last_page=1,
                    poppler_path=poppler_path
                )
                
                if images:
                    print(f"‚úÖ PDF –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {len(images)} —Å—Ç—Ä–∞–Ω–∏—Ü")
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º OCR
                    test_image = images[0]
                    text = pytesseract.image_to_string(test_image, lang='rus+eng')
                    
                    if text.strip():
                        print(f"‚úÖ OCR —Ä–∞–±–æ—Ç–∞–µ—Ç! –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                        print(f"üìù –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤: {text[:100]}...")
                    else:
                        print("‚ö†Ô∏è OCR –Ω–µ –∏–∑–≤–ª–µ–∫ —Ç–µ–∫—Å—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞—è)")
                        
            else:
                print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ pdf2image/poppler: {e}")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å poppler-utils")
            
    except ImportError as ie:
        print(f"‚ùå pdf2image –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω: {ie}")
        return False
        
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º PIL/Pillow
    print("\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º Pillow...")
    try:
        from PIL import Image
        print("‚úÖ PIL/Pillow —Ä–∞–±–æ—Ç–∞–µ—Ç")
    except ImportError as ie:
        print(f"‚ùå PIL/Pillow –æ—à–∏–±–∫–∞: {ie}")
        return False
        
    print("\n‚úÖ –í–°–ï OCR –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ì–û–¢–û–í–´ –ö –†–ê–ë–û–¢–ï!")
    return True

if __name__ == "__main__":
    try:
        success = test_ocr_functionality()
        if success:
            print("\nüéâ OCR –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!")
            sys.exit(0)
        else:
            print("\n‚ùå OCR –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!")
            sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        traceback.print_exc()
        sys.exit(1)