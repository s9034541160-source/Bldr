#!/usr/bin/env python3
"""
üöÄ –ü–û–õ–ù–û–¶–ï–ù–ù–û–ï RAG-–û–ë–£–ß–ï–ù–ò–ï —Å–æ –≤—Å–µ–º–∏ 15 —Å—Ç–∞–¥–∏—è–º–∏!
–°–ª–æ–∂–Ω—ã–π NLP –∞–Ω–∞–ª–∏–∑, Rubern markup, NetworkX, SpaCy, –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!
–ù–û –ë–ï–ó LMstudio!
"""

import requests
import json
import time
import os

# API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"

def create_test_token():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    import jwt
    from datetime import datetime, timedelta
    
    payload = {
        "sub": "full_training_user",
        "exp": datetime.utcnow() + timedelta(hours=24)
    }
    
    token = jwt.encode(payload, "your-secret-key-change-in-production", algorithm="HS256")
    return token

def start_full_rag_training():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ü–û–õ–ù–û–¶–ï–ù–ù–û–ï RAG-–æ–±—É—á–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ 15 —Å—Ç–∞–¥–∏—è–º–∏"""
    print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–¶–ï–ù–ù–û–ì–û RAG-–û–ë–£–ß–ï–ù–ò–Ø!")
    print("üî• –°–û –í–°–ï–ú–ò 15 –°–¢–ê–î–ò–Ø–ú–ò –°–õ–û–ñ–ù–û–ì–û NLP –ê–ù–ê–õ–ò–ó–ê!")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    token = create_test_token()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    custom_dir = "I:/docs/downloaded"
    if not os.path.exists(custom_dir):
        print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {custom_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –ü–æ–ø—Ä–æ–±—É–µ–º —Å –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π...")
        custom_dir = None
    else:
        files_count = len([f for f in os.listdir(custom_dir) if os.path.isfile(os.path.join(custom_dir, f))])
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {files_count} —Ñ–∞–π–ª–æ–≤ –≤ {custom_dir}")
        print(f"üìö –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –ü–û–õ–ù–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤!")
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ - –í–ê–ñ–ù–û: fast_mode = False –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞!
    request_data = {
        "fast_mode": False,  # üî• –ü–û–õ–ù–û–¶–ï–ù–ù–´–ô –†–ï–ñ–ò–ú!
        "custom_dir": custom_dir
    }
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    try:
        print(f"üî• –ó–∞–ø—É—Å–∫ –ü–û–õ–ù–û–¶–ï–ù–ù–û–ì–û RAG-–æ–±—É—á–µ–Ω–∏—è...")
        print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {custom_dir or '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}")
        print(f"‚öôÔ∏è –†–µ–∂–∏–º: –ü–û–õ–ù–´–ô (–≤—Å–µ 15 —Å—Ç–∞–¥–∏–π)")
        print(f"üß† SpaCy NLP: –í–ö–õ–Æ–ß–ï–ù")
        print(f"üèóÔ∏è Rubern markup: –í–ö–õ–Æ–ß–ï–ù") 
        print(f"üìä NetworkX graphs: –í–ö–õ–Æ–ß–ï–ù")
        print(f"üóÑÔ∏è Neo4j: –í–ö–õ–Æ–ß–ï–ù")
        print(f"üîç Qdrant: –í–ö–õ–Æ–ß–ï–ù")
        print(f"üî¨ –°–ª–æ–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –í–ö–õ–Æ–ß–ï–ù")
        print()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        response = requests.post(
            f"{API_BASE_URL}/train",
            json=request_data,
            headers=headers,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ {result['message']}")
            mode = 'FULL' if not result.get('fast_mode') else 'FAST'
            print(f"üèÉ –†–µ–∂–∏–º: {mode}")
            
            if result.get('fast_mode'):
                print("‚ùå –í–ù–ò–ú–ê–ù–ò–ï: –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å –≤ –ë–´–°–¢–†–û–ú —Ä–µ–∂–∏–º–µ!")
                print("‚ùå –≠—Ç–æ –ù–ï —Ç–æ —á—Ç–æ –º—ã —Ö–æ—Ç–µ–ª–∏! –ù—É–∂–µ–Ω –ü–û–õ–ù–´–ô —Ä–µ–∂–∏–º!")
                return
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            print("\nüìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–õ–ù–û–ì–û RAG-–û–ë–£–ß–ï–ù–ò–Ø:")
            print("üî• –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Å–µ 15 —Å—Ç–∞–¥–∏–π —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
            print("-" * 80)
            
            last_progress = -1
            last_stage = ""
            start_time = time.time()
            stage_times = {}
            
            while True:
                time.sleep(5)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ (–ø–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
                
                try:
                    status_response = requests.get(
                        f"{API_BASE_URL}/api/training/status",
                        headers=headers,
                        timeout=15
                    )
                    
                    if status_response.status_code == 200:
                        status = status_response.json()
                        
                        progress = status.get("progress", 0)
                        stage = status.get("current_stage", "")
                        message = status.get("message", "")
                        mode = status.get("mode", "normal")
                        is_training = status.get("is_training", False)
                        
                        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ —Å—Ç–∞–¥–∏–π
                        if stage != last_stage and last_stage:
                            elapsed = time.time() - start_time
                            stage_times[last_stage] = elapsed - sum(stage_times.values())
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        if progress != last_progress or stage != last_stage:
                            elapsed = time.time() - start_time
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞–¥–∏–∏
                            stage_emoji = {
                                "0/14": "üîß",  # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ù–¢–î
                                "1/15": "‚úÖ",  # –í–∞–ª–∏–¥–∞—Ü–∏—è
                                "2/15": "üîç",  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                                "3/15": "üìÑ",  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                                "4/15": "üè∑Ô∏è",  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞
                                "5/15": "üèóÔ∏è",  # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                                "6/15": "üî®",  # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ —Ä–∞–±–æ—Ç—ã
                                "7/15": "üé®",  # Rubern markup
                                "8/15": "üìä",  # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                                "9/15": "üõ°Ô∏è",  # –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞
                                "10/15": "‚öôÔ∏è", # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                                "11/15": "üîó", # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç
                                "12/15": "üíæ", # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Neo4j
                                "13/15": "‚úÇÔ∏è", # –ß–∞–Ω–∫–∏—Ä–æ–≤–∞–Ω–∏–µ
                                "14/15": "üß†", # Embeddings
                                "15/15": "üóÑÔ∏è"  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Qdrant
                            }.get(stage.split(":")[0], "üìã")
                            
                            print(f"[{mode.upper()}] {stage_emoji} {stage}: {message}")
                            print(f"   üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}% | ‚è±Ô∏è –í—Ä–µ–º—è: {elapsed:.1f}—Å")
                            
                            last_progress = progress
                            last_stage = stage
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                        if not is_training:
                            if status.get("status") == "success" or "completed" in stage:
                                elapsed = time.time() - start_time
                                print(f"\nüéâ –ü–û–õ–ù–û–¶–ï–ù–ù–û–ï RAG-–û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
                                print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {elapsed/60:.1f} –º–∏–Ω—É—Ç ({elapsed:.1f} —Å–µ–∫—É–Ω–¥)")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞ —Å—Ç–∞–¥–∏–π
                                if stage_times:
                                    print(f"\nüìä –í—Ä–µ–º–µ–Ω–∞ —Å—Ç–∞–¥–∏–π:")
                                    for stage_name, stage_time in stage_times.items():
                                        print(f"   {stage_name}: {stage_time:.1f}—Å")
                                
                                print(f"\nüî• –≠–¢–û –ë–´–õ–û –ù–ê–°–¢–û–Ø–©–ï–ï –û–ë–£–ß–ï–ù–ò–ï!")
                                print(f"üß† –°–æ –≤—Å–µ–º–∏ —Å–ª–æ–∂–Ω—ã–º–∏ NLP –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏")
                                print(f"üèóÔ∏è –° –ø–æ–ª–Ω—ã–º Rubern markup –∞–Ω–∞–ª–∏–∑–æ–º")
                                print(f"üìä –° NetworkX –≥—Ä–∞—Ñ–∞–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
                                print(f"üóÑÔ∏è –° —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ Neo4j –∏ Qdrant")
                                break
                            elif "error" in stage or "error" in status.get("status", ""):
                                print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏: {message}")
                                break
                            else:
                                elapsed = time.time() - start_time
                                print(f"\n‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {message}")
                                print(f"‚è±Ô∏è –í—Ä–µ–º—è: {elapsed/60:.1f} –º–∏–Ω—É—Ç")
                                break
                    else:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {status_response.status_code}")
                        break
                        
                except requests.exceptions.RequestException as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                    print("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(10)
                    continue
                    
                # –¢–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ (–ø–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–ª–≥–∏–º)
                if time.time() - start_time > 7200:
                    print("‚è∞ –¢–∞–π–º–∞—É—Ç - –æ–±—É—á–µ–Ω–∏–µ –∏–¥–µ—Ç –¥–æ–ª—å—à–µ 2 —á–∞—Å–æ–≤")
                    print("üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∞–π–ª–æ–≤")
                    break
                    
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

def show_training_comparison():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
    print("\n" + "=" * 80)
    print("üìä –°–†–ê–í–ù–ï–ù–ò–ï –†–ï–ñ–ò–ú–û–í –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 80)
    
    print("üöÄ –ë–´–°–¢–†–´–ô –†–ï–ñ–ò–ú (fast_mode=True):")
    print("   ‚Ä¢ 5 –ø—Ä–æ—Å—Ç—ã—Ö —Å—Ç–∞–¥–∏–π")
    print("   ‚Ä¢ –¢–æ–ª—å–∫–æ regex –∞–Ω–∞–ª–∏–∑")
    print("   ‚Ä¢ –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏")
    print("   ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ embeddings (384-dim)")
    print("   ‚Ä¢ –í—Ä–µ–º—è: ~1-2 –º–∏–Ω—É—Ç—ã/1000 —Ñ–∞–π–ª–æ–≤")
    print("   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: ~92-95%")
    
    print("\nüî• –ü–û–õ–ù–´–ô –†–ï–ñ–ò–ú (fast_mode=False):")
    print("   ‚Ä¢ 15 —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç–∞–¥–∏–π")
    print("   ‚Ä¢ SpaCy NLP –∞–Ω–∞–ª–∏–∑")
    print("   ‚Ä¢ Rubern markup –≥–µ–Ω–µ—Ä–∞—Ü–∏—è")
    print("   ‚Ä¢ NetworkX –≥—Ä–∞—Ñ—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    print("   ‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ embeddings (1024-dim)")
    print("   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")
    print("   ‚Ä¢ Neo4j –≥—Ä–∞—Ñ —Ä–∞–±–æ—á–∏—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
    print("   ‚Ä¢ –í—Ä–µ–º—è: ~20-60 –º–∏–Ω—É—Ç/1000 —Ñ–∞–π–ª–æ–≤")
    print("   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: ~97-99%")
    
    print("\nüí° –ú–´ –ó–ê–ü–£–°–ö–ê–ï–ú –ü–û–õ–ù–´–ô –†–ï–ñ–ò–ú!")
    print("üî• –î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–∞!")

if __name__ == "__main__":
    print("üî• –ü–û–õ–ù–û–¶–ï–ù–ù–û–ï RAG-–û–ë–£–ß–ï–ù–ò–ï")
    print("=" * 80)
    
    show_training_comparison()
    start_full_rag_training()
    
    print("\n" + "=" * 80)
    print("üèÅ –ü–æ–ª–Ω–æ–µ RAG-–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 80)