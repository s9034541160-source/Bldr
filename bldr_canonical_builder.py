import os
import shutil
import ast
import re
import csv
from pathlib import Path
from datetime import datetime
from collections import defaultdict

class BldrCanonicalBuilder:
    def __init__(self, project_root=r"C:\Bldr"):
        self.project_root = Path(project_root)
        self.archive_dir = self.project_root / f"ARCHIVE_AUTO_CLEANUP_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        self.canonical_dir = self.project_root / "CANONICAL_FUNCTIONS"
        self.report_dir = self.project_root / "BUILD_REPORT"
        self.function_inventory = []
        self.duplicate_map = defaultdict(list)  # func_name -> [file_paths]
        self.canonical_map = {}  # func_name -> chosen_file_path

        # üö´ –°–ü–ò–°–û–ö –ü–ê–ü–û–ö, –ö–û–¢–û–†–´–ï –ù–ï–õ–¨–ó–Ø –¢–†–û–ì–ê–¢–¨
        self.IGNORED_DIRS = {
            'venv',
            '.venv',
            '.git',
            '.vscode',
            '.idea',
            '__pycache__',
            '.pytest_cache',
            'node_modules',
            'build',
            'dist',
            'ARCHIVE',  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –ø–∞–ø–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ "ARCHIVE"
            'BUILD_REPORT',
            'CANONICAL_FUNCTIONS',
            'web',      # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥
            'data',     # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            'logs'      # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏
        }

    def should_ignore_path(self, path: Path) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –ø—É—Ç—å.
        """
        path_str = str(path).lower()
        for ignored in self.IGNORED_DIRS:
            if ignored.lower() in path_str:
                return True
        return False

    def create_directories(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏."""
        self.archive_dir.mkdir(exist_ok=True)
        self.canonical_dir.mkdir(exist_ok=True)
        self.report_dir.mkdir(exist_ok=True)
        print(f"üìÅ –ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã: {self.archive_dir}, {self.canonical_dir}, {self.report_dir}")

    def scan_project_for_functions(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏."""
        print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è —Ñ—É–Ω–∫—Ü–∏–π...")
        for file_path in self.project_root.rglob("*.py"):
            if self.should_ignore_path(file_path):
                continue

            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    source = f.read()
                tree = ast.parse(source)
                for node in ast.walk(tree):
                    if isinstance(node, ast.FunctionDef):
                        self.function_inventory.append({
                            'FunctionName': node.name,
                            'FilePath': str(file_path),
                            'StartLine': node.lineno,
                            'EndLine': getattr(node, 'end_lineno', node.lineno)
                        })
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")

        # –°—Ç—Ä–æ–∏–º –∫–∞—Ä—Ç—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        for item in self.function_inventory:
            self.duplicate_map[item['FunctionName']].append(item['FilePath'])

        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(self.function_inventory)} —Ñ—É–Ω–∫—Ü–∏–π. –î—É–±–ª–∏–∫–∞—Ç—ã –≤—ã—è–≤–ª–µ–Ω—ã.")

    def intelligent_primary_selection(self, func_name, file_list):
        """–£–º–Ω—ã–π –≤—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞."""
        priority_indicators = [
            ('core', 100),
            ('tools_system', 90),
            ('main.py', 85),
            ('bldr_gui.py', 80),
            ('enterprise_rag', 75),
            ('super_smart', 70),
            ('model_manager', 65),
            ('config', 60),
            ('latest', 50)
        ]
        
        deprioritize_indicators = [
            'archive',
            'backup',
            'test',
            'debug',
            'temp',
            'old',
            'deprecated'
        ]
        
        scored_files = []
        
        for file_path in file_list:
            score = 50
            for indicator, points in priority_indicators:
                if indicator in file_path.lower():
                    score += points
            for indicator in deprioritize_indicators:
                if indicator in file_path.lower():
                    score -= 50
            try:
                mod_time = os.path.getmtime(file_path)
                age_days = (datetime.now().timestamp() - mod_time) / (24 * 3600)
                recency_bonus = max(0, 20 - (age_days / 10))
                score += recency_bonus
            except:
                pass
            scored_files.append((file_path, score))
        
        scored_files.sort(key=lambda x: x[1], reverse=True)
        return scored_files[0][0] if scored_files else file_list[0]

    def extract_function_code(self, file_path, func_name):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                source = f.read()
            tree = ast.parse(source)
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef) and node.name == func_name:
                    lines = source.splitlines()
                    start_line = node.lineno - 1
                    end_line = getattr(node, 'end_lineno', len(lines))
                    func_code = '\n'.join(lines[start_line:end_line])
                    return func_code
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–¥–∞ –∏–∑ {file_path}: {e}")
        return None

    def create_canonical_functions(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤—Å–µ—Ö –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —Ñ—É–Ω–∫—Ü–∏–π."""
        print("üõ†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...")
        for func_name, file_list in self.duplicate_map.items():
            if len(file_list) <= 1:
                continue  # –ù–µ –¥—É–±–ª–∏–∫–∞—Ç

            # –í—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
            primary_file = self.intelligent_primary_selection(func_name, file_list)
            self.canonical_map[func_name] = primary_file

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
            func_code = self.extract_function_code(primary_file, func_name)
            if not func_code:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–¥ –¥–ª—è {func_name} –∏–∑ {primary_file}")
                continue

            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –ø—É—Ç—è–º–∏ –∫ –¥—É–±–ª–∏–∫–∞—Ç–∞–º
            comment_lines = [
                f"# –ö–ê–ù–û–ù–ò–ß–ï–°–ö–ê–Ø –í–ï–†–°–ò–Ø —Ñ—É–Ω–∫—Ü–∏–∏: {func_name}",
                f"# –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫: {primary_file}",
                f"# –î—É–±–ª–∏–∫–∞—Ç—ã (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏):",
            ]
            for dup_file in file_list:
                if dup_file != primary_file:
                    comment_lines.append(f"#   - {dup_file}")
            comment_lines.append("#" + "="*80 + "\n")

            canonical_code = "\n".join(comment_lines) + func_code

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤—ã–π —Ñ–∞–π–ª
            canonical_file_path = self.canonical_dir / f"{func_name}.py"
            with open(canonical_file_path, 'w', encoding='utf-8') as f:
                f.write(canonical_code)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª: {canonical_file_path.name}")

    def build_canonical_project(self):
        """–°–æ–±–∏—Ä–∞–µ—Ç –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç, –∑–∞–º–µ–Ω—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–∞ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤."""
        print("üèóÔ∏è  –°–±–æ—Ä–∫–∞ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...")
        critical_files = ['main.py', 'bldr_gui.py', 'bldr_system_launcher.py']

        for critical_file_name in critical_files:
            # –ò—â–µ–º —Ñ–∞–π–ª –≤ –ø—Ä–æ–µ–∫—Ç–µ
            critical_file_path = None
            for file_path in self.project_root.rglob(critical_file_name):
                if not self.should_ignore_path(file_path):
                    critical_file_path = file_path
                    break

            if not critical_file_path or not critical_file_path.exists():
                print(f"‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª {critical_file_name} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(critical_file_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()

            new_lines = []
            i = 0
            while i < len(lines):
                line = lines[i]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∞–ª–æ–º —Ñ—É–Ω–∫—Ü–∏–∏
                func_match = re.match(r'^\s*def\s+(\w+)\s*\(.*\):', line)
                if func_match:
                    func_name = func_match.group(1)
                    if func_name in self.canonical_map:
                        # –≠—Ç–æ –¥—É–±–ª–∏—Ä—É—é—â–∞—è—Å—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å
                        print(f"   üîÑ –ó–∞–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏ '{func_name}' –≤ —Ñ–∞–π–ª–µ {critical_file_name}")
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Ñ—É–Ω–∫—Ü–∏–∏
                        indent = len(line) - len(line.lstrip())
                        j = i + 1
                        while j < len(lines):
                            next_line = lines[j]
                            if next_line.strip() and len(next_line) - len(next_line.lstrip()) <= indent and not next_line.strip().startswith('def ') and not next_line.strip().startswith('class '):
                                break
                            j += 1
                        # –ó–∞–º–µ–Ω—è–µ–º –±–ª–æ–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –∏–º–ø–æ—Ä—Ç –∏ –≤—ã–∑–æ–≤
                        canonical_import = f"from CANONICAL_FUNCTIONS.{func_name} import {func_name}\n"
                        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç)
                        if canonical_import not in new_lines[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                            new_lines.insert(0, canonical_import)
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏
                        i = j
                        continue
                new_lines.append(line)
                i += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (—Å–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Å—Ç–∞—Ä–æ–≥–æ)
            backup_path = self.archive_dir / f"{critical_file_name}.backup_{datetime.now().strftime('%H%M%S')}"
            shutil.copy2(critical_file_path, backup_path)
            with open(critical_file_path, 'w', encoding='utf-8') as f:
                f.writelines(new_lines)
            print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: {critical_file_name}")

    def archive_original_files(self):
        """–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ –≤–∑—è—Ç—ã –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏."""
        print("üóÉÔ∏è  –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        archived_files = set()
        for func_name, primary_file in self.canonical_map.items():
            if primary_file not in archived_files:
                # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –≤ –∞—Ä—Ö–∏–≤–µ
                relative_path = Path(primary_file).relative_to(self.project_root)
                archive_file_path = self.archive_dir / relative_path
                archive_file_path.parent.mkdir(parents=True, exist_ok=True)
                shutil.move(primary_file, archive_file_path)
                print(f"   üì§ –ü–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∞—Ä—Ö–∏–≤: {relative_path}")
                archived_files.add(primary_file)

    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–±–æ—Ä–∫–µ."""
        report_content = f"""# üèóÔ∏è –û–¢–ß–ï–¢ –û –°–ë–û–†–ö–ï –ö–ê–ù–û–ù–ò–ß–ï–°–ö–û–ì–û –ü–†–û–ï–ö–¢–ê Bldr Empire
## –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê
- –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(self.function_inventory)}
- –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len([f for f in self.duplicate_map.values() if len(f) > 1])}
- –°–æ–∑–¥–∞–Ω–æ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤: {len(self.canonical_map)}
- –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤: main.py, bldr_gui.py, bldr_system_launcher.py

## üìÇ –°–¢–†–£–ö–¢–£–†–ê –ü–†–û–ï–ö–¢–ê
- **CANONICAL_FUNCTIONS/**: –ü–∞–ø–∫–∞ —Å –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏ —Ñ—É–Ω–∫—Ü–∏–π.
- **ARCHIVE_AUTO_CLEANUP_.../**: –ü–∞–ø–∫–∞ —Å –∞—Ä—Ö–∏–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
- **BUILD_REPORT/**: –≠—Ç–∞ –ø–∞–ø–∫–∞ —Å –æ—Ç—á–µ—Ç–∞–º–∏.

## üõ†Ô∏è –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É —á–µ—Ä–µ–∑ `bldr_gui.py`.
2. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –æ—à–∏–±–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:
   - –í—Å–µ –ª–∏ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ `CANONICAL_FUNCTIONS` —Ä–∞–±–æ—Ç–∞—é—Ç.
   - –ù–µ—Ç –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —Ñ—É–Ω–∫—Ü–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Ä–∞–∑–æ—Ä–≤–∞–Ω—ã.
3. –î–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤ `CANONICAL_FUNCTIONS/` –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚Äî —Ç–∞–º —É–∫–∞–∑–∞–Ω—ã –ø—É—Ç–∏ –∫ "–¥—É–±–ª–∏–∫–∞—Ç–∞–º". –ï—Å–ª–∏ –≤ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç ‚Äî —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–π –∫–æ–¥ –∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–∞.
4. –ü–æ—Å–ª–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–∂–Ω–æ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ `CANONICAL_FUNCTIONS/` –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ (`core/tools_system.py`, `core/coordinator.py` –∏ —Ç.–¥.).

## ‚úÖ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!
"""

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = self.report_dir / "BUILD_REPORT.md"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report_content)

        print(f"\nüìÑ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        print("üéâ –°–±–æ—Ä–∫–∞ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–±–æ—Ä–∫–∏."""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–°–¢–¨–Æ –ê–í–¢–û–ú–ê–¢–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –°–ë–û–†–©–ò–ö–ê –ö–ê–ù–û–ù–ò–ß–ï–°–ö–û–ì–û –ü–†–û–ï–ö–¢–ê")
        print("=" * 70)
        print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞—Å—Ç —á–∏—Å—Ç—É—é, —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.")
        print("–ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤, –∞ –Ω–µ —É–¥–∞–ª–µ–Ω—ã.")
        print()

        confirmation = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–í–≤–µ–¥–∏—Ç–µ '–î–ê'): ").strip()
        if confirmation != '–î–ê':
            print("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω.")
            return

        try:
            self.create_directories()
            self.scan_project_for_functions()
            self.create_canonical_functions()
            self.build_canonical_project()
            self.archive_original_files()
            self.generate_final_report()
            print("\n‚úÖ –í–°–ï –≠–¢–ê–ü–´ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–´!")
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            print("–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    builder = BldrCanonicalBuilder()
    builder.run()