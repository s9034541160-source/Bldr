#!/usr/bin/env python3
"""
RAG Training Lockfile System
–°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è
"""

import os
import sys
import time
import psutil
from pathlib import Path
import json
from datetime import datetime

class RAGTrainingLock:
    """–°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ RAG –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self, lockfile_path="./rag_training.lock"):
        self.lockfile_path = Path(lockfile_path)
        self.pid = os.getpid()
        
    def acquire_lock(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        if self.lockfile_path.exists():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∏–∑ lockfile
            try:
                with open(self.lockfile_path, 'r') as f:
                    lock_data = json.load(f)
                
                old_pid = lock_data.get('pid')
                if old_pid and psutil.pid_exists(old_pid):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
                    try:
                        proc = psutil.Process(old_pid)
                        cmdline = ' '.join(proc.cmdline())
                        if 'rag_trainer' in cmdline.lower() or 'enterprise_rag' in cmdline.lower():
                            print(f"‚ùå –û–®–ò–ë–ö–ê: –û–±—É—á–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!")
                            print(f"   PID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {old_pid}")
                            print(f"   –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {lock_data.get('start_time')}")
                            print(f"   –ö–æ–º–∞–Ω–¥–∞: {cmdline}")
                            print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:")
                            print(f"   kill {old_pid}  # Linux/Mac")
                            print(f"   taskkill /PID {old_pid} /F  # Windows")
                            return False
                    except psutil.NoSuchProcess:
                        # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π lockfile
                        self.lockfile_path.unlink()
                else:
                    # PID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π lockfile
                    self.lockfile_path.unlink()
                    
            except (json.JSONDecodeError, KeyError):
                # –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π lockfile, —É–¥–∞–ª—è–µ–º
                self.lockfile_path.unlink()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π lockfile
        lock_data = {
            'pid': self.pid,
            'start_time': datetime.now().isoformat(),
            'hostname': os.uname().nodename if hasattr(os, 'uname') else 'windows',
            'command': ' '.join(sys.argv)
        }
        
        try:
            with open(self.lockfile_path, 'w') as f:
                json.dump(lock_data, f, indent=2)
            print(f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: PID {self.pid}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è lockfile: {e}")
            return False
    
    def release_lock(self):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        try:
            if self.lockfile_path.exists():
                self.lockfile_path.unlink()
                print(f"üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞: PID {self.pid}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    
    def __enter__(self):
        if not self.acquire_lock():
            sys.exit(1)
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.release_lock()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
def ensure_single_training_instance():
    """–£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—É—á–µ–Ω–∏—è"""
    lock = RAGTrainingLock()
    return lock.acquire_lock()

if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    with RAGTrainingLock() as lock:
        print("–û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...")
        time.sleep(5)
        print("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
