#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π WebSocket —Ç–æ–∫–µ–Ω–æ–≤
"""

import os
import sys
import time
import jwt
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_token_expiration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞...")
    
    try:
        # –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ main.py
        with open('main.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞
        if 'ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", "1440"))' in content:
            print("‚úÖ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 24 —á–∞—Å–æ–≤ (1440 –º–∏–Ω—É—Ç)")
            return True
        elif 'ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", "30"))' in content:
            print("‚ùå –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –≤—Å–µ –µ—â–µ 30 –º–∏–Ω—É—Ç")
            return False
        else:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

def test_websocket_error_handling():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ WebSocket"""
    print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ WebSocket...")
    
    try:
        # –ß–∏—Ç–∞–µ–º main.py
        with open('main.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        improvements = [
            "jwt.ExpiredSignatureError",
            "Token expired. Please refresh the page to get a new token.",
            "Invalid token. Please refresh the page to get a new token."
        ]
        
        found_improvements = 0
        for improvement in improvements:
            if improvement in content:
                found_improvements += 1
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {improvement}")
            else:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {improvement}")
        
        if found_improvements == len(improvements):
            print("\nüéâ –í—Å–µ —É–ª—É—á—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
            return True
        else:
            print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {found_improvements}/{len(improvements)} —É–ª—É—á—à–µ–Ω–∏–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False

def test_frontend_token_refresh():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞...")
    
    try:
        # –ß–∏—Ç–∞–µ–º AuthHeader.tsx
        with open('web/bldr_dashboard/src/components/AuthHeader.tsx', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
        improvements = [
            "const refreshToken = async () =>",
            "Token expired or expiring soon, attempting to refresh",
            "Token refreshed successfully",
            "exp - now) < 300"  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
        ]
        
        found_improvements = 0
        for improvement in improvements:
            if improvement in content:
                found_improvements += 1
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {improvement}")
            else:
                print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {improvement}")
        
        if found_improvements == len(improvements):
            print("\nüéâ –í—Å–µ —É–ª—É—á—à–µ–Ω–∏—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")
            return True
        else:
            print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {found_improvements}/{len(improvements)} —É–ª—É—á—à–µ–Ω–∏–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞: {e}")
        return False

def test_jwt_token_creation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞"""
    print("\nüé´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è JWT —Ç–æ–∫–µ–Ω–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        secret_key = "bldr_empire_secret_key_change_in_production"
        algorithm = "HS256"
        
        # –¢–æ–∫–µ–Ω –Ω–∞ 24 —á–∞—Å–∞
        expire = datetime.utcnow() + timedelta(hours=24)
        payload = {
            "sub": "admin",
            "role": "admin",
            "exp": expire
        }
        
        token = jwt.encode(payload, secret_key, algorithm=algorithm)
        print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω: {token[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        decoded = jwt.decode(token, secret_key, algorithms=[algorithm])
        print(f"‚úÖ –¢–æ–∫–µ–Ω –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω: {decoded}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
        exp_timestamp = decoded['exp']
        exp_datetime = datetime.fromtimestamp(exp_timestamp)
        time_until_expiry = exp_datetime - datetime.utcnow()
        
        print(f"‚úÖ –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è: {exp_datetime}")
        print(f"‚úÖ –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {time_until_expiry}")
        
        if time_until_expiry.total_seconds() > 23 * 3600:  # –ë–æ–ª—å—à–µ 23 —á–∞—Å–æ–≤
            print("‚úÖ –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –Ω–∞ 24 —á–∞—Å–∞")
            return True
        else:
            print("‚ùå –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –Ω–∞ –º–µ–Ω—å—à–µ–µ –≤—Ä–µ–º—è")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô WEBSOCKET")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    token_expiration_ok = test_token_expiration()
    websocket_errors_ok = test_websocket_error_handling()
    frontend_refresh_ok = test_frontend_token_refresh()
    jwt_creation_ok = test_jwt_token_creation()
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   üîê –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞: {'‚úÖ' if token_expiration_ok else '‚ùå'}")
    print(f"   üîß –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WS: {'‚úÖ' if websocket_errors_ok else '‚ùå'}")
    print(f"   üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: {'‚úÖ' if frontend_refresh_ok else '‚ùå'}")
    print(f"   üé´ –°–æ–∑–¥–∞–Ω–∏–µ JWT: {'‚úÖ' if jwt_creation_ok else '‚ùå'}")
    
    if token_expiration_ok and websocket_errors_ok and frontend_refresh_ok and jwt_creation_ok:
        print("\nüéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø WEBSOCKET –†–ê–ë–û–¢–ê–Æ–¢!")
        print("‚úÖ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 24 —á–∞—Å–æ–≤")
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ WebSocket")
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ")
        print("‚úÖ JWT —Ç–æ–∫–µ–Ω—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–†–ï–ë–£–Æ–¢ –î–û–†–ê–ë–û–¢–ö–ò")
    
    print("=" * 60)

if __name__ == "__main__":
    main()
