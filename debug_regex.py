#!/usr/bin/env python3
"""
Отладка регулярных выражений для ГОСТ-чанкинга
"""
import re

def debug_regex():
    """Отладка регулярных выражений"""
    test_content = """
6. Общие требования
6.1 Требования к материалам
6.1.1 Бетон должен соответствовать ГОСТ 26633
6.1.2 Арматура должна соответствовать ГОСТ 10884
6.2 Требования к конструкции
6.2.1 Несущие конструкции должны быть рассчитаны на нагрузки
6.2.2 Фундаменты должны обеспечивать устойчивость
6.2.3 Соединения должны быть надежными
7. Контроль качества
7.1 Приемочный контроль
7.1.1 Контроль должен проводиться в соответствии с требованиями
    """.strip()
    
    print("=== ОТЛАДКА РЕГУЛЯРНЫХ ВЫРАЖЕНИЙ ===")
    print(f"Тестовый контент:\n{test_content}")
    print("\n" + "="*50)
    
    # Тестируем разные паттерны
    patterns = [
        (r'^(\d+)\.\s+([^\n]+)', "Уровень 1 (простой)"),
        (r'^(\d+\.\d+)\.\s+([^\n]+)', "Уровень 2 (простой)"),
        (r'^(\d+\.\d+\.\d+)\.\s+([^\n]+)', "Уровень 3 (простой)"),
        (r'^(\d+)\.\s+(.+?)(?=\n\d+\.|\n[А-ЯЁ]|\Z)', "Уровень 1 (с границами)"),
        (r'^(\d+\.\d+)\.\s+(.+?)(?=\n\d+\.\d+\.|\n\d+\.|\n[А-ЯЁ]|\Z)', "Уровень 2 (с границами)"),
        (r'^(\d+\.\d+\.\d+)\.\s+(.+?)(?=\n\d+\.\d+\.\d+\.|\n\d+\.\d+\.|\n\d+\.|\n[А-ЯЁ]|\Z)', "Уровень 3 (с границами)"),
    ]
    
    for pattern, description in patterns:
        print(f"\n{description}: {pattern}")
        matches = list(re.finditer(pattern, test_content, re.MULTILINE))
        print(f"  Найдено совпадений: {len(matches)}")
        for i, match in enumerate(matches):
            print(f"    [{i}] {match.group(1)} - {match.group(2)}")
    
    # Тестируем построчно
    print(f"\n=== ПОСТРОЧНЫЙ АНАЛИЗ ===")
    lines = test_content.split('\n')
    for i, line in enumerate(lines):
        print(f"Строка {i+1}: '{line}'")
        
        # Проверяем каждый паттерн
        for pattern, description in patterns:
            match = re.match(pattern, line)
            if match:
                print(f"  ✓ {description}: {match.group(1)} - {match.group(2)}")

if __name__ == "__main__":
    debug_regex()
