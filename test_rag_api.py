"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –º–µ—Ç–æ–¥–æ–≤ RAG-—Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
process_single_file_ad_hoc + analyze_project_context
"""

import os
import sys
import logging
import time
from pathlib import Path
from typing import List, Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_single_file_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º RAG —Ç—Ä–µ–Ω–µ—Ä
        from enterprise_rag_trainer_full import EnterpriseRAGTrainer
        
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
        trainer = EnterpriseRAGTrainer()
        
        # –ò—â–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF —Ñ–∞–π–ª
        test_files = []
        for root, dirs, files in os.walk("I:/docs/downloaded"):
            for file in files:
                if file.endswith('.pdf') and '58' not in file:
                    test_files.append(os.path.join(root, file))
                    if len(test_files) >= 1:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞
                        break
            if test_files:
                break
        
        if not test_files:
            logger.warning("‚ö†Ô∏è No test PDF files found in I:/docs/downloaded")
            return
        
        test_file = test_files[0]
        logger.info(f"üìÑ Testing with file: {os.path.basename(test_file)}")
        
        # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        logger.info("üîç Test 1: Single file analysis (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î)")
        start_time = time.time()
        
        result = trainer.process_single_file_ad_hoc(test_file, save_to_db=False)
        
        if result and result.get('success'):
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω:")
            logger.info(f"   - –§–∞–π–ª: {result.get('file_name')}")
            logger.info(f"   - –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {result.get('doc_type')}")
            logger.info(f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {result.get('chunks_count')}")
            logger.info(f"   - –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('processing_time', 0):.2f} —Å–µ–∫")
            logger.info(f"   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {result.get('saved_to_db')}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata = result.get('metadata', {})
            if metadata:
                logger.info(f"   - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
                for key, value in metadata.items():
                    if value:
                        logger.info(f"     * {key}: {value}")
        else:
            logger.error(f"‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {result.get('error', 'unknown error') if result else 'No result'}")
        
        analysis_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: {analysis_time:.2f} —Å–µ–∫")
        
        # –¢–µ—Å—Ç 2: –î–æ–æ–±—É—á–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î (dry run)
        logger.info("\nüîç Test 2: Single file training (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î)")
        start_time = time.time()
        
        result = trainer.process_single_file_ad_hoc(test_file, save_to_db=True)
        
        if result and result.get('success'):
            logger.info(f"‚úÖ –î–æ–æ–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:")
            logger.info(f"   - –§–∞–π–ª: {result.get('file_name')}")
            logger.info(f"   - –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {result.get('saved_to_db')}")
        else:
            logger.error(f"‚ùå –î–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: {result.get('error', 'unknown error') if result else 'No result'}")
        
        training_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –¥–æ–æ–±—É—á–µ–Ω–∏—è: {training_time:.2f} —Å–µ–∫")
        
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except ImportError as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å RAG —Ç—Ä–µ–Ω–µ—Ä: {e}")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")

def test_project_analysis_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º RAG —Ç—Ä–µ–Ω–µ—Ä
        from enterprise_rag_trainer_full import EnterpriseRAGTrainer
        
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
        trainer = EnterpriseRAGTrainer()
        
        # –ò—â–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö PDF —Ñ–∞–π–ª–æ–≤
        test_files = []
        for root, dirs, files in os.walk("I:/docs/downloaded"):
            for file in files:
                if file.endswith('.pdf') and '58' not in file:
                    test_files.append(os.path.join(root, file))
                    if len(test_files) >= 3:  # –ë–µ—Ä–µ–º 3 —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
                        break
            if len(test_files) >= 3:
                break
        
        if not test_files:
            logger.warning("‚ö†Ô∏è No test PDF files found in I:/docs/downloaded")
            return
        
        logger.info(f"üìÅ Testing project analysis with {len(test_files)} files")
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞
        logger.info("üîç Test: Project context analysis")
        start_time = time.time()
        
        results = trainer.analyze_project_context(test_files)
        
        if results:
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω:")
            logger.info(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(results)}")
            
            success_count = sum(1 for r in results if r.get('status') == 'success')
            failed_count = len(results) - success_count
            
            logger.info(f"   - –£—Å–ø–µ—à–Ω–æ: {success_count}")
            logger.info(f"   - –û—à–∏–±–æ–∫: {failed_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ñ–∞–π–ª–∞–º
            for i, result in enumerate(results, 1):
                if result.get('status') == 'success':
                    logger.info(f"   üìÑ –§–∞–π–ª {i}: {result.get('file_name')}")
                    logger.info(f"      - –¢–∏–ø: {result.get('doc_type')} ({result.get('confidence', 0):.2f})")
                    logger.info(f"      - –ß–∞–Ω–∫–æ–≤: {result.get('chunk_count')}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    metadata = result.get('key_metadata', {})
                    for key, value in metadata.items():
                        if value:
                            logger.info(f"      - {key}: {value}")
                else:
                    logger.warning(f"   ‚ùå –§–∞–π–ª {i}: {result.get('file_name')} - {result.get('error', 'unknown error')}")
        else:
            logger.error("‚ùå –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è")
        
        analysis_time = time.time() - start_time
        logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞: {analysis_time:.2f} —Å–µ–∫")
        
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except ImportError as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å RAG —Ç—Ä–µ–Ω–µ—Ä: {e}")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")

def test_api_performance():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API"""
    
    logger.info("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ API...")
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤
    
    logger.info("üí° API –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º!")

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –º–µ—Ç–æ–¥–æ–≤ RAG-—Ç—Ä–µ–Ω–µ—Ä–∞")
    
    # –¢–µ—Å—Ç 1: API –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    logger.info("="*50)
    logger.info("üîç –¢–ï–°–¢ 1: API –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    logger.info("="*50)
    test_single_file_api()
    
    print("\n" + "="*50 + "\n")
    
    # –¢–µ—Å—Ç 2: API –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞
    logger.info("="*50)
    logger.info("üìä –¢–ï–°–¢ 2: API –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞")
    logger.info("="*50)
    test_project_analysis_api()
    
    print("\n" + "="*50 + "\n")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    logger.info("="*50)
    logger.info("‚ö° –¢–ï–°–¢ 3: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å API")
    logger.info("="*50)
    test_api_performance()
    
    logger.info("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
