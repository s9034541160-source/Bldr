#!/usr/bin/env python3
"""–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ë–±–µ—Ä –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ Neo4j"""

import neo4j

def check_edges():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã —Å–≤—è–∑–µ–π"""
    try:
        driver = neo4j.GraphDatabase.driver('neo4j://127.0.0.1:7687', auth=('neo4j', 'neopassword'))
        session = driver.session()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã —Å–≤—è–∑–µ–π
        result = session.run('MATCH ()-[r]->() RETURN type(r) as rel_type, count(r) as count ORDER BY count DESC')
        print("=== –í–°–ï –°–í–Ø–ó–ò ===")
        for record in result:
            print(f"{record['rel_type']}: {record['count']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º PRECEDES —Å–≤—è–∑–∏
        result = session.run('MATCH ()-[r:PRECEDES]->() RETURN count(r) as precedes_count')
        precedes_count = result.single()['precedes_count']
        print(f"\nPRECEDES —Ä—ë–±—Ä–∞: {precedes_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Work —É–∑–ª—ã
        result = session.run('MATCH (w:Work) RETURN count(w) as work_count')
        work_count = result.single()['work_count']
        print(f"Work —É–∑–ª—ã: {work_count}")
        
        session.close()
        driver.close()
        
        return precedes_count, work_count
    except Exception as e:
        print(f"Error: {e}")
        return 0, 0

if __name__ == "__main__":
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ë–±—Ä–∞ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    precedes, works = check_edges()
    
    print(f"\nüìä –ê–Ω–∞–ª–∏–∑:")
    print(f"Work —É–∑–ª–æ–≤: {works}")
    print(f"PRECEDES —Ä—ë–±–µ—Ä: {precedes}")
    
    if precedes == 0 and works > 0:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ï—Å—Ç—å Work —É–∑–ª—ã, –Ω–æ –Ω–µ—Ç PRECEDES —Ä—ë–±–µ—Ä!")
        print("üîß –¢—Ä–µ–Ω–µ—Ä –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!")
    elif precedes > 0:
        print("‚úÖ PRECEDES —Ä—ë–±—Ä–∞ —Å–æ–∑–¥–∞—é—Ç—Å—è!")
    else:
        print("‚ö†Ô∏è –ù–µ—Ç Work —É–∑–ª–æ–≤ - –≤–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
