#!/usr/bin/env python3
"""
–ü–û–õ–ù–´–ô –°–ë–†–û–° RAG –û–ë–£–ß–ï–ù–ò–Ø
–û—á–∏—â–∞–µ—Ç –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∫—ç—à–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
"""

import os
import shutil
import time
import subprocess
from pathlib import Path

def main():
    print('üî• –ü–û–õ–ù–´–ô –°–ë–†–û–° RAG –û–ë–£–ß–ï–ù–ò–Ø!')
    print('=' * 50)
    
    # 1. –û—á–∏—â–∞–µ–º Qdrant
    print('1Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ Qdrant...')
    try:
        from qdrant_client import QdrantClient
        client = QdrantClient(host='localhost', port=6333)
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
        try:
            client.delete_collection('enterprise_docs')
            print('‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è enterprise_docs —É–¥–∞–ª–µ–Ω–∞')
        except Exception as e:
            print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}')
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—É—Å—Ç—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
        try:
            from qdrant_client.http.models import VectorParams, Distance
            client.create_collection(
                collection_name='enterprise_docs',
                vectors_config=VectorParams(size=1024, distance=Distance.COSINE)
            )
            print('‚úÖ –ù–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è enterprise_docs —Å–æ–∑–¥–∞–Ω–∞')
        except Exception as e:
            print(f'‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}')
            
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Qdrant: {e}')
    
    # 2. –û—á–∏—â–∞–µ–º Neo4j
    print('\n2Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ Neo4j...')
    try:
        from neo4j import GraphDatabase
        driver = GraphDatabase.driver('bolt://localhost:7687')
        
        with driver.session() as session:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–∑–ª—ã –∏ —Å–≤—è–∑–∏
            session.run('MATCH (n) DETACH DELETE n')
            print('‚úÖ –í—Å–µ —É–∑–ª—ã –∏ —Å–≤—è–∑–∏ Neo4j —É–¥–∞–ª–µ–Ω—ã')
            
        driver.close()
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Neo4j: {e}')
    
    # 3. –û—á–∏—â–∞–µ–º Redis
    print('\n3Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ Redis...')
    try:
        import redis
        r = redis.Redis(host='localhost', port=6379, db=0)
        r.flushdb()
        print('‚úÖ Redis –æ—á–∏—â–µ–Ω')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis: {e}')
    
    # 4. –£–¥–∞–ª—è–µ–º processed_files.json
    print('\n4Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ processed_files.json...')
    try:
        if os.path.exists('processed_files.json'):
            os.remove('processed_files.json')
            print('‚úÖ processed_files.json —É–¥–∞–ª–µ–Ω')
        else:
            print('‚ö†Ô∏è processed_files.json –Ω–µ –Ω–∞–π–¥–µ–Ω')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è processed_files.json: {e}')
    
    # 5. –û—á–∏—â–∞–µ–º –∫—ç—à
    print('\n5Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞...')
    try:
        if os.path.exists('temp'):
            shutil.rmtree('temp')
            print('‚úÖ –ü–∞–ø–∫–∞ temp —É–¥–∞–ª–µ–Ω–∞')
        if os.path.exists('__pycache__'):
            shutil.rmtree('__pycache__')
            print('‚úÖ –ü–∞–ø–∫–∞ __pycache__ —É–¥–∞–ª–µ–Ω–∞')
        if os.path.exists('logs'):
            shutil.rmtree('logs')
            print('‚úÖ –ü–∞–ø–∫–∞ logs —É–¥–∞–ª–µ–Ω–∞')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞: {e}')
    
    # 6. –û—á–∏—â–∞–µ–º processed –∏ failed –ø–∞–ø–∫–∏
    print('\n6Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ processed –∏ failed –ø–∞–ø–æ–∫...')
    try:
        if os.path.exists('processed'):
            shutil.rmtree('processed')
            print('‚úÖ –ü–∞–ø–∫–∞ processed —É–¥–∞–ª–µ–Ω–∞')
        if os.path.exists('failed'):
            shutil.rmtree('failed')
            print('‚úÖ –ü–∞–ø–∫–∞ failed —É–¥–∞–ª–µ–Ω–∞')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–æ–∫: {e}')
    
    # 7. –û—á–∏—â–∞–µ–º –≤—Å–µ .pyc —Ñ–∞–π–ª—ã
    print('\n7Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ .pyc —Ñ–∞–π–ª–æ–≤...')
    try:
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.endswith('.pyc'):
                    os.remove(os.path.join(root, file))
        print('‚úÖ –í—Å–µ .pyc —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ .pyc —Ñ–∞–π–ª–æ–≤: {e}')
    
    # 8. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print('\n8Ô∏è‚É£ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Qdrant
    try:
        from qdrant_client import QdrantClient
        client = QdrantClient(host='localhost', port=6333)
        collections = client.get_collections()
        print(f'üìä –ö–æ–ª–ª–µ–∫—Ü–∏–π –≤ Qdrant: {len(collections.collections)}')
        
        if len(collections.collections) > 0:
            for col in collections.collections:
                print(f'  - {col.name}')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Qdrant: {e}')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
    try:
        import redis
        r = redis.Redis(host='localhost', port=6379, db=0)
        keys = r.keys('*')
        print(f'üìä –ö–ª—é—á–µ–π –≤ Redis: {len(keys)}')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis: {e}')
    
    print('\nüéâ –ü–û–õ–ù–´–ô –°–ë–†–û–° –ó–ê–í–ï–†–®–ï–ù!')
    print('‚úÖ –í—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω—ã')
    print('‚úÖ –í—Å–µ –∫—ç—à–∏ —É–¥–∞–ª–µ–Ω—ã')
    print('‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–±—Ä–æ—à–µ–Ω—ã')
    print('\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ–º—É –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é!')

if __name__ == "__main__":
    main()
