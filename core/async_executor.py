#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ASYNC EXECUTOR FOR Bldr Empire
==============================

–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ agents-towards-production.
"""

import asyncio
import time
from typing import Dict, Any, Optional, Callable, Union
from concurrent.futures import ThreadPoolExecutor, TimeoutError as FutureTimeoutError
from dataclasses import dataclass
import logging

from core.exceptions import ToolExecutionTimeoutError, ToolResourceError
from core.structured_logging import get_logger

logger = get_logger("async_executor")

@dataclass
class ExecutionConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    timeout_seconds: int = 30
    max_retries: int = 2
    retry_delay: float = 1.0
    use_thread_pool: bool = True
    thread_pool_size: int = 4

class AsyncToolExecutor:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏"""
    
    def __init__(self, config: Optional[ExecutionConfig] = None):
        self.config = config or ExecutionConfig()
        self.thread_pool = ThreadPoolExecutor(max_workers=self.config.thread_pool_size)
        self.logger = get_logger("async_executor")
    
    async def execute_with_timeout(self, 
                                 tool_func: Callable, 
                                 tool_name: str,
                                 kwargs: Dict[str, Any],
                                 timeout_seconds: Optional[int] = None) -> Any:
        """
        üöÄ –ê–°–ò–ù–•–†–û–ù–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –° –¢–ê–ô–ú–ê–£–¢–û–ú
        
        Args:
            tool_func: –§—É–Ω–∫—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            tool_name: –ò–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
            timeout_seconds: –¢–∞–π–º–∞—É—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        
        Raises:
            ToolExecutionTimeoutError: –ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ç–∞–π–º–∞—É—Ç–∞
        """
        timeout = timeout_seconds or self.config.timeout_seconds
        start_time = time.time()
        
        try:
            self.logger.log_tool_execution(
                tool_name=tool_name,
                status="started",
                duration_ms=0,
                context={"timeout_seconds": timeout}
            )
            
            if self.config.use_thread_pool:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                result = await asyncio.wait_for(
                    self._run_in_thread(tool_func, kwargs),
                    timeout=timeout
                )
            else:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π)
                result = await asyncio.wait_for(
                    self._run_async(tool_func, kwargs),
                    timeout=timeout
                )
            
            execution_time = (time.time() - start_time) * 1000
            self.logger.log_tool_execution(
                tool_name=tool_name,
                status="completed",
                duration_ms=execution_time,
                context={"result_type": type(result).__name__}
            )
            
            return result
            
        except asyncio.TimeoutError:
            execution_time = (time.time() - start_time) * 1000
            self.logger.log_tool_execution(
                tool_name=tool_name,
                status="timeout",
                duration_ms=execution_time,
                context={"timeout_seconds": timeout}
            )
            raise ToolExecutionTimeoutError(tool_name, timeout)
        
        except Exception as e:
            execution_time = (time.time() - start_time) * 1000
            self.logger.log_tool_execution(
                tool_name=tool_name,
                status="error",
                duration_ms=execution_time,
                context={"error": str(e)}
            )
            raise
    
    async def _run_in_thread(self, func: Callable, kwargs: Dict[str, Any]) -> Any:
        """–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(self.thread_pool, func, **kwargs)
    
    async def _run_async(self, func: Callable, kwargs: Dict[str, Any]) -> Any:
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏"""
        if asyncio.iscoroutinefunction(func):
            return await func(**kwargs)
        else:
            # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            return func(**kwargs)
    
    async def execute_with_retries(self,
                                 tool_func: Callable,
                                 tool_name: str,
                                 kwargs: Dict[str, Any],
                                 timeout_seconds: Optional[int] = None) -> Any:
        """
        üöÄ –í–´–ü–û–õ–ù–ï–ù–ò–ï –° –ü–û–í–¢–û–†–ù–´–ú–ò –ü–û–ü–´–¢–ö–ê–ú–ò
        
        Args:
            tool_func: –§—É–Ω–∫—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            tool_name: –ò–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
            timeout_seconds: –¢–∞–π–º–∞—É—Ç
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Raises:
            ToolExecutionTimeoutError: –ü—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ø–æ–ø—ã—Ç–æ–∫
        """
        last_exception = None
        
        for attempt in range(self.config.max_retries + 1):
            try:
                if attempt > 0:
                    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                    await asyncio.sleep(self.config.retry_delay * attempt)
                    self.logger.log_tool_execution(
                        tool_name=tool_name,
                        status="retry",
                        duration_ms=0,
                        context={"attempt": attempt + 1, "max_retries": self.config.max_retries}
                    )
                
                return await self.execute_with_timeout(
                    tool_func, tool_name, kwargs, timeout_seconds
                )
                
            except ToolExecutionTimeoutError as e:
                last_exception = e
                if attempt == self.config.max_retries:
                    self.logger.log_tool_execution(
                        tool_name=tool_name,
                        status="failed_after_retries",
                        duration_ms=0,
                        context={"attempts": attempt + 1, "max_retries": self.config.max_retries}
                    )
                    raise e
            
            except Exception as e:
                last_exception = e
                if attempt == self.config.max_retries:
                    self.logger.log_tool_execution(
                        tool_name=tool_name,
                        status="failed_after_retries",
                        duration_ms=0,
                        context={"attempts": attempt + 1, "error": str(e)}
                    )
                    raise e
        
        # –≠—Ç–æ—Ç –∫–æ–¥ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        if last_exception:
            raise last_exception
    
    async def execute_multiple_tools(self,
                                   tool_calls: list,
                                   max_concurrent: int = 3) -> Dict[str, Any]:
        """
        üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –ù–ï–°–ö–û–õ–¨–ö–ò–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
        
        Args:
            tool_calls: –°–ø–∏—Å–æ–∫ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            max_concurrent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        semaphore = asyncio.Semaphore(max_concurrent)
        results = {}
        
        async def execute_single_tool(tool_call):
            async with semaphore:
                tool_name = tool_call["name"]
                tool_func = tool_call["func"]
                kwargs = tool_call.get("kwargs", {})
                timeout = tool_call.get("timeout")
                
                try:
                    result = await self.execute_with_retries(
                        tool_func, tool_name, kwargs, timeout
                    )
                    return tool_name, {"status": "success", "result": result}
                except Exception as e:
                    return tool_name, {"status": "error", "error": str(e)}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [execute_single_tool(tool_call) for tool_call in tool_calls]
        completed_tasks = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for task_result in completed_tasks:
            if isinstance(task_result, Exception):
                self.logger.log_error(task_result, {"context": "parallel_execution"})
            else:
                tool_name, result = task_result
                results[tool_name] = result
        
        return results
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤"""
        self.thread_pool.shutdown(wait=True)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
_global_executor: Optional[AsyncToolExecutor] = None

def get_async_executor() -> AsyncToolExecutor:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    global _global_executor
    if _global_executor is None:
        _global_executor = AsyncToolExecutor()
    return _global_executor

def close_async_executor():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
    global _global_executor
    if _global_executor:
        _global_executor.close()
        _global_executor = None
