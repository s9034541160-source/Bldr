#!/usr/bin/env python3
"""
Internet Template Search Tool
–ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ –∏—Ö –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ø—Ä–æ–µ–∫—Ç—ã
"""

import os
import requests
import json
import re
from pathlib import Path
from typing import Dict, List, Optional, Any
from urllib.parse import quote_plus, urljoin
from bs4 import BeautifulSoup
import time
from datetime import datetime

class InternetTemplateSearcher:
    """–ü–æ–∏—Å–∫ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞"""
    
    def __init__(self):
        self.templates_dir = Path("I:/docs/templates")
        self.generated_dir = Path("I:/docs_generated/templates")
        self.cache_dir = Path("I:/docs/cache/templates")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for dir_path in [self.templates_dir, self.generated_dir, self.cache_dir]:
            dir_path.mkdir(parents=True, exist_ok=True)
        
        # –ü–æ–∏—Å–∫–æ–≤—ã–µ –¥–≤–∏–∂–∫–∏ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        self.search_engines = {
            'google': 'https://www.google.com/search?q={}',
            'yandex': 'https://yandex.ru/search/?text={}',
            'bing': 'https://www.bing.com/search?q={}'
        }
        
        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
        self.template_sources = {
            'government': [
                'https://www.consultant.ru',
                'https://www.garant.ru',
                'https://www.gov.ru'
            ],
            'construction': [
                'https://www.minstroyrf.gov.ru',
                'https://www.nostroy.ru',
                'https://www.nopriz.ru'
            ],
            'business': [
                'https://www.nalog.gov.ru',
                'https://www.cbr.ru'
            ]
        }
        
        # –¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.document_types = {
            'contracts': ['–¥–æ–≥–æ–≤–æ—Ä', '–∫–æ–Ω—Ç—Ä–∞–∫—Ç', '—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ'],
            'reports': ['–æ—Ç—á–µ—Ç', '—Å–ø—Ä–∞–≤–∫–∞', '–∑–∞–∫–ª—é—á–µ–Ω–∏–µ'],
            'applications': ['–∑–∞—è–≤–ª–µ–Ω–∏–µ', '–∑–∞—è–≤–∫–∞', '—Ö–æ–¥–∞—Ç–∞–π—Å—Ç–≤–æ'],
            'letters': ['–ø–∏—Å—å–º–æ', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', '–∏–∑–≤–µ—â–µ–Ω–∏–µ'],
            'acts': ['–∞–∫—Ç', '–ø—Ä–æ—Ç–æ–∫–æ–ª', '–∑–∞–∫–ª—é—á–µ–Ω–∏–µ'],
            'estimates': ['—Å–º–µ—Ç–∞', '–∫–∞–ª—å–∫—É–ª—è—Ü–∏—è', '—Ä–∞—Å—á–µ—Ç']
        }

    def search_templates(self, query: str, doc_type: str = None, 
                        company_type: str = None, **kwargs) -> Dict[str, Any]:
        """
        –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            doc_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (contracts, reports, etc.)
            company_type: –¢–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ (construction, government, etc.)
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        try:
            print(f"üîç –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤: {query}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            search_query = self._build_search_query(query, doc_type, company_type)
            
            # –ü–æ–∏—Å–∫ –≤ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
            results = []
            
            # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
            for engine, url_template in self.search_engines.items():
                try:
                    engine_results = self._search_in_engine(engine, search_query, url_template)
                    results.extend(engine_results)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ {engine}: {e}")
            
            # –ü–æ–∏—Å–∫ –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
            if company_type and company_type in self.template_sources:
                for source in self.template_sources[company_type]:
                    try:
                        source_results = self._search_in_source(source, search_query)
                        results.extend(source_results)
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ {source}: {e}")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            filtered_results = self._filter_and_rank_results(results, query, doc_type)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∫—ç—à
            self._cache_search_results(query, filtered_results)
            
            return {
                'status': 'success',
                'query': query,
                'total_found': len(filtered_results),
                'results': filtered_results[:20],  # –¢–æ–ø 20 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                'search_time': time.time(),
                'metadata': {
                    'doc_type': doc_type,
                    'company_type': company_type,
                    'sources_searched': len(self.search_engines) + 
                                      (len(self.template_sources.get(company_type, [])) if company_type else 0)
                }
            }
            
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e),
                'query': query
            }

    def download_template(self, template_url: str, template_name: str, 
                         project_info: Dict = None, **kwargs) -> Dict[str, Any]:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ–¥ –ø—Ä–æ–µ–∫—Ç
        
        Args:
            template_url: URL —à–∞–±–ª–æ–Ω–∞
            template_name: –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
            project_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        """
        try:
            print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞: {template_name}")
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            response = requests.get(template_url, timeout=30)
            response.raise_for_status()
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            content_type = response.headers.get('content-type', '')
            file_extension = self._get_file_extension(content_type, template_url)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            original_file = self.templates_dir / f"{template_name}_original{file_extension}"
            with open(original_file, 'wb') as f:
                f.write(response.content)
            
            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ø—Ä–æ–µ–∫—Ç (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ)
            adapted_file = None
            if project_info:
                adapted_file = self._adapt_template_to_project(
                    original_file, template_name, project_info
                )
            
            # –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            analysis = self._analyze_template_content(original_file)
            
            return {
                'status': 'success',
                'original_file': str(original_file),
                'adapted_file': str(adapted_file) if adapted_file else None,
                'file_size': len(response.content),
                'content_type': content_type,
                'analysis': analysis,
                'download_time': datetime.now().isoformat()
            }
            
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e),
                'template_url': template_url
            }

    def adapt_template_to_company(self, template_path: str, company_info: Dict, 
                                 **kwargs) -> Dict[str, Any]:
        """
        –ê–¥–∞–ø—Ç–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
        
        Args:
            template_path: –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É
            company_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
        """
        try:
            template_file = Path(template_path)
            if not template_file.exists():
                raise FileNotFoundError(f"–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {template_path}")
            
            print(f"üè¢ –ê–¥–∞–ø—Ç–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ–¥ –∫–æ–º–ø–∞–Ω–∏—é: {company_info.get('name', 'Unknown')}")
            
            # –ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            content = self._read_template_content(template_file)
            
            # –ó–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
            adapted_content = self._replace_company_placeholders(content, company_info)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            adapted_filename = f"{template_file.stem}_adapted_{company_info.get('name', 'company')}{template_file.suffix}"
            adapted_file = self.generated_dir / adapted_filename
            
            self._save_adapted_content(adapted_file, adapted_content, template_file.suffix)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            metadata = {
                'original_template': str(template_file),
                'company_info': company_info,
                'adaptation_date': datetime.now().isoformat(),
                'placeholders_replaced': self._count_replacements(content, adapted_content)
            }
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            metadata_file = adapted_file.with_suffix('.json')
            with open(metadata_file, 'w', encoding='utf-8') as f:
                json.dump(metadata, f, ensure_ascii=False, indent=2)
            
            return {
                'status': 'success',
                'adapted_file': str(adapted_file),
                'metadata_file': str(metadata_file),
                'replacements_made': metadata['placeholders_replaced'],
                'company_name': company_info.get('name')
            }
            
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e),
                'template_path': template_path
            }

    def get_template_suggestions(self, project_type: str, work_type: str = None, 
                               **kwargs) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
        
        Args:
            project_type: –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞ (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, —Ä–µ–º–æ–Ω—Ç, etc.)
            work_type: –¢–∏–ø —Ä–∞–±–æ—Ç (–∫–æ–Ω–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏—è)
        """
        try:
            suggestions = []
            
            # –ë–∞–∑–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            if '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ' in project_type.lower():
                suggestions.extend([
                    {
                        'name': '–î–æ–≥–æ–≤–æ—Ä —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ä—è–¥–∞',
                        'type': 'contract',
                        'priority': 'high',
                        'description': '–û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç'
                    },
                    {
                        'name': '–ê–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç',
                        'type': 'act',
                        'priority': 'high',
                        'description': '–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤ —Ä–∞–±–æ—Ç'
                    },
                    {
                        'name': '–°–º–µ—Ç–∞ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
                        'type': 'estimate',
                        'priority': 'high',
                        'description': '–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤'
                    }
                ])
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç
            if work_type:
                work_specific = self._get_work_specific_templates(work_type)
                suggestions.extend(work_specific)
            
            # –ü–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
            search_query = f"{project_type} {work_type or ''} —à–∞–±–ª–æ–Ω –¥–æ–∫—É–º–µ–Ω—Ç"
            online_suggestions = self.search_templates(search_query, doc_type='all')
            
            if online_suggestions['status'] == 'success':
                for result in online_suggestions['results'][:5]:
                    suggestions.append({
                        'name': result['title'],
                        'type': 'online',
                        'priority': 'medium',
                        'url': result['url'],
                        'description': result.get('description', '')
                    })
            
            return {
                'status': 'success',
                'project_type': project_type,
                'work_type': work_type,
                'suggestions': suggestions,
                'total_suggestions': len(suggestions)
            }
            
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e),
                'project_type': project_type
            }

    def _build_search_query(self, query: str, doc_type: str, company_type: str) -> str:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        search_terms = [query]
        
        if doc_type and doc_type in self.document_types:
            search_terms.extend(self.document_types[doc_type])
        
        search_terms.extend(['—à–∞–±–ª–æ–Ω', '–æ–±—Ä–∞–∑–µ—Ü', '—Ñ–æ—Ä–º–∞'])
        
        if company_type:
            if company_type == 'construction':
                search_terms.extend(['—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–ø–æ–¥—Ä—è–¥'])
            elif company_type == 'government':
                search_terms.extend(['–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π', '–º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω—ã–π'])
        
        return ' '.join(search_terms)

    def _search_in_engine(self, engine: str, query: str, url_template: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ"""
        results = []
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞
            search_url = url_template.format(quote_plus(query))
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
            response = requests.get(search_url, headers=headers, timeout=10)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            for link in soup.find_all('a', href=True):
                href = link['href']
                if any(ext in href.lower() for ext in ['.doc', '.docx', '.pdf', '.rtf']):
                    results.append({
                        'title': link.get_text(strip=True)[:100],
                        'url': href,
                        'source': engine,
                        'type': 'document'
                    })
                    
                    if len(results) >= 10:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                        break
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ {engine}: {e}")
        
        return results

    def _search_in_source(self, source_url: str, query: str) -> List[Dict]:
        """–ü–æ–∏—Å–∫ –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∫–∞–∂–¥—ã–π —Å–∞–π—Ç
        return []

    def _filter_and_rank_results(self, results: List[Dict], query: str, doc_type: str) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_results = []
        seen_urls = set()
        
        for result in results:
            if result['url'] not in seen_urls:
                unique_results.append(result)
                seen_urls.add(result['url'])
        
        # –†–∞–Ω–∂–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        for result in unique_results:
            score = 0
            title_lower = result['title'].lower()
            
            # –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
            if query.lower() in title_lower:
                score += 10
            
            if doc_type and any(term in title_lower for term in self.document_types.get(doc_type, [])):
                score += 5
            
            if any(word in title_lower for word in ['—à–∞–±–ª–æ–Ω', '–æ–±—Ä–∞–∑–µ—Ü', '—Ñ–æ—Ä–º–∞']):
                score += 3
            
            result['relevance_score'] = score
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        return sorted(unique_results, key=lambda x: x['relevance_score'], reverse=True)

    def _cache_search_results(self, query: str, results: List[Dict]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ –∫—ç—à"""
        cache_file = self.cache_dir / f"search_{hash(query)}.json"
        cache_data = {
            'query': query,
            'timestamp': datetime.now().isoformat(),
            'results': results
        }
        
        with open(cache_file, 'w', encoding='utf-8') as f:
            json.dump(cache_data, f, ensure_ascii=False, indent=2)

    def _get_file_extension(self, content_type: str, url: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        if 'pdf' in content_type:
            return '.pdf'
        elif 'word' in content_type or 'docx' in content_type:
            return '.docx'
        elif 'msword' in content_type or 'doc' in content_type:
            return '.doc'
        elif 'rtf' in content_type:
            return '.rtf'
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ URL
            if url.endswith('.pdf'):
                return '.pdf'
            elif url.endswith('.docx'):
                return '.docx'
            elif url.endswith('.doc'):
                return '.doc'
            else:
                return '.txt'

    def _adapt_template_to_project(self, template_file: Path, template_name: str, 
                                  project_info: Dict) -> Path:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        adapted_filename = f"{template_name}_project_{project_info.get('name', 'unknown')}.docx"
        adapted_file = self.generated_dir / adapted_filename
        
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ)
        import shutil
        shutil.copy2(template_file, adapted_file)
        
        return adapted_file

    def _analyze_template_content(self, template_file: Path) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        return {
            'file_size': template_file.stat().st_size,
            'file_type': template_file.suffix,
            'has_placeholders': True,  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            'estimated_fields': 10,    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            'complexity': 'medium'
        }

    def _read_template_content(self, template_file: Path) -> str:
        """–ß—Ç–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        try:
            return template_file.read_text(encoding='utf-8')
        except:
            return template_file.read_text(encoding='cp1251')

    def _replace_company_placeholders(self, content: str, company_info: Dict) -> str:
        """–ó–∞–º–µ–Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏"""
        replacements = {
            '{COMPANY_NAME}': company_info.get('name', ''),
            '{COMPANY_ADDRESS}': company_info.get('address', ''),
            '{COMPANY_PHONE}': company_info.get('phone', ''),
            '{COMPANY_EMAIL}': company_info.get('email', ''),
            '{COMPANY_INN}': company_info.get('inn', ''),
            '{COMPANY_KPP}': company_info.get('kpp', ''),
            '{DIRECTOR_NAME}': company_info.get('director', ''),
        }
        
        adapted_content = content
        for placeholder, value in replacements.items():
            adapted_content = adapted_content.replace(placeholder, value)
        
        return adapted_content

    def _save_adapted_content(self, adapted_file: Path, content: str, file_extension: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        with open(adapted_file, 'w', encoding='utf-8') as f:
            f.write(content)

    def _count_replacements(self, original: str, adapted: str) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–º–µ–Ω"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
        return len(re.findall(r'\{[A-Z_]+\}', original))

    def _get_work_specific_templates(self, work_type: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç"""
        templates = []
        
        if '—Ñ—É–Ω–¥–∞–º–µ–Ω—Ç' in work_type.lower():
            templates.extend([
                {
                    'name': '–ê–∫—Ç –æ—Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞',
                    'type': 'act',
                    'priority': 'high',
                    'description': '–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–µ–º–∫–∏ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ã—Ö —Ä–∞–±–æ—Ç'
                }
            ])
        
        if '–∫—Ä–æ–≤–ª—è' in work_type.lower():
            templates.extend([
                {
                    'name': '–ê–∫—Ç –ø—Ä–∏–µ–º–∫–∏ –∫—Ä–æ–≤–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç',
                    'type': 'act', 
                    'priority': 'high',
                    'description': '–î–æ–∫—É–º–µ–Ω—Ç –ø—Ä–∏–µ–º–∫–∏ –∫—Ä–æ–≤–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç'
                }
            ])
        
        return templates


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
def search_internet_templates(query: str, doc_type: str = None, 
                            company_type: str = None, **kwargs) -> Dict[str, Any]:
    """
    –ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        doc_type: –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        company_type: –¢–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """
    searcher = InternetTemplateSearcher()
    return searcher.search_templates(query, doc_type, company_type, **kwargs)


def download_and_adapt_template(template_url: str, template_name: str,
                              project_info: Dict = None, **kwargs) -> Dict[str, Any]:
    """
    –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞
    
    Args:
        template_url: URL —à–∞–±–ª–æ–Ω–∞
        template_name: –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        project_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """
    searcher = InternetTemplateSearcher()
    return searcher.download_template(template_url, template_name, project_info, **kwargs)


def adapt_template_for_company(template_path: str, company_info: Dict, 
                             **kwargs) -> Dict[str, Any]:
    """
    –ê–¥–∞–ø—Ç–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ–¥ –∫–æ–º–ø–∞–Ω–∏—é
    
    Args:
        template_path: –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É
        company_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """
    searcher = InternetTemplateSearcher()
    return searcher.adapt_template_to_company(template_path, company_info, **kwargs)


def get_project_template_suggestions(project_type: str, work_type: str = None,
                                   **kwargs) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
    
    Args:
        project_type: –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞
        work_type: –¢–∏–ø —Ä–∞–±–æ—Ç
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """
    searcher = InternetTemplateSearcher()
    return searcher.get_template_suggestions(project_type, work_type, **kwargs)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
UNIFIED_TOOLS = {
    'search_internet_templates': {
        'function': search_internet_templates,
        'description': '–ü–æ–∏—Å–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ',
        'category': 'document_generation',
        'ui_placement': 'tools',
        'parameters': {
            'query': 'str - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å',
            'doc_type': 'str - –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (contracts, reports, etc.)',
            'company_type': 'str - –¢–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ (construction, government, etc.)'
        }
    },
    'download_and_adapt_template': {
        'function': download_and_adapt_template,
        'description': '–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ–¥ –ø—Ä–æ–µ–∫—Ç',
        'category': 'document_generation',
        'ui_placement': 'tools',
        'parameters': {
            'template_url': 'str - URL —à–∞–±–ª–æ–Ω–∞',
            'template_name': 'str - –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞',
            'project_info': 'dict - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ'
        }
    },
    'adapt_template_for_company': {
        'function': adapt_template_for_company,
        'description': '–ê–¥–∞–ø—Ç–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ –ø–æ–¥ –∫–æ–º–ø–∞–Ω–∏—é',
        'category': 'document_generation',
        'ui_placement': 'tools',
        'parameters': {
            'template_path': 'str - –ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É',
            'company_info': 'dict - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏'
        }
    },
    'get_project_template_suggestions': {
        'function': get_project_template_suggestions,
        'description': '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞',
        'category': 'document_generation',
        'ui_placement': 'dashboard',
        'parameters': {
            'project_type': 'str - –¢–∏–ø –ø—Ä–æ–µ–∫—Ç–∞',
            'work_type': 'str - –¢–∏–ø —Ä–∞–±–æ—Ç'
        }
    }
}

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    searcher = InternetTemplateSearcher()
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
    result = searcher.search_templates("–¥–æ–≥–æ–≤–æ—Ä —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–¥—Ä—è–¥–∞", "contracts", "construction")
    print(json.dumps(result, ensure_ascii=False, indent=2))