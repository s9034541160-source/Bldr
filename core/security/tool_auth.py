#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SECURE TOOL CALLING FOR Bldr Empire
===================================

–°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ Arcade
–∏–∑ agents-towards-production.
"""

from typing import Dict, Any, Optional, List, Callable
from dataclasses import dataclass
from enum import Enum
import hashlib
import time
from datetime import datetime, timedelta

from core.exceptions import ToolResourceError, ToolValidationError
from core.structured_logging import get_logger

logger = get_logger("tool_auth")

class AuthType(Enum):
    """–¢–∏–ø—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    NONE = "none"  # –ë–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    API_KEY = "api_key"  # API –∫–ª—é—á
    OAUTH2 = "oauth2"  # OAuth2 —Ç–æ–∫–µ–Ω
    USER_SESSION = "user_session"  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Å—Å–∏—è
    ADMIN_ONLY = "admin_only"  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä

@dataclass
class ToolPermission:
    """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
    tool_name: str
    auth_type: AuthType
    required_scopes: List[str] = None
    rate_limit: int = 100  # –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
    user_whitelist: List[str] = None  # –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    admin_only: bool = False
    
    def __post_init__(self):
        if self.required_scopes is None:
            self.required_scopes = []
        if self.user_whitelist is None:
            self.user_whitelist = []

@dataclass
class UserContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id: str
    username: str
    roles: List[str]
    permissions: List[str]
    session_token: Optional[str] = None
    oauth_token: Optional[str] = None
    api_key: Optional[str] = None

class ToolAuthManager:
    """
    üöÄ –ú–ï–ù–ï–î–ñ–ï–† –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º:
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–æ–≤
    - Rate limiting
    - Audit logging
    """
    
    def __init__(self):
        self.tool_permissions: Dict[str, ToolPermission] = {}
        self.user_sessions: Dict[str, UserContext] = {}
        self.rate_limits: Dict[str, Dict[str, Any]] = {}  # user_id -> {tool_name: {count, reset_time}}
        self.logger = get_logger("tool_auth")
    
    def register_tool_permission(self, permission: ToolPermission):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        self.tool_permissions[permission.tool_name] = permission
        self.logger.log_agent_activity(
            agent_name="tool_auth",
            action="permission_registered",
            query="",
            result_status="success",
            context={
                "tool_name": permission.tool_name,
                "auth_type": permission.auth_type.value,
                "rate_limit": permission.rate_limit
            }
        )
    
    def authenticate_user(self, user_id: str, username: str, 
                        roles: List[str], permissions: List[str],
                        session_token: Optional[str] = None,
                        oauth_token: Optional[str] = None,
                        api_key: Optional[str] = None) -> UserContext:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_context = UserContext(
            user_id=user_id,
            username=username,
            roles=roles,
            permissions=permissions,
            session_token=session_token,
            oauth_token=oauth_token,
            api_key=api_key
        )
        
        self.user_sessions[user_id] = user_context
        
        self.logger.log_agent_activity(
            agent_name="tool_auth",
            action="user_authenticated",
            query="",
            result_status="success",
            context={
                "user_id": user_id,
                "username": username,
                "roles": roles,
                "permissions_count": len(permissions)
            }
        )
        
        return user_context
    
    def check_tool_access(self, user_id: str, tool_name: str, 
                         additional_context: Optional[Dict[str, Any]] = None) -> bool:
        """
        üéØ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ê –ö –ò–ù–°–¢–†–£–ú–ï–ù–¢–£
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            tool_name: –ò–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            additional_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        
        Returns:
            True –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω
        
        Raises:
            ToolResourceError: –ü—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        if tool_name not in self.tool_permissions:
            # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π - —Ä–∞–∑—Ä–µ—à–∞–µ–º
            return True
        
        permission = self.tool_permissions[tool_name]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in self.user_sessions:
            raise ToolResourceError(
                tool_name, "user_session", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω"
            )
        
        user_context = self.user_sessions[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if permission.auth_type == AuthType.NONE:
            return True
        
        elif permission.auth_type == AuthType.ADMIN_ONLY:
            if "admin" not in user_context.roles:
                raise ToolResourceError(
                    tool_name, "admin_required", "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
                )
        
        elif permission.auth_type == AuthType.API_KEY:
            if not user_context.api_key:
                raise ToolResourceError(
                    tool_name, "api_key_required", "–¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á"
                )
        
        elif permission.auth_type == AuthType.OAUTH2:
            if not user_context.oauth_token:
                raise ToolResourceError(
                    tool_name, "oauth_required", "–¢—Ä–µ–±—É–µ—Ç—Å—è OAuth2 —Ç–æ–∫–µ–Ω"
                )
        
        elif permission.auth_type == AuthType.USER_SESSION:
            if not user_context.session_token:
                raise ToolResourceError(
                    tool_name, "session_required", "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å–µ—Å—Å–∏—è"
                )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫
        if permission.user_whitelist and user_id not in permission.user_whitelist:
            raise ToolResourceError(
                tool_name, "whitelist_required", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–µ–ª–æ–º —Å–ø–∏—Å–∫–µ"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limiting
        if not self._check_rate_limit(user_id, tool_name, permission.rate_limit):
            raise ToolResourceError(
                tool_name, "rate_limit_exceeded", "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"
            )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –¥–æ—Å—Ç—É–ø
        self.logger.log_agent_activity(
            agent_name="tool_auth",
            action="tool_access_granted",
            query=tool_name,
            result_status="success",
            context={
                "user_id": user_id,
                "tool_name": tool_name,
                "auth_type": permission.auth_type.value
            }
        )
        
        return True
    
    def _check_rate_limit(self, user_id: str, tool_name: str, rate_limit: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting"""
        current_time = time.time()
        rate_key = f"{user_id}:{tool_name}"
        
        if rate_key not in self.rate_limits:
            self.rate_limits[rate_key] = {
                "count": 0,
                "reset_time": current_time + 3600  # –°–±—Ä–æ—Å —á–µ—Ä–µ–∑ —á–∞—Å
            }
        
        rate_data = self.rate_limits[rate_key]
        
        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ—Å–ª–∏ –ø—Ä–æ—à–µ–ª —á–∞—Å
        if current_time > rate_data["reset_time"]:
            rate_data["count"] = 0
            rate_data["reset_time"] = current_time + 3600
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if rate_data["count"] >= rate_limit:
            return False
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        rate_data["count"] += 1
        
        return True
    
    def get_user_permissions(self, user_id: str) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_sessions:
            return []
        
        user_context = self.user_sessions[user_id]
        return user_context.permissions
    
    def revoke_user_session(self, user_id: str):
        """–û—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å–µ—Å—Å–∏–∏"""
        if user_id in self.user_sessions:
            del self.user_sessions[user_id]
            self.logger.log_agent_activity(
                agent_name="tool_auth",
                action="session_revoked",
                query="",
                result_status="success",
                context={"user_id": user_id}
            )
    
    def get_tool_permissions_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        summary = {}
        
        for tool_name, permission in self.tool_permissions.items():
            summary[tool_name] = {
                "auth_type": permission.auth_type.value,
                "rate_limit": permission.rate_limit,
                "admin_only": permission.admin_only,
                "whitelist_size": len(permission.user_whitelist)
            }
        
        return summary

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
_global_auth_manager: Optional[ToolAuthManager] = None

def get_auth_manager() -> ToolAuthManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    global _global_auth_manager
    if _global_auth_manager is None:
        _global_auth_manager = ToolAuthManager()
    return _global_auth_manager
