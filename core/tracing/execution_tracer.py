#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
EXECUTION TRACER FOR Bldr Empire
===============================

–°–∏—Å—Ç–µ–º–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
–∏–∑ agents-towards-production.
"""

import uuid
import time
import traceback
from typing import Dict, Any, List, Optional, Union
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
import json

from core.structured_logging import get_logger

logger = get_logger("execution_tracer")

class TraceStatus(str, Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
    STARTED = "started"
    COMPLETED = "completed"
    FAILED = "failed"
    TIMEOUT = "timeout"
    CANCELLED = "cancelled"

class TraceType(str, Enum):
    """–¢–∏–ø—ã —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
    TOOL_EXECUTION = "tool_execution"
    AGENT_CALL = "agent_call"
    RAG_QUERY = "rag_query"
    LLM_CALL = "llm_call"
    COORDINATOR_PLAN = "coordinator_plan"
    USER_INTERACTION = "user_interaction"

@dataclass
class TraceSpan:
    """–°–ø–∞–Ω —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
    span_id: str
    parent_id: Optional[str]
    trace_id: str
    operation_name: str
    trace_type: TraceType
    status: TraceStatus
    start_time: datetime
    end_time: Optional[datetime] = None
    duration_ms: Optional[float] = None
    metadata: Dict[str, Any] = field(default_factory=dict)
    error: Optional[str] = None
    traceback: Optional[str] = None
    tags: Dict[str, str] = field(default_factory=dict)
    
    def finish(self, status: TraceStatus = TraceStatus.COMPLETED, error: Exception = None):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–ø–∞–Ω–∞"""
        self.end_time = datetime.now()
        self.duration_ms = (self.end_time - self.start_time).total_seconds() * 1000
        self.status = status
        
        if error:
            self.error = str(error)
            self.traceback = traceback.format_exc()
            self.status = TraceStatus.FAILED
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "span_id": self.span_id,
            "parent_id": self.parent_id,
            "trace_id": self.trace_id,
            "operation_name": self.operation_name,
            "trace_type": self.trace_type.value,
            "status": self.status.value,
            "start_time": self.start_time.isoformat(),
            "end_time": self.end_time.isoformat() if self.end_time else None,
            "duration_ms": self.duration_ms,
            "metadata": self.metadata,
            "error": self.error,
            "traceback": self.traceback,
            "tags": self.tags
        }

class ExecutionTracer:
    """
    üöÄ –°–ò–°–¢–ï–ú–ê –¢–†–ê–°–°–ò–†–û–í–ö–ò –í–´–ü–û–õ–ù–ï–ù–ò–Ø
    
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    
    def __init__(self):
        self.active_spans: Dict[str, TraceSpan] = {}
        self.completed_spans: List[TraceSpan] = []
        self.logger = get_logger("execution_tracer")
    
    def start_span(self, operation_name: str, trace_type: TraceType, 
                   parent_span_id: Optional[str] = None,
                   metadata: Dict[str, Any] = None,
                   tags: Dict[str, str] = None) -> str:
        """
        üéØ –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –°–ü–ê–ù–ê
        
        Args:
            operation_name: –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            trace_type: –¢–∏–ø —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
            parent_span_id: ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–ø–∞–Ω–∞
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            tags: –¢–µ–≥–∏
        
        Returns:
            ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∞–Ω–∞
        """
        span_id = str(uuid.uuid4())
        trace_id = parent_span_id or str(uuid.uuid4())
        
        span = TraceSpan(
            span_id=span_id,
            parent_id=parent_span_id,
            trace_id=trace_id,
            operation_name=operation_name,
            trace_type=trace_type,
            status=TraceStatus.STARTED,
            start_time=datetime.now(),
            metadata=metadata or {},
            tags=tags or {}
        )
        
        self.active_spans[span_id] = span
        
        self.logger.log_agent_activity(
            agent_name="execution_tracer",
            action="span_started",
            query=operation_name,
            result_status="started",
            context={
                "span_id": span_id,
                "trace_id": trace_id,
                "operation_name": operation_name,
                "trace_type": trace_type.value
            }
        )
        
        return span_id
    
    def finish_span(self, span_id: str, status: TraceStatus = TraceStatus.COMPLETED, 
                   error: Exception = None, metadata: Dict[str, Any] = None):
        """
        üéØ –ó–ê–í–ï–†–®–ï–ù–ò–ï –°–ü–ê–ù–ê
        
        Args:
            span_id: ID —Å–ø–∞–Ω–∞
            status: –°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            error: –û—à–∏–±–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            metadata: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        """
        if span_id not in self.active_spans:
            self.logger.log_error(
                Exception(f"Span {span_id} not found"),
                {"span_id": span_id}
            )
            return
        
        span = self.active_spans[span_id]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        if metadata:
            span.metadata.update(metadata)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–ø–∞–Ω
        span.finish(status, error)
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
        del self.active_spans[span_id]
        self.completed_spans.append(span)
        
        self.logger.log_agent_activity(
            agent_name="execution_tracer",
            action="span_finished",
            query=span.operation_name,
            result_status=status.value,
            context={
                "span_id": span_id,
                "trace_id": span.trace_id,
                "duration_ms": span.duration_ms,
                "status": status.value
            }
        )
    
    def add_span_metadata(self, span_id: str, metadata: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫ —Å–ø–∞–Ω—É"""
        if span_id in self.active_spans:
            self.active_spans[span_id].metadata.update(metadata)
    
    def add_span_tags(self, span_id: str, tags: Dict[str, str]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∫ —Å–ø–∞–Ω—É"""
        if span_id in self.active_spans:
            self.active_spans[span_id].tags.update(tags)
    
    def get_trace(self, trace_id: str) -> List[TraceSpan]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ø–∞–Ω–æ–≤ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏"""
        return [span for span in self.completed_spans if span.trace_id == trace_id]
    
    def get_active_spans(self) -> List[TraceSpan]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø–∞–Ω–æ–≤"""
        return list(self.active_spans.values())
    
    def get_trace_summary(self, trace_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–µ"""
        spans = self.get_trace(trace_id)
        
        if not spans:
            return {"error": "Trace not found"}
        
        total_duration = sum(span.duration_ms or 0 for span in spans)
        failed_spans = [span for span in spans if span.status == TraceStatus.FAILED]
        
        return {
            "trace_id": trace_id,
            "total_spans": len(spans),
            "total_duration_ms": total_duration,
            "failed_spans": len(failed_spans),
            "success_rate": (len(spans) - len(failed_spans)) / len(spans) if spans else 0,
            "spans": [span.to_dict() for span in spans]
        }
    
    def get_performance_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.completed_spans:
            return {"message": "No completed spans"}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
        by_type = {}
        for span in self.completed_spans:
            trace_type = span.trace_type.value
            if trace_type not in by_type:
                by_type[trace_type] = []
            by_type[trace_type].append(span)
        
        metrics = {}
        for trace_type, spans in by_type.items():
            durations = [span.duration_ms for span in spans if span.duration_ms]
            failed_count = len([span for span in spans if span.status == TraceStatus.FAILED])
            
            metrics[trace_type] = {
                "total_operations": len(spans),
                "failed_operations": failed_count,
                "success_rate": (len(spans) - failed_count) / len(spans) if spans else 0,
                "avg_duration_ms": sum(durations) / len(durations) if durations else 0,
                "min_duration_ms": min(durations) if durations else 0,
                "max_duration_ms": max(durations) if durations else 0
            }
        
        return metrics

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π—Å–µ—Ä
_global_tracer: Optional[ExecutionTracer] = None

def get_tracer() -> ExecutionTracer:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–µ—Ä–∞"""
    global _global_tracer
    if _global_tracer is None:
        _global_tracer = ExecutionTracer()
    return _global_tracer

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
def trace_execution(operation_name: str, trace_type: TraceType):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            tracer = get_tracer()
            span_id = tracer.start_span(
                operation_name=operation_name,
                trace_type=trace_type,
                metadata={"function": func.__name__}
            )
            
            try:
                result = func(*args, **kwargs)
                tracer.finish_span(span_id, TraceStatus.COMPLETED)
                return result
            except Exception as e:
                tracer.finish_span(span_id, TraceStatus.FAILED, e)
                raise
        
        return wrapper
    return decorator
