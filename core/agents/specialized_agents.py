#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SPECIALIZED AGENTS FOR Bldr Empire
==================================

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã —Å —á–µ—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ agents-towards-production.
"""

from typing import Dict, Any, List, Optional
from core.agents.base_agent import BaseAgent, Task, TaskResult
from core.exceptions import AgentExecutionError
from core.structured_logging import get_logger

class ChiefEngineerAgent(BaseAgent):
    """
    üèóÔ∏è –ê–ì–ï–ù–¢ –ì–õ–ê–í–ù–û–ì–û –ò–ù–ñ–ï–ù–ï–†–ê
    
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã, –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    
    def __init__(self, tools_system=None):
        super().__init__("chief_engineer", "–ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã")
        self.tools_system = tools_system
        self.logger = get_logger("chief_engineer")
    
    async def process(self, task: Task) -> TaskResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –≥–ª–∞–≤–Ω–æ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏ –∏ –≤—ã–±–∏—Ä–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            if "–Ω–æ—Ä–º–∞" in task.description.lower() or "—Å–ø" in task.description.lower():
                # –ü–æ–∏—Å–∫ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                result = await self._search_norms(task)
            elif "—Ä–∞—Å—á–µ—Ç" in task.description.lower() or "–ø—Ä–æ–µ–∫—Ç" in task.description.lower():
                # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
                result = await self._technical_calculations(task)
            elif "–∞–Ω–∞–ª–∏–∑" in task.description.lower():
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤
                result = await self._project_analysis(task)
            else:
                # –û–±—â–∏–π –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
                result = await self._general_search(task)
            
            return TaskResult(
                task_id=task.id,
                success=True,
                result_data=result,
                metadata={"agent": "chief_engineer", "task_type": "technical"}
            )
            
        except Exception as e:
            raise AgentExecutionError(
                self.name,
                task.description,
                f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏: {str(e)}"
            )
    
    async def _search_norms(self, task: Task) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        if not self.tools_system:
            return {"error": "–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
        
        query = task.input_data.get("query", task.description)
        result = await self.tools_system.execute_tool_async(
            "search_norms",
            query=query,
            timeout_seconds=30
        )
        return result.data if hasattr(result, 'data') else str(result)
    
    async def _technical_calculations(self, task: Task) -> Dict[str, Any]:
        """–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã"""
        if not self.tools_system:
            return {"error": "–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã
        result = await self.tools_system.execute_tool_async(
            "search_rag_database",
            query=task.description,
            timeout_seconds=30
        )
        return result.data if hasattr(result, 'data') else str(result)
    
    async def _project_analysis(self, task: Task) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        if not self.tools_system:
            return {"error": "–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
        
        result = await self.tools_system.execute_tool_async(
            "search_rag_database",
            query=task.description,
            timeout_seconds=30
        )
        return result.data if hasattr(result, 'data') else str(result)
    
    async def _general_search(self, task: Task) -> Dict[str, Any]:
        """–û–±—â–∏–π –ø–æ–∏—Å–∫"""
        if not self.tools_system:
            return {"error": "–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
        
        result = await self.tools_system.execute_tool_async(
            "search_rag_database",
            query=task.description,
            timeout_seconds=30
        )
        return result.data if hasattr(result, 'data') else str(result)
    
    def can_handle(self, task: Task) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        description_lower = task.description.lower()
        return any(keyword in description_lower for keyword in [
            "–Ω–æ—Ä–º–∞", "—Å–ø", "—Å–Ω–∏–ø", "–≥–æ—Å—Ç", "—Ä–∞—Å—á–µ—Ç", "–ø—Ä–æ–µ–∫—Ç", "–∞–Ω–∞–ª–∏–∑",
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π", "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π", "–∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π"
        ])
    
    def get_capabilities(self) -> List[str]:
        """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
        return [
            "–ü–æ–∏—Å–∫ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã",
            "–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤",
            "–†–∞–±–æ—Ç–∞ —Å –°–ü, –°–ù–∏–ü, –ì–û–°–¢",
            "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã"
        ]


class AnalystAgent(BaseAgent):
    """
    üìä –ê–ì–ï–ù–¢ –ê–ù–ê–õ–ò–¢–ò–ö–ê
    
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –°–º–µ—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑, —Å—Ç–æ–∏–º–æ—Å—Ç—å
    """
    
    def __init__(self, tools_system=None):
        super().__init__("analyst", "–°–º–µ—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑")
        self.tools_system = tools_system
        self.logger = get_logger("analyst")
    
    async def process(self, task: Task) -> TaskResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
            if "—Å–º–µ—Ç–∞" in task.description.lower() or "—Å—Ç–æ–∏–º–æ—Å—Ç—å" in task.description.lower():
                result = await self._cost_estimation(task)
            elif "–±—é–¥–∂–µ—Ç" in task.description.lower():
                result = await self._budget_analysis(task)
            elif "—Ñ–∏–Ω–∞–Ω—Å" in task.description.lower():
                result = await self._financial_analysis(task)
            else:
                result = await self._general_analysis(task)
            
            return TaskResult(
                task_id=task.id,
                success=True,
                result_data=result,
                metadata={"agent": "analyst", "task_type": "financial"}
            )
            
        except Exception as e:
            raise AgentExecutionError(
                self.name,
                task.description,
                f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {str(e)}"
            )
    
    async def _cost_estimation(self, task: Task) -> Dict[str, Any]:
        """–°–º–µ—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã"""
        if not self.tools_system:
            return {"error": "–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
        
        result = await self.tools_system.execute_tool_async(
            "estimate_cost",
            query=task.description,
            timeout_seconds=45
        )
        return result.data if hasattr(result, 'data') else str(result)
    
    async def _budget_analysis(self, task: Task) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –±—é–¥–∂–µ—Ç–∞"""
        if not self.tools_system:
            return {"error": "–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
        
        result = await self.tools_system.execute_tool_async(
            "search_rag_database",
            query=task.description,
            timeout_seconds=30
        )
        return result.data if hasattr(result, 'data') else str(result)
    
    async def _financial_analysis(self, task: Task) -> Dict[str, Any]:
        """–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑"""
        if not self.tools_system:
            return {"error": "–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
        
        result = await self.tools_system.execute_tool_async(
            "search_rag_database",
            query=task.description,
            timeout_seconds=30
        )
        return result.data if hasattr(result, 'data') else str(result)
    
    async def _general_analysis(self, task: Task) -> Dict[str, Any]:
        """–û–±—â–∏–π –∞–Ω–∞–ª–∏–∑"""
        if not self.tools_system:
            return {"error": "–°–∏—Å—Ç–µ–º–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
        
        result = await self.tools_system.execute_tool_async(
            "search_rag_database",
            query=task.description,
            timeout_seconds=30
        )
        return result.data if hasattr(result, 'data') else str(result)
    
    def can_handle(self, task: Task) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        description_lower = task.description.lower()
        return any(keyword in description_lower for keyword in [
            "—Å–º–µ—Ç–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ü–µ–Ω–∞", "–±—é–¥–∂–µ—Ç", "—Ñ–∏–Ω–∞–Ω—Å", "—Ä–∞—Å—á–µ—Ç",
            "—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π", "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π", "—Å—Ç–æ–∏–º–æ—Å—Ç–Ω–æ–π"
        ])
    
    def get_capabilities(self) -> List[str]:
        """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
        return [
            "–°–º–µ—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã",
            "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑",
            "–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏",
            "–ë—é–¥–∂–µ—Ç–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã"
        ]


class CoordinatorAgent(BaseAgent):
    """
    üéØ –ê–ì–ï–ù–¢ –ö–û–û–†–î–ò–ù–ê–¢–û–†–ê
    
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è, –æ–±—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã
    """
    
    def __init__(self, tools_system=None):
        super().__init__("coordinator", "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è")
        self.tools_system = tools_system
        self.logger = get_logger("coordinator")
    
    async def process(self, task: Task) -> TaskResult:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏
            if "–ø—Ä–∏–≤–µ—Ç" in task.description.lower() or "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π" in task.description.lower():
                result = await self._greeting_response(task)
            elif "—Ä–∞—Å—Å–∫–∞–∂–∏" in task.description.lower() and "—Å–µ–±–µ" in task.description.lower():
                result = await self._self_introduction(task)
            elif "–ø–æ–º–æ—â—å" in task.description.lower() or "–ø–æ–º–æ–≥–∏" in task.description.lower():
                result = await self._help_response(task)
            else:
                result = await self._general_response(task)
            
            return TaskResult(
                task_id=task.id,
                success=True,
                result_data=result,
                metadata={"agent": "coordinator", "task_type": "coordination"}
            )
            
        except Exception as e:
            raise AgentExecutionError(
                self.name,
                task.description,
                f"–û—à–∏–±–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏: {str(e)}"
            )
    
    async def _greeting_response(self, task: Task) -> str:
        """–û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"""
        return "–ü—Ä–∏–≤–µ—Ç! –Ø –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã Bldr Empire. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
    
    async def _self_introduction(self, task: Task) -> str:
        """–°–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è"""
        return """–Ø - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã Bldr Empire, –º–Ω–æ–≥–æ–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏. 
        –ú–æ—è –∑–∞–¥–∞—á–∞ - –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤:
        - –ì–ª–∞–≤–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä (–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã)
        - –ê–Ω–∞–ª–∏—Ç–∏–∫ (—Å–º–µ—Ç–Ω—ã–µ —Ä–∞—Å—á–µ—Ç—ã, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑)
        
        –Ø –ø–æ–º–æ–≥–∞—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."""
    
    async def _help_response(self, task: Task) -> str:
        """–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏"""
        return """–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:
        - –ü–æ–∏—Å–∫–æ–º –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–°–ü, –°–ù–∏–ü, –ì–û–°–¢)
        - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        - –°–º–µ—Ç–Ω—ã–º–∏ —Ä–∞—Å—á–µ—Ç–∞–º–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
        - –ê–Ω–∞–ª–∏–∑–æ–º —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
        
        –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ, –∏ —è –Ω–∞–ø—Ä–∞–≤–ª—é –∑–∞–ø—Ä–æ—Å –Ω—É–∂–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É."""
    
    async def _general_response(self, task: Task) -> str:
        """–û–±—â–∏–π –æ—Ç–≤–µ—Ç"""
        return "–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ–≥–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞."
    
    def can_handle(self, task: Task) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        description_lower = task.description.lower()
        return any(keyword in description_lower for keyword in [
            "–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", "—Ä–∞—Å—Å–∫–∞–∂–∏", "–ø–æ–º–æ—â—å", "–ø–æ–º–æ–≥–∏",
            "–∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è", "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "–æ–±—â–∏–π"
        ])
    
    def get_capabilities(self) -> List[str]:
        """–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
        return [
            "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á",
            "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤",
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
            "–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á",
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º"
        ]
