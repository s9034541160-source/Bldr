#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BENCHMARK INTEGRATION FOR Bldr
==============================

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ Bldr
–¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
"""

import logging
from typing import Dict, Any, Optional
from core.agents.benchmark_system import BldrBenchmarkSystem, BenchmarkResult

logger = logging.getLogger(__name__)

class BenchmarkIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±–µ–Ω—á–º–∞—Ä–∫–æ–≤ –≤ Bldr"""
    
    def __init__(self, coordinator_agent, tools_system):
        self.coordinator_agent = coordinator_agent
        self.tools_system = tools_system
        self.benchmark_system = BldrBenchmarkSystem()
        self.auto_benchmark_enabled = True
        self.last_benchmark_run = None
    
    def run_quick_benchmark(self) -> Dict[str, Any]:
        """–ë—ã—Å—Ç—Ä—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        test_queries = [
            "–ø—Ä–∏–≤–µ—Ç",
            "–ø–æ–¥—Å–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –°–ü –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–º –¥–æ—Ä–æ–≥–∞–º",
            "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ"
        ]
        
        results = []
        for query in test_queries:
            try:
                response = self.coordinator_agent.process_request(query)
                results.append({
                    "query": query,
                    "response_length": len(response),
                    "has_error": "–æ—à–∏–±–∫–∞" in response.lower() or "error" in response.lower(),
                    "is_generic": response.strip() == "–ì–æ—Ç–æ–≤–æ." or len(response) < 20
                })
            except Exception as e:
                results.append({
                    "query": query,
                    "error": str(e),
                    "has_error": True
                })
        
        return {
            "quick_benchmark_results": results,
            "system_status": "healthy" if all(not r.get("has_error", False) for r in results) else "issues_detected"
        }
    
    def run_full_benchmark(self) -> Dict[str, Any]:
        """–ü–æ–ª–Ω—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞...")
        
        try:
            results = self.benchmark_system.run_all_benchmarks(self.coordinator_agent)
            self.last_benchmark_run = results
            return results
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–ª–Ω–æ–≥–æ –±–µ–Ω—á–º–∞—Ä–∫–∞: {e}")
            return {"error": str(e)}
    
    def get_performance_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.last_benchmark_run:
            return {"message": "–ë–µ–Ω—á–º–∞—Ä–∫ –µ—â–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª—Å—è"}
        
        summary = self.last_benchmark_run.get("summary", {})
        return {
            "success_rate": summary.get("success_rate", 0),
            "avg_execution_time": summary.get("avg_execution_time", 0),
            "avg_accuracy": summary.get("avg_accuracy", 0),
            "total_tests": summary.get("total_tests", 0),
            "performance_grade": self._calculate_performance_grade(summary)
        }
    
    def _calculate_performance_grade(self, summary: Dict[str, Any]) -> str:
        """–í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        success_rate = summary.get("success_rate", 0)
        avg_accuracy = summary.get("avg_accuracy", 0)
        
        if success_rate >= 0.9 and avg_accuracy >= 0.8:
            return "A+ (–û—Ç–ª–∏—á–Ω–æ)"
        elif success_rate >= 0.8 and avg_accuracy >= 0.7:
            return "A (–•–æ—Ä–æ—à–æ)"
        elif success_rate >= 0.7 and avg_accuracy >= 0.6:
            return "B (–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ)"
        elif success_rate >= 0.6 and avg_accuracy >= 0.5:
            return "C (–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è)"
        else:
            return "D (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã)"
    
    def auto_benchmark_if_needed(self) -> Optional[Dict[str, Any]]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        if not self.auto_benchmark_enabled:
            return None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—ã–π –±–µ–Ω—á–º–∞—Ä–∫ –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
        # (—ç—Ç–æ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
        return self.run_quick_benchmark()
