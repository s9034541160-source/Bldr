#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
AGENT MANAGER FOR Bldr Empire
=============================

–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤ —Å —á–µ—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ agents-towards-production.
"""

from typing import Dict, Any, List, Optional, Type
from core.agents.base_agent import BaseAgent, Task, TaskResult
from core.agents.specialized_agents import ChiefEngineerAgent, AnalystAgent, CoordinatorAgent
from core.exceptions import AgentCommunicationError, AgentPlanningError
from core.structured_logging import get_logger

logger = get_logger("agent_manager")

class AgentManager:
    """
    üöÄ –ú–ï–ù–ï–î–ñ–ï–† –ê–ì–ï–ù–¢–û–í
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã —Å —á–µ—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:
    - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏
    - –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á –∫ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –∞–≥–µ–Ω—Ç–∞–º
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
    """
    
    def __init__(self, tools_system=None):
        self.tools_system = tools_system
        self.agents: Dict[str, BaseAgent] = {}
        self.logger = get_logger("agent_manager")
        self._initialize_agents()
    
    def _initialize_agents(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        self.agents["chief_engineer"] = ChiefEngineerAgent(self.tools_system)
        self.agents["analyst"] = AnalystAgent(self.tools_system)
        self.agents["coordinator"] = CoordinatorAgent(self.tools_system)
        
        self.logger.log_agent_activity(
            agent_name="agent_manager",
            action="agents_initialized",
            query="",
            result_status="success",
            context={"agents_count": len(self.agents)}
        )
    
    def register_agent(self, agent: BaseAgent):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        self.agents[agent.name] = agent
        self.logger.log_agent_activity(
            agent_name="agent_manager",
            action="agent_registered",
            query="",
            result_status="success",
            context={"agent_name": agent.name, "specialization": agent.specialization}
        )
    
    def get_agent(self, agent_name: str) -> Optional[BaseAgent]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –ø–æ –∏–º–µ–Ω–∏"""
        return self.agents.get(agent_name)
    
    def get_available_agents(self) -> List[BaseAgent]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        return [agent for agent in self.agents.values() if agent.is_available]
    
    def find_best_agent(self, task: Task) -> Optional[BaseAgent]:
        """
        üéØ –ü–û–ò–°–ö –õ–£–ß–®–ï–ì–û –ê–ì–ï–ù–¢–ê –î–õ–Ø –ó–ê–î–ê–ß–ò
        
        Args:
            task: –ó–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Returns:
            –ü–æ–¥—Ö–æ–¥—è—â–∏–π –∞–≥–µ–Ω—Ç –∏–ª–∏ None
        """
        available_agents = self.get_available_agents()
        
        if not available_agents:
            raise AgentPlanningError(
                "agent_manager",
                task.description,
                "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"
            )
        
        # –ò—â–µ–º –∞–≥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É
        for agent in available_agents:
            if agent.can_handle(task):
                self.logger.log_agent_activity(
                    agent_name="agent_manager",
                    action="agent_selected",
                    query=task.description,
                    result_status="success",
                    context={
                        "selected_agent": agent.name,
                        "task_id": task.id,
                        "specialization": agent.specialization
                    }
                )
                return agent
        
        # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
        coordinator = self.agents.get("coordinator")
        if coordinator and coordinator.is_available:
            self.logger.log_agent_activity(
                agent_name="agent_manager",
                action="fallback_to_coordinator",
                query=task.description,
                result_status="success",
                context={"task_id": task.id}
            )
            return coordinator
        
        return None
    
    async def execute_task(self, task: Task) -> TaskResult:
        """
        üöÄ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–î–ê–ß–ò –ß–ï–†–ï–ó –ü–û–î–•–û–î–Ø–©–ï–ì–û –ê–ì–ï–ù–¢–ê
        
        Args:
            task: –ó–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
            agent = self.find_best_agent(task)
            
            if not agent:
                return TaskResult(
                    task_id=task.id,
                    success=False,
                    error_message="–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"
                )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
            result = await agent.execute_task(task)
            
            self.logger.log_agent_activity(
                agent_name="agent_manager",
                action="task_executed",
                query=task.description,
                result_status="success" if result.success else "error",
                context={
                    "task_id": task.id,
                    "executing_agent": agent.name,
                    "success": result.success
                }
            )
            
            return result
            
        except Exception as e:
            self.logger.log_error(e, {"task_id": task.id})
            return TaskResult(
                task_id=task.id,
                success=False,
                error_message=f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {str(e)}"
            )
    
    async def execute_multiple_tasks(self, tasks: List[Task], max_concurrent: int = 3) -> Dict[str, TaskResult]:
        """
        üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ï –í–´–ü–û–õ–ù–ï–ù–ò–ï –ù–ï–°–ö–û–õ–¨–ö–ò–• –ó–ê–î–ê–ß
        
        Args:
            tasks: –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            max_concurrent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–π
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        import asyncio
        
        semaphore = asyncio.Semaphore(max_concurrent)
        results = {}
        
        async def execute_single_task(task):
            async with semaphore:
                result = await self.execute_task(task)
                return task.id, result
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks_coroutines = [execute_single_task(task) for task in tasks]
        completed_tasks = await asyncio.gather(*tasks_coroutines, return_exceptions=True)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for task_result in completed_tasks:
            if isinstance(task_result, Exception):
                self.logger.log_error(task_result, {"context": "parallel_execution"})
            else:
                task_id, result = task_result
                results[task_id] = result
        
        return results
    
    def get_system_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤"""
        status = {
            "total_agents": len(self.agents),
            "available_agents": len(self.get_available_agents()),
            "agents": {}
        }
        
        for agent_name, agent in self.agents.items():
            status["agents"][agent_name] = {
                "status": agent.get_status(),
                "performance": agent.get_performance_metrics()
            }
        
        return status
    
    def get_agent_performance_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
        summary = {}
        
        for agent_name, agent in self.agents.items():
            metrics = agent.get_performance_metrics()
            summary[agent_name] = {
                "specialization": agent.specialization,
                "is_available": agent.is_available,
                "performance": metrics
            }
        
        return summary
    
    def set_agent_availability(self, agent_name: str, available: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
        if agent_name in self.agents:
            self.agents[agent_name].set_availability(available)
            self.logger.log_agent_activity(
                agent_name="agent_manager",
                action="agent_availability_changed",
                query="",
                result_status="success",
                context={"agent_name": agent_name, "available": available}
            )
    
    def get_agent_capabilities(self) -> Dict[str, List[str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        capabilities = {}
        
        for agent_name, agent in self.agents.items():
            capabilities[agent_name] = {
                "specialization": agent.specialization,
                "capabilities": agent.get_capabilities()
            }
        
        return capabilities
