#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
BASE AGENT FOR Bldr Empire
===========================

–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å —á–µ—Ç–∫–∏–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–∑ agents-towards-production.
"""

from abc import ABC, abstractmethod
from typing import Dict, Any, List, Optional, Union
from dataclasses import dataclass
from datetime import datetime
import logging

from core.exceptions import AgentException, AgentPlanningError, AgentExecutionError
from core.structured_logging import get_logger

logger = get_logger("base_agent")

@dataclass
class Task:
    """–ó–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–º"""
    id: str
    description: str
    input_data: Dict[str, Any]
    priority: int = 1  # 1 = –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    timeout_seconds: Optional[int] = None
    metadata: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}

@dataclass
class TaskResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    task_id: str
    success: bool
    result_data: Any = None
    error_message: Optional[str] = None
    execution_time_ms: float = 0.0
    metadata: Dict[str, Any] = None
    
    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}

class BaseAgent(ABC):
    """
    üöÄ –ë–ê–ó–û–í–´–ô –ö–õ–ê–°–° –ê–ì–ï–ù–¢–ê
    
    –ß–µ—Ç–∫–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏:
    - –ö–∞–∂–¥—ã–π –∞–≥–µ–Ω—Ç –∏–º–µ–µ—Ç —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    - –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    - –ò–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    """
    
    def __init__(self, name: str, specialization: str):
        self.name = name
        self.specialization = specialization
        self.logger = get_logger(f"agent_{name}")
        self.is_available = True
        self.current_tasks: List[Task] = []
        self.completed_tasks: List[TaskResult] = []
    
    @abstractmethod
    async def process(self, task: Task) -> TaskResult:
        """
        üéØ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–î–ê–ß
        
        Args:
            task: –ó–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Returns:
            TaskResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Raises:
            AgentExecutionError: –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        pass
    
    @abstractmethod
    def can_handle(self, task: Task) -> bool:
        """
        üéØ –ü–†–û–í–ï–†–ö–ê –°–ü–û–°–û–ë–ù–û–°–¢–ò –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–î–ê–ß–ò
        
        Args:
            task: –ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        Returns:
            True –µ—Å–ª–∏ –∞–≥–µ–Ω—Ç –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É
        """
        pass
    
    @abstractmethod
    def get_capabilities(self) -> List[str]:
        """
        üéØ –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–û–°–û–ë–ù–û–°–¢–ï–ô –ê–ì–ï–ù–¢–ê
        
        Returns:
            –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞
        """
        pass
    
    async def execute_task(self, task: Task) -> TaskResult:
        """
        üöÄ –í–´–ü–û–õ–ù–ï–ù–ò–ï –ó–ê–î–ê–ß–ò –° –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö
        
        Args:
            task: –ó–∞–¥–∞—á–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Returns:
            TaskResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        """
        start_time = datetime.now()
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–∞
            if not self.is_available:
                raise AgentExecutionError(
                    self.name, 
                    task.description, 
                    "–ê–≥–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if not self.can_handle(task):
                raise AgentExecutionError(
                    self.name,
                    task.description,
                    f"–ê–≥–µ–Ω—Ç {self.name} –Ω–µ –º–æ–∂–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–¥–∞—á—É —Ç–∏–ø–∞ {task.description}"
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–∏–µ
            self.current_tasks.append(task)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            self.logger.log_agent_activity(
                agent_name=self.name,
                action="task_started",
                query=task.description,
                result_status="processing",
                context={"task_id": task.id, "priority": task.priority}
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É
            result = await self.process(task)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            execution_time = (datetime.now() - start_time).total_seconds() * 1000
            result.execution_time_ms = execution_time
            
            # –£–±–∏—Ä–∞–µ–º –∏–∑ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á
            self.current_tasks = [t for t in self.current_tasks if t.id != task.id]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
            self.completed_tasks.append(result)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            self.logger.log_agent_activity(
                agent_name=self.name,
                action="task_completed",
                query=task.description,
                result_status="success" if result.success else "error",
                context={
                    "task_id": task.id,
                    "execution_time_ms": execution_time,
                    "success": result.success
                }
            )
            
            return result
            
        except AgentException as e:
            execution_time = (datetime.now() - start_time).total_seconds() * 1000
            self.logger.log_error(e, {"task_id": task.id, "agent_name": self.name})
            
            return TaskResult(
                task_id=task.id,
                success=False,
                error_message=str(e),
                execution_time_ms=execution_time
            )
        
        except Exception as e:
            execution_time = (datetime.now() - start_time).total_seconds() * 1000
            self.logger.log_error(e, {"task_id": task.id, "agent_name": self.name})
            
            return TaskResult(
                task_id=task.id,
                success=False,
                error_message=f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
                execution_time_ms=execution_time
            )
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        return {
            "name": self.name,
            "specialization": self.specialization,
            "is_available": self.is_available,
            "current_tasks_count": len(self.current_tasks),
            "completed_tasks_count": len(self.completed_tasks),
            "capabilities": self.get_capabilities()
        }
    
    def set_availability(self, available: bool):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–∞"""
        self.is_available = available
        self.logger.log_agent_activity(
            agent_name=self.name,
            action="availability_changed",
            query="",
            result_status="available" if available else "unavailable",
            context={"available": available}
        )
    
    def get_performance_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.completed_tasks:
            return {"message": "–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"}
        
        successful_tasks = [t for t in self.completed_tasks if t.success]
        failed_tasks = [t for t in self.completed_tasks if not t.success]
        
        avg_execution_time = sum(t.execution_time_ms for t in self.completed_tasks) / len(self.completed_tasks)
        
        return {
            "total_tasks": len(self.completed_tasks),
            "successful_tasks": len(successful_tasks),
            "failed_tasks": len(failed_tasks),
            "success_rate": len(successful_tasks) / len(self.completed_tasks),
            "avg_execution_time_ms": avg_execution_time,
            "current_load": len(self.current_tasks)
        }
