#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DUAL MEMORY SYSTEM FOR Bldr Empire
==================================

–°–∏—Å—Ç–µ–º–∞ –¥–≤–æ–π–Ω–æ–π –ø–∞–º—è—Ç–∏ (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è/–¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è) –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
–∏–∑ agents-towards-production.
"""

from typing import Dict, Any, List, Optional, Union
from dataclasses import dataclass, field
from datetime import datetime, timedelta
import json
import hashlib
import redis
from abc import ABC, abstractmethod

from core.exceptions import RAGIndexError, DatabaseException
from core.structured_logging import get_logger

logger = get_logger("dual_memory")

@dataclass
class MemoryEntry:
    """–ó–∞–ø–∏—Å—å –≤ –ø–∞–º—è—Ç–∏"""
    id: str
    content: str
    metadata: Dict[str, Any] = field(default_factory=dict)
    timestamp: datetime = field(default_factory=datetime.now)
    access_count: int = 0
    importance_score: float = 0.0
    tags: List[str] = field(default_factory=list)
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            "id": self.id,
            "content": self.content,
            "metadata": self.metadata,
            "timestamp": self.timestamp.isoformat(),
            "access_count": self.access_count,
            "importance_score": self.importance_score,
            "tags": self.tags
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'MemoryEntry':
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        entry = cls(
            id=data["id"],
            content=data["content"],
            metadata=data.get("metadata", {}),
            timestamp=datetime.fromisoformat(data["timestamp"]),
            access_count=data.get("access_count", 0),
            importance_score=data.get("importance_score", 0.0),
            tags=data.get("tags", [])
        )
        return entry

class MemoryBackend(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –±—ç–∫–µ–Ω–¥–æ–≤ –ø–∞–º—è—Ç–∏"""
    
    @abstractmethod
    async def store(self, entry: MemoryEntry) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        pass
    
    @abstractmethod
    async def retrieve(self, query: str, limit: int = 10) -> List[MemoryEntry]:
        """–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π"""
        pass
    
    @abstractmethod
    async def update(self, entry: MemoryEntry) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        pass
    
    @abstractmethod
    async def delete(self, entry_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
        pass

class RedisMemoryBackend(MemoryBackend):
    """Redis –±—ç–∫–µ–Ω–¥ –¥–ª—è –ø–∞–º—è—Ç–∏"""
    
    def __init__(self, redis_url: str = "redis://localhost:6379"):
        self.redis_client = redis.from_url(redis_url, decode_responses=True)
        self.logger = get_logger("redis_memory")
    
    async def store(self, entry: MemoryEntry) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Redis"""
        try:
            key = f"memory:{entry.id}"
            data = json.dumps(entry.to_dict(), ensure_ascii=False)
            self.redis_client.set(key, data)
            
            # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ —Ç–µ–≥–∞–º
            for tag in entry.tags:
                tag_key = f"tag:{tag}"
                self.redis_client.sadd(tag_key, entry.id)
            
            self.logger.log_agent_activity(
                agent_name="redis_memory",
                action="entry_stored",
                query=entry.content[:100],
                result_status="success",
                context={"entry_id": entry.id, "tags": entry.tags}
            )
            
            return True
        except Exception as e:
            self.logger.log_error(e, {"entry_id": entry.id})
            return False
    
    async def retrieve(self, query: str, limit: int = 10) -> List[MemoryEntry]:
        """–ü–æ–∏—Å–∫ –≤ Redis"""
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω semantic search)
            keys = self.redis_client.keys("memory:*")
            results = []
            
            for key in keys[:limit]:
                data = self.redis_client.get(key)
                if data:
                    entry_data = json.loads(data)
                    if query.lower() in entry_data["content"].lower():
                        entry = MemoryEntry.from_dict(entry_data)
                        results.append(entry)
            
            return results[:limit]
        except Exception as e:
            self.logger.log_error(e, {"query": query})
            return []
    
    async def update(self, entry: MemoryEntry) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ Redis"""
        return await self.store(entry)
    
    async def delete(self, entry_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Redis"""
        try:
            key = f"memory:{entry_id}"
            self.redis_client.delete(key)
            return True
        except Exception as e:
            self.logger.log_error(e, {"entry_id": entry_id})
            return False

class InMemoryBackend(MemoryBackend):
    """In-memory –±—ç–∫–µ–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.storage: Dict[str, MemoryEntry] = {}
        self.logger = get_logger("in_memory")
    
    async def store(self, entry: MemoryEntry) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏"""
        self.storage[entry.id] = entry
        return True
    
    async def retrieve(self, query: str, limit: int = 10) -> List[MemoryEntry]:
        """–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏"""
        results = []
        for entry in self.storage.values():
            if query.lower() in entry.content.lower():
                results.append(entry)
        return results[:limit]
    
    async def update(self, entry: MemoryEntry) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏"""
        if entry.id in self.storage:
            self.storage[entry.id] = entry
            return True
        return False
    
    async def delete(self, entry_id: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ø–∞–º—è—Ç–∏"""
        if entry_id in self.storage:
            del self.storage[entry_id]
            return True
        return False

class DualMemorySystem:
    """
    üöÄ –°–ò–°–¢–ï–ú–ê –î–í–û–ô–ù–û–ô –ü–ê–ú–Ø–¢–ò
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é:
    - Short-term: –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –æ–±—ä–µ–º
    - Long-term: –ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ, —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
    """
    
    def __init__(self, short_term_backend: Optional[MemoryBackend] = None,
                 long_term_backend: Optional[MemoryBackend] = None):
        self.short_term_backend = short_term_backend or InMemoryBackend()
        self.long_term_backend = long_term_backend or InMemoryBackend()
        self.logger = get_logger("dual_memory")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        self.short_term_max_size = 1000
        self.short_term_ttl_hours = 24
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        self.long_term_importance_threshold = 0.7
    
    async def store_memory(self, content: str, metadata: Dict[str, Any] = None,
                          tags: List[str] = None, importance_score: float = 0.5) -> str:
        """
        üéØ –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ü–ê–ú–Ø–¢–¨
        
        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            tags: –¢–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
            importance_score: –û—Ü–µ–Ω–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ (0-1)
        
        Returns:
            ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        """
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        entry_id = hashlib.md5(f"{content}{datetime.now()}".encode()).hexdigest()[:16]
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        entry = MemoryEntry(
            id=entry_id,
            content=content,
            metadata=metadata or {},
            tags=tags or [],
            importance_score=importance_score
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å
        await self.short_term_backend.store(entry)
        
        # –ï—Å–ª–∏ –≤–∞–∂–Ω–æ—Å—Ç—å –≤—ã—Å–æ–∫–∞—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é
        if importance_score >= self.long_term_importance_threshold:
            await self.long_term_backend.store(entry)
            self.logger.log_agent_activity(
                agent_name="dual_memory",
                action="stored_long_term",
                query=content[:100],
                result_status="success",
                context={"entry_id": entry_id, "importance": importance_score}
            )
        else:
            self.logger.log_agent_activity(
                agent_name="dual_memory",
                action="stored_short_term",
                query=content[:100],
                result_status="success",
                context={"entry_id": entry_id, "importance": importance_score}
            )
        
        return entry_id
    
    async def retrieve_memory(self, query: str, limit: int = 10,
                             include_long_term: bool = True) -> List[MemoryEntry]:
        """
        üéØ –ü–û–ò–°–ö –í –ü–ê–ú–Ø–¢–ò
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            include_long_term: –í–∫–ª—é—á–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        results = []
        
        # –ü–æ–∏—Å–∫ –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        short_term_results = await self.short_term_backend.retrieve(query, limit)
        results.extend(short_term_results)
        
        # –ü–æ–∏—Å–∫ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        if include_long_term:
            long_term_results = await self.long_term_backend.retrieve(query, limit)
            results.extend(long_term_results)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏
        unique_results = {}
        for entry in results:
            if entry.id not in unique_results:
                unique_results[entry.id] = entry
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–æ—Å—Ç—É–ø–∞
                unique_results[entry.id].access_count += 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏
        sorted_results = sorted(
            unique_results.values(),
            key=lambda x: (x.importance_score, x.timestamp),
            reverse=True
        )
        
        self.logger.log_agent_activity(
            agent_name="dual_memory",
            action="memory_retrieved",
            query=query,
            result_status="success",
            context={
                "query": query,
                "results_count": len(sorted_results),
                "short_term_count": len(short_term_results),
                "long_term_count": len(long_term_results) if include_long_term else 0
            }
        )
        
        return sorted_results[:limit]
    
    async def update_memory(self, entry_id: str, content: str = None,
                           metadata: Dict[str, Any] = None,
                           importance_score: float = None) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ø–∞–º—è—Ç–∏"""
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        existing_entries = await self.short_term_backend.retrieve(entry_id, 1)
        if not existing_entries:
            return False
        
        entry = existing_entries[0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        if content is not None:
            entry.content = content
        if metadata is not None:
            entry.metadata.update(metadata)
        if importance_score is not None:
            entry.importance_score = importance_score
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await self.short_term_backend.update(entry)
        
        # –ï—Å–ª–∏ –≤–∞–∂–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å
        if importance_score is not None:
            if importance_score >= self.long_term_importance_threshold:
                await self.long_term_backend.store(entry)
            else:
                await self.long_term_backend.delete(entry_id)
        
        return True
    
    async def get_memory_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏"""
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω—ã –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        return {
            "short_term_backend": "InMemoryBackend",
            "long_term_backend": "InMemoryBackend",
            "short_term_max_size": self.short_term_max_size,
            "long_term_threshold": self.long_term_importance_threshold
        }

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏
_global_memory_system: Optional[DualMemorySystem] = None

def get_memory_system() -> DualMemorySystem:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
    global _global_memory_system
    if _global_memory_system is None:
        _global_memory_system = DualMemorySystem()
    return _global_memory_system
