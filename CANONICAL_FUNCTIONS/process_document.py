# –ö–ê–ù–û–ù–ò–ß–ï–°–ö–ê–Ø –í–ï–†–°–ò–Ø —Ñ—É–Ω–∫—Ü–∏–∏: process_document
# –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫: C:\Bldr\integrated_structure_chunking_system.py
# –î—É–±–ª–∏–∫–∞—Ç—ã (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏):
#   - C:\Bldr\scripts\bldr_rag_trainer.py
#   - C:\Bldr\scripts\optimized_bldr_rag_trainer.py
#================================================================================
    def process_document(self, content: str, file_path: str = "") -> Dict[str, Any]:
        """
        üîß –ü–û–õ–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê
        
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º:
        - document_info: –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è UI
        - sections: –∏–µ—Ä–∞—Ä—Ö–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤
        - chunks: –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —á–∞–Ω–∫–∏ 
        - tables: —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏
        - statistics: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        
        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document_structure = self.structure_extractor.extract_complete_structure(content, file_path)
        
        # 2. –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —á–∞–Ω–∫–∏
        smart_chunks = self.intelligent_chunker.create_intelligent_chunks(document_structure)
        
        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º API-—Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        api_compatible_result = {
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–¥–ª—è UI)
            'document_info': {
                'title': document_structure['metadata']['document_title'],
                'number': document_structure['metadata']['document_number'],
                'type': document_structure['metadata']['document_type'],
                'organization': document_structure['metadata']['organization'],
                'approval_date': document_structure['metadata']['approval_date'],
                'file_name': document_structure['metadata']['file_info']['file_name'],
                'file_size': document_structure['metadata']['file_info']['file_size'],
                'keywords': document_structure['metadata']['keywords']
            },
            
            # –ò–µ—Ä–∞—Ä—Ö–∏—è —Ä–∞–∑–¥–µ–ª–æ–≤ (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
            'sections': self._format_sections_for_api(document_structure['sections_hierarchy']),
            
            # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —á–∞–Ω–∫–∏ (–¥–ª—è RAG)
            'chunks': [chunk.to_dict() for chunk in smart_chunks],
            
            # –¢–∞–±–ª–∏—Ü—ã (–¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)
            'tables': document_structure['tables'],
            
            # –°–ø–∏—Å–∫–∏
            'lists': document_structure['lists'],
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            'statistics': {
                **document_structure['statistics'],
                'chunks_created': len(smart_chunks),
                'avg_chunk_quality': np.mean([chunk.quality_score for chunk in smart_chunks]) if smart_chunks else 0,
                'chunk_types_distribution': self._get_chunk_types_stats(smart_chunks)
            },
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            'processing_info': {
                'extracted_at': document_structure['extraction_info']['extracted_at'],
                'processor_version': 'Integrated_v3.0',
                'structure_quality': document_structure['extraction_info']['quality_score'],
                'chunking_quality': np.mean([chunk.quality_score for chunk in smart_chunks]) if smart_chunks else 0,
                'total_elements': len(document_structure['elements']),
                'processing_method': 'intelligent_structure_based'
            }
        }
        
        return api_compatible_result