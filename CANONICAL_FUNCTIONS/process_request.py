# –ö–ê–ù–û–ù–ò–ß–ï–°–ö–ê–Ø –í–ï–†–°–ò–Ø —Ñ—É–Ω–∫—Ü–∏–∏: process_request
# –û—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫: C:\Bldr\core\super_smart_coordinator.py
# –î—É–±–ª–∏–∫–∞—Ç—ã (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏):
#   - C:\Bldr\core\coordinator.py
#   - C:\Bldr\core\smart_request_processor.py
#================================================================================
    def process_request(self, query: str, user_id: str = "default", context: Dict = None) -> Dict[str, Any]:
        """
        –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        """
        try:
            logger.info(f"üß† SuperSmartCoordinator –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: {query}")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if user_id not in self.conversations:
                self.conversations[user_id] = ConversationMemory(user_id=user_id)
            
            memory = self.conversations[user_id]
            
            # 2. –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            request_context = self.request_processor.process_request(query, context)
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            self._update_conversation_memory(memory, query, request_context)
            
            # 4. –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
            action_plan = self._create_intelligent_action_plan(request_context, memory)
            
            # 5. –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
            execution_results = self._execute_action_plan(action_plan, request_context)
            
            # 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            proactive_suggestions = self._generate_contextual_suggestions(
                request_context, memory, execution_results
            )
            
            # 7. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            final_response = self._synthesize_response(
                request_context, execution_results, proactive_suggestions
            )
            
            # 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–º—è—Ç—å
            self._save_to_memory(memory, final_response)
            
            return final_response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ SuperSmartCoordinator: {e}")
            return self._create_error_response(query, str(e))