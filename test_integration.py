#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SuperBuilder Tools
"""

import sys
import os

# Add the current directory to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    errors = []
    
    # Test coordinator agent
    try:
        from core.agents.coordinator_agent import CoordinatorAgent
        print("‚úÖ CoordinatorAgent –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        errors.append(f"‚ùå CoordinatorAgent: {e}")
    
    # Test tools API
    try:
        from backend.api.tools_api import router as tools_router
        print("‚úÖ Tools API –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        errors.append(f"‚ùå Tools API: {e}")
    
    # Test meta-tools API
    try:
        from backend.api.meta_tools_api import router as meta_tools_router
        print("‚úÖ Meta-Tools API –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        errors.append(f"‚ùå Meta-Tools API: {e}")
    
    # Test WebSocket manager
    try:
        from core.websocket_manager import manager as websocket_manager
        print("‚úÖ WebSocket Manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        errors.append(f"‚ùå WebSocket Manager: {e}")
    
    # Test main API
    try:
        from core.bldr_api import app
        print("‚úÖ Main API (bldr_api) –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        errors.append(f"‚ùå Main API: {e}")
    
    return errors

def test_api_routes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º API —Ä–æ—É—Ç—ã"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ä–æ—É—Ç–æ–≤...")
    
    try:
        from core.bldr_api import app
        routes = [route.path for route in app.routes]
        
        # Check for our new tools routes
        tools_routes = [r for r in routes if r.startswith('/api/tools')]
        if tools_routes:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tools_routes)} Tools API —Ä–æ—É—Ç–æ–≤:")
            for route in tools_routes[:5]:  # Show first 5
                print(f"   - {route}")
        else:
            print("‚ö†Ô∏è Tools API —Ä–æ—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # Check for meta-tools routes
        meta_routes = [r for r in routes if r.startswith('/api/meta-tools')]
        if meta_routes:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(meta_routes)} Meta-Tools API —Ä–æ—É—Ç–æ–≤:")
            for route in meta_routes[:5]:  # Show first 5
                print(f"   - {route}")
        else:
            print("‚ö†Ô∏è Meta-Tools API —Ä–æ—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # Check WebSocket
        ws_routes = [r for r in routes if '/ws' in r]
        if ws_routes:
            print(f"‚úÖ WebSocket —Ä–æ—É—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {ws_routes}")
        else:
            print("‚ö†Ô∏è WebSocket —Ä–æ—É—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
        print(f"üìä –í—Å–µ–≥–æ —Ä–æ—É—Ç–æ–≤ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: {len(routes)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—É—Ç–æ–≤: {e}")

def main():
    print("üöÄ SuperBuilder Tools - –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    # Test imports
    errors = test_imports()
    
    # Test API routes if imports successful
    if not errors:
        test_api_routes()
    
    # Summary
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    if errors:
        print("‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏:")
        for error in errors:
            print(f"   {error}")
        print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤")
        print("   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –≤ —Ñ–∞–π–ª–∞—Ö —Å –æ—à–∏–±–∫–∞–º–∏")
    else:
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
        print("   python core/main.py")

if __name__ == "__main__":
    main()