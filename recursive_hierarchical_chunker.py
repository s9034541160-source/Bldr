#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üîÑ RECURSIVE HIERARCHICAL CHUNKER V3
===================================
–°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–≥–æ —á–∞–Ω–∫–∏–Ω–≥–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

–ü–†–ò–ù–¶–ò–ü –†–ê–ë–û–¢–´:
üìÑ –î–æ–∫—É–º–µ–Ω—Ç
‚îú‚îÄ‚îÄ 1. –†–∞–∑–¥–µ–ª
‚îÇ   ‚îú‚îÄ‚îÄ 1.1 –ü–æ–¥—Ä–∞–∑–¥–µ–ª
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ 1.1.1 –ü–æ–¥–ø–æ–¥—Ä–∞–∑–¥–µ–ª  ‚Üê –ß–∞–Ω–∫ (–µ—Å–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ –ê–±–∑–∞—Ü 1             ‚Üê –ß–∞–Ω–∫
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ –ê–±–∑–∞—Ü 2             ‚Üê –ß–∞–Ω–∫
‚îÇ   ‚îî‚îÄ‚îÄ 1.2 –ü–æ–¥—Ä–∞–∑–¥–µ–ª           ‚Üê –ß–∞–Ω–∫ (–µ—Å–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π)
‚îÇ   ‚îî‚îÄ‚îÄ –¢–∞–±–ª–∏—Ü–∞ 1               ‚Üê –ß–∞–Ω–∫
‚îî‚îÄ‚îÄ 2. –†–∞–∑–¥–µ–ª                   ‚Üê –ß–∞–Ω–∫ (–µ—Å–ª–∏ –º–∞–ª–µ–Ω—å–∫–∏–π)

–õ–û–ì–ò–ö–ê –†–ê–ó–ë–ò–ï–ù–ò–Ø:
‚úÖ 1 –ø—É–Ω–∫—Ç = 1 —á–∞–Ω–∫ (–µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏–π)
‚úÖ –ï—Å–ª–∏ –ø—É–Ω–∫—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ‚Üí —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–æ–¥-–ø—É–Ω–∫—Ç—ã  
‚úÖ –ï—Å–ª–∏ –ø–æ–¥-–ø—É–Ω–∫—Ç–æ–≤ –Ω–µ—Ç ‚Üí —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
‚úÖ –¢–∞–±–ª–∏—Ü—ã –∏ —Å–ø–∏—Å–∫–∏ = –æ—Ç–¥–µ–ª—å–Ω—ã–µ —á–∞–Ω–∫–∏
"""

import re
from typing import Dict, List, Any, Tuple, Optional, Union
from dataclasses import dataclass, field
from enum import Enum
import logging

logger = logging.getLogger(__name__)

class ChunkGranularity(Enum):
    """–£—Ä–æ–≤–Ω–∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞–Ω–∫–æ–≤"""
    DOCUMENT = "document"           # –í–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    CHAPTER = "chapter"             # –ì–ª–∞–≤–∞ (1, 2, 3, ...)
    SECTION = "section"             # –†–∞–∑–¥–µ–ª (1.1, 1.2, ...)
    SUBSECTION = "subsection"       # –ü–æ–¥—Ä–∞–∑–¥–µ–ª (1.1.1, 1.1.2, ...)
    PARAGRAPH = "paragraph"         # –ê–±–∑–∞—Ü
    SENTENCE = "sentence"           # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π)
    TABLE = "table"                 # –¢–∞–±–ª–∏—Ü–∞
    LIST = "list"                   # –°–ø–∏—Å–æ–∫

@dataclass
class HierarchicalChunk:
    """–ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π —á–∞–Ω–∫ —Å –ø–æ–ª–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    id: str
    content: str
    granularity: ChunkGranularity
    
    # –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    hierarchy_path: str             # "1.2.3" –∏–ª–∏ "1.2.3.paragraph_1"
    parent_id: Optional[str] = None
    children_ids: List[str] = field(default_factory=list)
    
    # –°—Ç—Ä—É–∫—Ç—É—Ä–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    number: str = ""                # "1.2.3"
    title: str = ""                 # "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º"
    level: int = 1                  # –£—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
    
    # –°–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    word_count: int = 0
    char_count: int = 0
    technical_terms_count: int = 0
    has_tables: bool = False
    has_lists: bool = False
    has_formulas: bool = False
    
    # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    content_density: float = 0.0    # –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    structural_quality: float = 0.0 # –ö–∞—á–µ—Å—Ç–≤–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    completeness: float = 0.0       # –ü–æ–ª–Ω–æ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    
    def calculate_metrics(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫"""
        self.word_count = len(self.content.split())
        self.char_count = len(self.content)
        self.technical_terms_count = self._count_technical_terms()
        self.has_tables = '|' in self.content or '–¢–∞–±–ª–∏—Ü–∞' in self.content
        self.has_lists = bool(re.search(r'^[-‚Ä¢*\d+]\s+', self.content, re.MULTILINE))
        self.has_formulas = bool(re.search(r'[=‚â§‚â•¬±√ó√∑‚àû]', self.content))
        
        self.content_density = self._calculate_content_density()
        self.structural_quality = self._calculate_structural_quality()
        self.completeness = self._calculate_completeness()
    
    def _count_technical_terms(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤"""
        patterns = [
            r'\b(?:–ì–û–°–¢|–°–ü|–°–ù–∏–ü)\s+[\d.-]+',
            r'\b\d+(?:\.\d+)?\s*(?:–º–º|—Å–º|–º|–∫–º|–≥|–∫–≥|—Ç|–ú–ü–∞|–∫–ü–∞|¬∞C|%)\b',
            r'\b(?:–ø—Ä–æ—á–Ω–æ—Å—Ç—å|–Ω–∞–≥—Ä—É–∑–∫–∞|–º–∞—Ç–µ—Ä–∏–∞–ª|–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è|—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ|–¥–µ—Ñ–æ—Ä–º–∞—Ü–∏—è)\b'
        ]
        count = 0
        for pattern in patterns:
            count += len(re.findall(pattern, self.content, re.IGNORECASE))
        return count
    
    def _calculate_content_density(self) -> float:
        """–ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (—Ç–µ—Ö—Ç–µ—Ä–º–∏–Ω—ã/—Å–ª–æ–≤–∞)"""
        if self.word_count == 0:
            return 0.0
        return min(self.technical_terms_count / self.word_count, 1.0)
    
    def _calculate_structural_quality(self) -> float:
        """–û—Ü–µ–Ω–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
        quality = 0.5  # –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        
        # –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if self.title:
            quality += 0.2
        
        # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é
        if self.number and re.match(r'\d+(\.\d+)*', self.number):
            quality += 0.1
        
        # –ë–æ–Ω—É—Å –∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if self.has_tables or self.has_lists:
            quality += 0.1
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        if 200 <= self.word_count <= 500:
            quality += 0.1
        
        return min(quality, 1.0)
    
    def _calculate_completeness(self) -> float:
        """–û—Ü–µ–Ω–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        completeness = 0.0
        
        # –ù–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if self.title:
            completeness += 0.3
        
        # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if self.word_count >= 50:
            completeness += 0.3
        
        # –ù–∞–ª–∏—á–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
        if self.technical_terms_count > 0:
            completeness += 0.2
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
        if self.has_tables or self.has_lists:
            completeness += 0.2
        
        return min(completeness, 1.0)
    
    def to_api_format(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ API —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
        return {
            'id': self.id,
            'content': self.content,
            'type': self.granularity.value,
            'hierarchy_path': self.hierarchy_path,
            'number': self.number,
            'title': self.title,
            'level': self.level,
            'parent_id': self.parent_id,
            'children_ids': self.children_ids,
            'metadata': {
                'word_count': self.word_count,
                'char_count': self.char_count,
                'technical_terms_count': self.technical_terms_count,
                'has_tables': self.has_tables,
                'has_lists': self.has_lists,
                'has_formulas': self.has_formulas,
                'content_density': self.content_density,
                'structural_quality': self.structural_quality,
                'completeness': self.completeness
            }
        }

class RecursiveHierarchicalChunker:
    """
    üîÑ –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π —á–∞–Ω–∫–µ—Ä
    
    –°–æ–∑–¥–∞–µ—Ç —á–∞–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–º —Å–ø—É—Å–∫–æ–º:
    –î–æ–∫—É–º–µ–Ω—Ç ‚Üí –ì–ª–∞–≤—ã ‚Üí –†–∞–∑–¥–µ–ª—ã ‚Üí –ü–æ–¥—Ä–∞–∑–¥–µ–ª—ã ‚Üí –ê–±–∑–∞—Ü—ã
    """
    
    def __init__(self, 
                 target_chunk_size: int = 400,
                 min_chunk_size: int = 100, 
                 max_chunk_size: int = 800,
                 preserve_structure: bool = True):
        """
        Args:
            target_chunk_size: –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Å–ª–æ–≤–∞—Ö
            min_chunk_size: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
            max_chunk_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
            preserve_structure: –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        """
        self.target_chunk_size = target_chunk_size
        self.min_chunk_size = min_chunk_size
        self.max_chunk_size = max_chunk_size
        self.preserve_structure = preserve_structure
        
        # –°—á–µ—Ç—á–∏–∫ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
        self.chunk_counter = 0
    
    def create_hierarchical_chunks(self, document_structure: Dict[str, Any]) -> List[HierarchicalChunk]:
        """
        üéØ –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –°–æ–∑–¥–∞–Ω–∏–µ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö —á–∞–Ω–∫–æ–≤
        
        Args:
            document_structure: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ AdvancedStructureExtractor
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö —á–∞–Ω–∫–æ–≤
        """
        logger.info("üîÑ Starting recursive hierarchical chunking...")
        
        chunks = []
        sections = document_structure.get('sections', [])
        tables = document_structure.get('tables', [])
        lists = document_structure.get('lists', [])
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        for section in sections:
            section_chunks = self._process_section_recursively(section, parent_path="")
            chunks.extend(section_chunks)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        for table in tables:
            table_chunk = self._create_table_chunk(table)
            if table_chunk:
                chunks.append(table_chunk)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ø–∏—Å–∫–∏
        for list_group in lists:
            list_chunk = self._create_list_chunk(list_group)
            if list_chunk:
                chunks.append(list_chunk)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏ —Ä–æ–¥–∏—Ç–µ–ª—å-–ø–æ—Ç–æ–º–æ–∫
        self._establish_parent_child_relationships(chunks)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
        for chunk in chunks:
            chunk.calculate_metrics()
        
        logger.info(f"‚úÖ Created {len(chunks)} hierarchical chunks")
        
        return chunks
    
    def _process_section_recursively(self, section: Dict[str, Any], parent_path: str = "", level: int = 1) -> List[HierarchicalChunk]:
        """
        üîÑ –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞
        
        –õ–æ–≥–∏–∫–∞:
        1. –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª –º–∞–ª–µ–Ω—å–∫–∏–π ‚Üí –¥–µ–ª–∞–µ–º 1 —á–∞–Ω–∫
        2. –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã ‚Üí –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        3. –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤, –Ω–æ —Ä–∞–∑–¥–µ–ª –±–æ–ª—å—à–æ–π ‚Üí —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
        """
        chunks = []
        
        section_number = section.get('number', '')
        section_title = section.get('title', '')
        section_content = section.get('content', '')
        subsections = section.get('subsections', [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å
        hierarchy_path = f"{parent_path}.{section_number}" if parent_path else section_number
        
        logger.debug(f"üîÑ Processing section {hierarchy_path}: '{section_title}'")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–∞ (–≤–∫–ª—é—á–∞—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã)
        full_section_content = self._gather_full_section_content(section)
        section_word_count = len(full_section_content.split())
        
        # –†–ï–®–ï–ù–ò–ï 1: –ú–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–¥–µ–ª ‚Üí —Ü–µ–ª–∏–∫–æ–º –≤ —á–∞–Ω–∫
        if section_word_count <= self.target_chunk_size and not subsections:
            chunk = self._create_section_chunk(
                section, hierarchy_path, level, ChunkGranularity.SECTION
            )
            chunks.append(chunk)
            logger.debug(f"  ‚úÖ Small section ‚Üí single chunk ({section_word_count} words)")
        
        # –†–ï–®–ï–ù–ò–ï 2: –ï—Å—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã ‚Üí –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        elif subsections:
            logger.debug(f"  üîÑ Section has {len(subsections)} subsections ‚Üí processing recursively")
            
            # –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–∞–º–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ (–¥–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤)
            if section_content and len(section_content.split()) >= self.min_chunk_size:
                main_chunk = self._create_section_chunk(
                    {'number': section_number, 'title': section_title, 'content': section_content},
                    hierarchy_path, level, ChunkGranularity.SECTION
                )
                chunks.append(main_chunk)
            
            # –ó–∞—Ç–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã
            for i, subsection in enumerate(subsections):
                subsection_chunks = self._process_section_recursively(
                    subsection, hierarchy_path, level + 1
                )
                chunks.extend(subsection_chunks)
        
        # –†–ï–®–ï–ù–ò–ï 3: –ë–æ–ª—å—à–æ–π —Ä–∞–∑–¥–µ–ª –±–µ–∑ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤ ‚Üí —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
        else:
            logger.debug(f"  üìÑ Large section without subsections ‚Üí splitting into paragraphs ({section_word_count} words)")
            paragraph_chunks = self._split_into_paragraph_chunks(section, hierarchy_path, level)
            chunks.extend(paragraph_chunks)
        
        return chunks
    
    def _gather_full_section_content(self, section: Dict[str, Any]) -> str:
        """–°–±–æ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ä–∞–∑–¥–µ–ª–∞ –≤–∫–ª—é—á–∞—è –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã"""
        content_parts = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        if section.get('title'):
            header = f"{section.get('number', '')} {section.get('title', '')}"
            content_parts.append(header)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
        if section.get('content'):
            content_parts.append(section.get('content', ''))
        
        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã
        for subsection in section.get('subsections', []):
            subsection_content = self._gather_full_section_content(subsection)
            if subsection_content:
                content_parts.append(subsection_content)
        
        return '\n\n'.join(content_parts)
    
    def _create_section_chunk(self, section: Dict[str, Any], hierarchy_path: str, 
                             level: int, granularity: ChunkGranularity) -> HierarchicalChunk:
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞"""
        
        section_number = section.get('number', '')
        section_title = section.get('title', '')
        section_content = section.get('content', '')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —á–∞–Ω–∫–∞
        content_parts = []
        if section_title:
            content_parts.append(f"{section_number} {section_title}")
        if section_content:
            content_parts.append(section_content)
        
        full_content = '\n\n'.join(content_parts)
        
        chunk = HierarchicalChunk(
            id=self._generate_chunk_id(),
            content=full_content,
            granularity=granularity,
            hierarchy_path=hierarchy_path,
            number=section_number,
            title=section_title,
            level=level
        )
        
        return chunk
    
    def _split_into_paragraph_chunks(self, section: Dict[str, Any], parent_path: str, level: int) -> List[HierarchicalChunk]:
        """–†–∞–∑–±–∏–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ –∞–±–∑–∞—Ü–∞–º"""
        chunks = []
        
        content = section.get('content', '')
        if not content:
            return chunks
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
        paragraphs = [p.strip() for p in content.split('\n\n') if p.strip()]
        
        current_chunk_content = []
        current_word_count = 0
        paragraph_counter = 1
        
        for paragraph in paragraphs:
            paragraph_words = len(paragraph.split())
            
            # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–±–∑–∞—Ü–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç
            if current_word_count + paragraph_words <= self.target_chunk_size:
                current_chunk_content.append(paragraph)
                current_word_count += paragraph_words
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç)
                if current_chunk_content and current_word_count >= self.min_chunk_size:
                    chunk = self._create_paragraph_chunk(
                        current_chunk_content, section, parent_path, level, paragraph_counter
                    )
                    chunks.append(chunk)
                    paragraph_counter += 1
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞–Ω–∫
                current_chunk_content = [paragraph]
                current_word_count = paragraph_words
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
        if current_chunk_content and current_word_count >= self.min_chunk_size:
            chunk = self._create_paragraph_chunk(
                current_chunk_content, section, parent_path, level, paragraph_counter
            )
            chunks.append(chunk)
        
        return chunks
    
    def _create_paragraph_chunk(self, paragraphs: List[str], section: Dict[str, Any], 
                              parent_path: str, level: int, paragraph_number: int) -> HierarchicalChunk:
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–∞ –∏–∑ –∞–±–∑–∞—Ü–µ–≤"""
        
        content = '\n\n'.join(paragraphs)
        hierarchy_path = f"{parent_path}.p{paragraph_number}"
        
        chunk = HierarchicalChunk(
            id=self._generate_chunk_id(),
            content=content,
            granularity=ChunkGranularity.PARAGRAPH,
            hierarchy_path=hierarchy_path,
            number=f"{section.get('number', '')}.{paragraph_number}",
            title=f"–ß–∞—Å—Ç—å {paragraph_number}",
            level=level + 1
        )
        
        return chunk
    
    def _create_table_chunk(self, table: Dict[str, Any]) -> Optional[HierarchicalChunk]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã"""
        
        table_content = self._format_table_content(table)
        if not table_content or len(table_content.split()) < self.min_chunk_size:
            return None
        
        chunk = HierarchicalChunk(
            id=self._generate_chunk_id(),
            content=table_content,
            granularity=ChunkGranularity.TABLE,
            hierarchy_path=f"table_{table.get('number', 'unknown')}",
            number=table.get('number', ''),
            title=table.get('title', '–¢–∞–±–ª–∏—Ü–∞'),
            level=1
        )
        
        return chunk
    
    def _create_list_chunk(self, list_group: Dict[str, Any]) -> Optional[HierarchicalChunk]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞"""
        
        list_content = self._format_list_content(list_group)
        if not list_content or len(list_content.split()) < self.min_chunk_size:
            return None
        
        chunk = HierarchicalChunk(
            id=self._generate_chunk_id(),
            content=list_content,
            granularity=ChunkGranularity.LIST,
            hierarchy_path=f"list_{self.chunk_counter}",
            number="",
            title="–°–ø–∏—Å–æ–∫",
            level=1
        )
        
        return chunk
    
    def _format_table_content(self, table: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ —Ç–µ–∫—Å—Ç"""
        content_parts = []
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        if table.get('number') or table.get('title'):
            header = f"–¢–∞–±–ª–∏—Ü–∞ {table.get('number', '')} ‚Äî {table.get('title', '')}"
            content_parts.append(header.strip(' ‚Äî'))
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        headers = table.get('headers', [])
        if headers:
            content_parts.append(' | '.join(headers))
            content_parts.append('|'.join(['---'] * len(headers)))
        
        # –°—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        for row in table.get('rows', []):
            if isinstance(row, list):
                content_parts.append(' | '.join(str(cell) for cell in row))
        
        return '\n'.join(content_parts)
    
    def _format_list_content(self, list_group: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤ —Ç–µ–∫—Å—Ç"""
        content_parts = []
        
        for item in list_group.get('items', []):
            if isinstance(item, dict):
                marker = item.get('marker', '‚Ä¢')
                text = item.get('text', '')
                content_parts.append(f"{marker} {text}")
            else:
                content_parts.append(f"‚Ä¢ {item}")
        
        return '\n'.join(content_parts)
    
    def _establish_parent_child_relationships(self, chunks: List[HierarchicalChunk]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–µ–π —Ä–æ–¥–∏—Ç–µ–ª—å-–ø–æ—Ç–æ–º–æ–∫ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏"""
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ hierarchy_path
        path_to_chunk = {chunk.hierarchy_path: chunk for chunk in chunks}
        
        for chunk in chunks:
            path_parts = chunk.hierarchy_path.split('.')
            
            # –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è (–ø—É—Ç—å –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ)
            if len(path_parts) > 1:
                parent_path = '.'.join(path_parts[:-1])
                parent_chunk = path_to_chunk.get(parent_path)
                
                if parent_chunk:
                    chunk.parent_id = parent_chunk.id
                    if chunk.id not in parent_chunk.children_ids:
                        parent_chunk.children_ids.append(chunk.id)
    
    def _generate_chunk_id(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —á–∞–Ω–∫–∞"""
        self.chunk_counter += 1
        return f"chunk_{self.chunk_counter:04d}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É
def create_hierarchical_chunks_from_structure(document_structure: Dict[str, Any], 
                                             target_chunk_size: int = 400) -> List[Dict[str, Any]]:
    """
    üéØ API-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö —á–∞–Ω–∫–æ–≤
    
    Args:
        document_structure: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        target_chunk_size: –¶–µ–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Å–ª–æ–≤–∞—Ö
        
    Returns:
        –°–ø–∏—Å–æ–∫ —á–∞–Ω–∫–æ–≤ –≤ API —Ñ–æ—Ä–º–∞—Ç–µ
    """
    
    chunker = RecursiveHierarchicalChunker(target_chunk_size=target_chunk_size)
    hierarchical_chunks = chunker.create_hierarchical_chunks(document_structure)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ API —Ñ–æ—Ä–º–∞—Ç
    api_chunks = [chunk.to_api_format() for chunk in hierarchical_chunks]
    
    return api_chunks

if __name__ == "__main__":
    print("üîÑ Recursive Hierarchical Chunker v3 - Ready!")
    print("–°–æ–∑–¥–∞–µ—Ç —á–∞–Ω–∫–∏ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É: 1 –ø—É–Ω–∫—Ç = 1 —á–∞–Ω–∫")
    print("–° —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–º —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
    
    # –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    test_structure = {
        'sections': [
            {
                'number': '1',
                'title': '–û–ë–©–ò–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø',
                'content': '–û–±—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–¥–µ–ª–∞ 1...',
                'level': 1,
                'subsections': [
                    {
                        'number': '1.1',
                        'title': '–û–±–ª–∞—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è',
                        'content': '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏...',
                        'level': 2,
                        'subsections': []
                    },
                    {
                        'number': '1.2', 
                        'title': '–ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏',
                        'content': '–°–ø–∏—Å–æ–∫ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∫–∞–∂–¥–æ–≥–æ...',
                        'level': 2,
                        'subsections': []
                    }
                ]
            }
        ],
        'tables': [],
        'lists': []
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º
    chunks = create_hierarchical_chunks_from_structure(test_structure, target_chunk_size=300)
    
    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∏—Ö —á–∞–Ω–∫–æ–≤:")
    for chunk in chunks:
        print(f"  üìÑ {chunk['hierarchy_path']}: {chunk['title']} ({chunk['metadata']['word_count']} —Å–ª–æ–≤)")