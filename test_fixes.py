#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –∏ –±—ç–∫–µ–Ω–¥–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—á–µ–π
"""

import requests
import json
import time
import os
import sys
from pathlib import Path

BASE_URL = "http://localhost:8001"

def test_api_health():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ API"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ API...")
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç: {data}")
            return True
        else:
            print(f"‚ùå API –ø—Ä–æ–±–ª–µ–º–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")
        return False

def test_rag_search():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ RAG"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ RAG...")
    try:
        search_data = {
            "query": "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã",
            "limit": 5,
            "include_metadata": True
        }
        
        response = requests.post(
            f"{BASE_URL}/api/search", 
            json=search_data,
            timeout=30
        )
        
        if response.status_code == 200:
            results = response.json()
            print(f"‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ: {len(results.get('results', []))} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            if results.get('results'):
                for i, result in enumerate(results['results'][:2], 1):
                    score = result.get('score', 0)
                    text_preview = result.get('text', '')[:100] + '...'
                    print(f"   {i}. Score: {score:.3f} - {text_preview}")
            return True
        else:
            print(f"‚ùå –ü–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return False

def test_training_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è...")
    try:
        response = requests.get(f"{BASE_URL}/api/training/status")
        if response.status_code == 200:
            status = response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è: {status}")
            return status.get('is_training', False)
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

def test_tender_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞...")
    try:
        tender_data = {
            "tender_data": {
                "id": "test-tender-001",
                "name": "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –æ—Ñ–∏—Å–Ω–æ–≥–æ –∑–¥–∞–Ω–∏—è", 
                "value": 5000000
            },
            "project_id": "test-project",
            "requirements": [
                "–°–ü 31-13330",
                "–ì–û–°–¢ –† 21.1101-2013"
            ]
        }
        
        response = requests.post(
            f"{BASE_URL}/api/analyze-tender",
            json=tender_data,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.get('status', 'Unknown')}")
            return True
        else:
            print(f"‚ùå –ê–Ω–∞–ª–∏–∑ —Ç–µ–Ω–¥–µ—Ä–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–∞: {e}")
        return False

def test_letter_generation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∏—Å–µ–º"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∏—Å–µ–º...")
    try:
        letter_data = {
            "template_id": "compliance_sp31",
            "recipient": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
            "sender": "–ê–û –ë–õ–î–†",
            "subject": "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –°–ü31",
            "problem_description": "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –°–ü31"
        }
        
        response = requests.post(
            f"{BASE_URL}/api/generate-letter",
            json=letter_data,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç: {result.get('status', 'Unknown')}")
            return True
        else:
            print(f"‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å–µ–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å–µ–º: {e}")
        return False

def test_file_scanning():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""  
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
    try:
        scan_data = {
            "path": "I:/docs/downloaded"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—É—Ç—å
        }
        
        response = requests.post(
            f"{BASE_URL}/api/scan-files",
            json=scan_data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç: –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ {result.get('scanned', 0)}, —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {result.get('copied', 0)}")
            return True
        else:
            print(f"‚ùå –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def check_frontend_files():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ —Ñ–∞–π–ª—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    
    frontend_files = {
        "App.tsx": "C:\\Bldr\\web\\bldr_dashboard\\src\\App.tsx",
        "ProFeatures.tsx": "C:\\Bldr\\web\\bldr_dashboard\\src\\components\\ProFeatures.tsx", 
        "ProTools.tsx": "C:\\Bldr\\web\\bldr_dashboard\\src\\components\\ProTools.tsx",
        "FileManager.tsx": "C:\\Bldr\\web\\bldr_dashboard\\src\\components\\FileManager.tsx"
    }
    
    for name, path in frontend_files.items():
        if os.path.exists(path):
            print(f"‚úÖ {name} –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            with open(path, 'r', encoding='utf-8') as f:
                content = f.read()
                
                if name == "App.tsx":
                    if "useAuthStore" in content and "localStorage.getItem('auth-token')" in content:
                        print(f"   ‚úÖ {name} —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤")
                    else:
                        print(f"   ‚ö†Ô∏è {name} –º–æ–∂–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
                        
                elif name == "ProFeatures.tsx":
                    if "tender_data:" in content and "problem_description" in content:
                        print(f"   ‚úÖ {name} —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                    else:
                        print(f"   ‚ö†Ô∏è {name} –º–æ–∂–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
                        
                elif name == "FileManager.tsx":
                    if "trainingPath" in content and "custom_dir: trainingPath" in content:
                        print(f"   ‚úÖ {name} —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
                    else:
                        print(f"   ‚ö†Ô∏è {name} –º–æ–∂–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        else:
            print(f"‚ùå {name} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {path}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    check_frontend_files()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    if not test_api_health():
        print("\n‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç—ã")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    tests = [
        test_training_status,
        test_rag_search, 
        test_file_scanning,
        test_tender_analysis,
        test_letter_generation,
    ]
    
    results = []
    for test_func in tests:
        try:
            result = test_func()
            results.append(result)
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
            results.append(False)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    passed = sum(1 for r in results if r)
    total = len(results)
    
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    elif passed >= total * 0.7:
        print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏, –µ—Å—Ç—å –º–µ–ª–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("‚ùå –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if not results[0]:  # training_status
        print("- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è RAG")
    if not results[1]:  # rag_search  
        print("- –í–æ–∑–º–æ–∂–Ω–æ, –æ–±—É—á–µ–Ω–∏–µ RAG –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    if not results[2]:  # file_scanning
        print("- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–ø–æ–∫ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    if not results[3]:  # tender_analysis
        print("- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤")
    if not results[4]:  # letter_generation
        print("- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å–µ–º")
        
    print("\nüîÑ –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: python test_fixes.py")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")