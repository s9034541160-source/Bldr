#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ INTERACTIVE RAG TRAINING
===========================
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ RAG-–æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –ø—Ä–æ—Ü–µ—Å—Å–∞
–¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∑–∞ –∫–∞–∂–¥—ã–º —à–∞–≥–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

–í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚úÖ –ñ–∏–≤–æ–π –≤—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
‚úÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —á–∞–Ω–∫–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
"""

import os
import sys
import time
import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional
import logging
from colorama import init, Fore, Style, Back
init()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è Windows

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ RAG —Ç—Ä–µ–Ω–µ—Ä–∞
try:
    from working_frontend_rag_integration import create_working_rag_trainer
    ENHANCED_RAG_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Failed to import enhanced RAG trainer: {e}")
    ENHANCED_RAG_AVAILABLE = False
    sys.exit(1)

class InteractiveRAGTrainer:
    """
    üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π RAG —Ç—Ä–µ–Ω–µ—Ä —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    """
    
    def __init__(self, base_dir: str = "I:/docs"):
        self.base_dir = Path(base_dir)
        self.stats = {
            'start_time': None,
            'files_found': 0,
            'files_processed': 0,
            'files_failed': 0,
            'chunks_created': 0,
            'total_sections': 0,
            'total_tables': 0,
            'total_lists': 0,
            'processing_errors': []
        }
        
        print(f"{Fore.CYAN}üöÄ Initializing Interactive RAG Trainer...{Style.RESET_ALL}")
        self.rag_trainer = create_working_rag_trainer(use_intelligent_chunking=True)
        print(f"{Fore.GREEN}‚úÖ Enhanced RAG Trainer ready!{Style.RESET_ALL}")
        print(f"{Fore.BLUE}üìÅ Base directory: {self.base_dir}{Style.RESET_ALL}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–∞–ø–∫–∏
        if not self.base_dir.exists():
            print(f"{Fore.RED}‚ùå Base directory not found: {self.base_dir}{Style.RESET_ALL}")
            sys.exit(1)
    
    def discover_files(self, limit: int = None) -> List[Path]:
        """–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        
        print(f"\n{Fore.YELLOW}üîç Discovering files for training...{Style.RESET_ALL}")
        
        extensions = ['*.pdf', '*.docx', '*.doc', '*.txt', '*.rtf']
        all_files = []
        
        for ext in extensions:
            try:
                files = list(self.base_dir.rglob(ext))
                all_files.extend(files)
                print(f"  {Fore.CYAN}üìÑ Found {len(files)} {ext} files{Style.RESET_ALL}")
            except Exception as e:
                print(f"  {Fore.RED}‚ö†Ô∏è Error searching for {ext}: {e}{Style.RESET_ALL}")
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        unique_files = []
        seen_names = set()
        
        for file_path in all_files:
            if file_path.name.lower() not in seen_names and file_path.exists():
                unique_files.append(file_path)
                seen_names.add(file_path.name.lower())
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        if limit:
            unique_files = unique_files[:limit]
            print(f"{Fore.YELLOW}‚ö†Ô∏è Limited to first {limit} files{Style.RESET_ALL}")
        
        print(f"{Fore.GREEN}üìä Total files to process: {len(unique_files)}{Style.RESET_ALL}")
        self.stats['files_found'] = len(unique_files)
        
        return unique_files
    
    def print_file_header(self, file_path: Path, index: int, total: int):
        """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞"""
        
        progress = (index / total) * 100
        print(f"\n{Back.BLUE}{Fore.WHITE} FILE {index}/{total} ({progress:.1f}%) {Style.RESET_ALL}")
        print(f"{Fore.CYAN}üìÑ Processing: {file_path.name}{Style.RESET_ALL}")
        print(f"{Fore.BLUE}üìÅ Path: {file_path}{Style.RESET_ALL}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
        try:
            size = file_path.stat().st_size
            size_mb = size / (1024 * 1024)
            print(f"{Fore.BLUE}üìè Size: {size_mb:.2f} MB{Style.RESET_ALL}")
        except:
            print(f"{Fore.RED}‚ö†Ô∏è Cannot read file size{Style.RESET_ALL}")
        
        print("‚îÄ" * 60)
    
    def process_single_file(self, file_path: Path, index: int, total: int) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
        
        self.print_file_header(file_path, index, total)
        
        start_time = time.time()
        result = {
            'file_path': str(file_path),
            'success': False,
            'chunks_created': 0,
            'sections_found': 0,
            'tables_found': 0,
            'lists_found': 0,
            'processing_time': 0,
            'error': None,
            'quality_score': 0
        }
        
        try:
            print(f"{Fore.YELLOW}‚è≥ Reading file content...{Style.RESET_ALL}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if file_path.stat().st_size > 50 * 1024 * 1024:  # 50MB
                raise ValueError(f"File too large: {file_path.stat().st_size / 1024 / 1024:.1f}MB")
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            content = ""
            if file_path.suffix.lower() in ['.txt', '.rtf']:
                with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
            elif file_path.suffix.lower() in ['.pdf', '.docx', '.doc']:
                # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞ —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
                print(f"{Fore.YELLOW}üìÑ Note: Reading {file_path.suffix} as text (PDF/DOCX parsing not implemented yet){Style.RESET_ALL}")
                try:
                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                        content = f.read()
                except:
                    raise ValueError("Binary file - cannot read as text")
            
            if not content.strip():
                raise ValueError("Empty file content")
            
            print(f"{Fore.GREEN}‚úÖ Content loaded: {len(content)} characters{Style.RESET_ALL}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –ø–æ–º–æ—â—å—é —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ RAG —Ç—Ä–µ–Ω–µ—Ä–∞
            print(f"{Fore.YELLOW}üß† Processing with Enhanced RAG Trainer...{Style.RESET_ALL}")
            
            document_result = self.rag_trainer.process_single_document(content, str(file_path))
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            chunks = document_result.get('chunks', [])
            sections = document_result.get('sections', [])
            tables = document_result.get('tables', [])
            lists = document_result.get('lists', [])
            
            result['chunks_created'] = len(chunks)
            result['sections_found'] = len(sections)
            result['tables_found'] = len(tables)
            result['lists_found'] = len(lists)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            quality = document_result.get('processing_info', {}).get('extraction_quality', 0)
            result['quality_score'] = quality
            
            result['success'] = True
            
            # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.print_processing_results(document_result, chunks, sections, tables, lists)
            
        except Exception as e:
            result['error'] = str(e)
            print(f"{Fore.RED}‚ùå Processing failed: {e}{Style.RESET_ALL}")
        
        result['processing_time'] = time.time() - start_time
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
        self.print_file_summary(result)
        
        return result
    
    def print_processing_results(self, document_result: Dict, chunks: List, sections: List, tables: List, lists: List):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        print(f"\n{Fore.GREEN}üéØ PROCESSING RESULTS:{Style.RESET_ALL}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
        doc_info = document_result.get('document_info', {})
        if doc_info.get('title'):
            print(f"  üìÑ Title: {Fore.CYAN}{doc_info['title']}{Style.RESET_ALL}")
        if doc_info.get('number'):
            print(f"  üî¢ Number: {Fore.CYAN}{doc_info['number']}{Style.RESET_ALL}")
        if doc_info.get('type'):
            print(f"  üìù Type: {Fore.CYAN}{doc_info['type']}{Style.RESET_ALL}")
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        print(f"\n{Fore.YELLOW}üìã DOCUMENT STRUCTURE:{Style.RESET_ALL}")
        print(f"  üß© Chunks: {Fore.GREEN}{len(chunks)}{Style.RESET_ALL}")
        print(f"  üìë Sections: {Fore.GREEN}{len(sections)}{Style.RESET_ALL}")
        print(f"  üìä Tables: {Fore.GREEN}{len(tables)}{Style.RESET_ALL}")
        print(f"  üìÑ Lists: {Fore.GREEN}{len(lists)}{Style.RESET_ALL}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–¥–µ–ª–æ–≤
        if sections:
            print(f"\n{Fore.BLUE}üìë SECTIONS PREVIEW:{Style.RESET_ALL}")
            for i, section in enumerate(sections[:3]):
                print(f"  {i+1}. [{section.get('number', 'N/A')}] {section.get('title', 'Untitled')[:50]}...")
            if len(sections) > 3:
                print(f"    ... and {len(sections) - 3} more sections")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        if tables:
            print(f"\n{Fore.BLUE}üìä TABLES PREVIEW:{Style.RESET_ALL}")
            for i, table in enumerate(tables[:2]):
                title = table.get('title', f'Table {i+1}')
                headers = table.get('headers', [])
                rows = table.get('rows', [])
                print(f"  {i+1}. {title}")
                print(f"     Headers: {headers[:3]}{' ...' if len(headers) > 3 else ''}")
                print(f"     Rows: {len(rows)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤
        if chunks:
            print(f"\n{Fore.BLUE}üß© CHUNKS QUALITY:{Style.RESET_ALL}")
            qualities = [chunk.get('metadata', {}).get('quality_score', 0) for chunk in chunks]
            avg_quality = sum(qualities) / len(qualities) if qualities else 0
            print(f"  üìà Average quality: {Fore.GREEN}{avg_quality:.2f}{Style.RESET_ALL}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã —á–∞–Ω–∫–æ–≤
            chunk_types = {}
            for chunk in chunks:
                chunk_type = chunk.get('type', 'unknown')
                chunk_types[chunk_type] = chunk_types.get(chunk_type, 0) + 1
            
            print(f"  üìä Chunk types:")
            for chunk_type, count in chunk_types.items():
                print(f"    - {chunk_type}: {count}")
    
    def print_file_summary(self, result: Dict):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"""
        
        print(f"\n{Back.GREEN if result['success'] else Back.RED}{Fore.WHITE} FILE SUMMARY {Style.RESET_ALL}")
        
        if result['success']:
            print(f"{Fore.GREEN}‚úÖ SUCCESS{Style.RESET_ALL}")
            print(f"  ‚è±Ô∏è Time: {result['processing_time']:.2f}s")
            print(f"  üß© Chunks: {result['chunks_created']}")
            print(f"  üìë Sections: {result['sections_found']}")
            print(f"  üìä Tables: {result['tables_found']}")
            print(f"  üìÑ Lists: {result['lists_found']}")
            print(f"  üìà Quality: {result['quality_score']:.2f}")
        else:
            print(f"{Fore.RED}‚ùå FAILED{Style.RESET_ALL}")
            print(f"  ‚ùå Error: {result['error']}")
            print(f"  ‚è±Ô∏è Time: {result['processing_time']:.2f}s")
        
        print("‚ïê" * 60)
    
    def update_global_stats(self, result: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        
        if result['success']:
            self.stats['files_processed'] += 1
            self.stats['chunks_created'] += result['chunks_created']
            self.stats['total_sections'] += result['sections_found']
            self.stats['total_tables'] += result['tables_found']
            self.stats['total_lists'] += result['lists_found']
        else:
            self.stats['files_failed'] += 1
            self.stats['processing_errors'].append({
                'file': Path(result['file_path']).name,
                'error': result['error']
            })
    
    def print_progress_stats(self):
        """–í—ã–≤–æ–¥ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        
        total_processed = self.stats['files_processed'] + self.stats['files_failed']
        progress = (total_processed / self.stats['files_found']) * 100 if self.stats['files_found'] > 0 else 0
        
        print(f"\n{Back.CYAN}{Fore.WHITE} OVERALL PROGRESS: {progress:.1f}% {Style.RESET_ALL}")
        print(f"{Fore.CYAN}üìä Total Progress: {total_processed}/{self.stats['files_found']} files{Style.RESET_ALL}")
        print(f"{Fore.GREEN}‚úÖ Successful: {self.stats['files_processed']}{Style.RESET_ALL}")
        print(f"{Fore.RED}‚ùå Failed: {self.stats['files_failed']}{Style.RESET_ALL}")
        print(f"{Fore.BLUE}üß© Total Chunks: {self.stats['chunks_created']}{Style.RESET_ALL}")
        print(f"{Fore.BLUE}üìë Total Sections: {self.stats['total_sections']}{Style.RESET_ALL}")
        print(f"{Fore.BLUE}üìä Total Tables: {self.stats['total_tables']}{Style.RESET_ALL}")
        print(f"{Fore.BLUE}üìÑ Total Lists: {self.stats['total_lists']}{Style.RESET_ALL}")
        
        if self.stats['start_time']:
            elapsed = time.time() - self.stats['start_time']
            avg_time = elapsed / total_processed if total_processed > 0 else 0
            remaining_files = self.stats['files_found'] - total_processed
            estimated_time = remaining_files * avg_time
            
            print(f"{Fore.YELLOW}‚è±Ô∏è Elapsed: {timedelta(seconds=int(elapsed))}{Style.RESET_ALL}")
            print(f"{Fore.YELLOW}üìà Est. remaining: {timedelta(seconds=int(estimated_time))}{Style.RESET_ALL}")
    
    def start_training(self, max_files: int = None, show_progress_every: int = 5):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        
        print(f"\n{Back.MAGENTA}{Fore.WHITE} üöÄ STARTING INTERACTIVE RAG TRAINING üöÄ {Style.RESET_ALL}")
        
        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
        files = self.discover_files(limit=max_files)
        
        if not files:
            print(f"{Fore.RED}‚ùå No files found for training!{Style.RESET_ALL}")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print(f"\n{Fore.YELLOW}‚ùì Ready to process {len(files)} files?{Style.RESET_ALL}")
        response = input(f"{Fore.CYAN}Press Enter to continue or 'q' to quit: {Style.RESET_ALL}")
        if response.lower() == 'q':
            print(f"{Fore.YELLOW}üëã Training cancelled{Style.RESET_ALL}")
            return
        
        self.stats['start_time'] = time.time()
        
        try:
            for index, file_path in enumerate(files, 1):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
                result = self.process_single_file(file_path, index, len(files))
                self.update_global_stats(result)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
                if index % show_progress_every == 0 or index == len(files):
                    self.print_progress_stats()
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
                if index < len(files):
                    time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        
        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}‚ö†Ô∏è Training interrupted by user{Style.RESET_ALL}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self.print_final_report()
    
    def print_final_report(self):
        """–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–±—É—á–µ–Ω–∏—è"""
        
        total_time = time.time() - self.stats['start_time'] if self.stats['start_time'] else 0
        success_rate = (self.stats['files_processed'] / self.stats['files_found']) * 100 if self.stats['files_found'] > 0 else 0
        
        print(f"\n{Back.GREEN}{Fore.WHITE} üéØ FINAL TRAINING REPORT üéØ {Style.RESET_ALL}")
        print("=" * 60)
        print(f"{Fore.CYAN}üìä STATISTICS:{Style.RESET_ALL}")
        print(f"  üìÅ Files found: {self.stats['files_found']}")
        print(f"  ‚úÖ Successfully processed: {Fore.GREEN}{self.stats['files_processed']}{Style.RESET_ALL}")
        print(f"  ‚ùå Failed: {Fore.RED}{self.stats['files_failed']}{Style.RESET_ALL}")
        print(f"  üìà Success rate: {Fore.GREEN}{success_rate:.1f}%{Style.RESET_ALL}")
        print(f"  ‚è±Ô∏è Total time: {Fore.YELLOW}{timedelta(seconds=int(total_time))}{Style.RESET_ALL}")
        
        print(f"\n{Fore.CYAN}üéØ RESULTS:{Style.RESET_ALL}")
        print(f"  üß© Total chunks created: {Fore.GREEN}{self.stats['chunks_created']}{Style.RESET_ALL}")
        print(f"  üìë Total sections found: {Fore.GREEN}{self.stats['total_sections']}{Style.RESET_ALL}")
        print(f"  üìä Total tables extracted: {Fore.GREEN}{self.stats['total_tables']}{Style.RESET_ALL}")
        print(f"  üìÑ Total lists found: {Fore.GREEN}{self.stats['total_lists']}{Style.RESET_ALL}")
        
        if self.stats['processing_errors']:
            print(f"\n{Fore.RED}‚ö†Ô∏è ERRORS (last 5):{Style.RESET_ALL}")
            for error in self.stats['processing_errors'][-5:]:
                print(f"  - {error['file']}: {error['error']}")
        
        print(f"\n{Fore.GREEN}üéâ RAG Training completed successfully!{Style.RESET_ALL}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print(f"{Fore.MAGENTA}üöÄ Interactive RAG Training System{Style.RESET_ALL}")
    print(f"{Fore.BLUE}Enhanced with Intelligent Document Chunking{Style.RESET_ALL}")
    print("=" * 60)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
    base_dir = input(f"{Fore.CYAN}üìÅ Enter base directory (default: I:/docs): {Style.RESET_ALL}").strip() or "I:/docs"
    
    try:
        max_files = input(f"{Fore.CYAN}üìä Max files to process (default: all): {Style.RESET_ALL}").strip()
        max_files = int(max_files) if max_files else None
    except ValueError:
        max_files = None
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
    trainer = InteractiveRAGTrainer(base_dir=base_dir)
    trainer.start_training(max_files=max_files)

if __name__ == "__main__":
    main()