import React, { useState, useCallback } from 'react';
import {
  Box,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Chip,
  Alert,
  LinearProgress,
  Divider,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Switch,
  FormControlLabel,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper
} from '@mui/material';
import {
  CloudUpload as UploadIcon,
  AttachFile as AttachIcon,
  Delete as DeleteIcon,
  Visibility as ViewIcon,
  Download as DownloadIcon,
  Calculate as CalculateIcon,
  Assessment as AssessmentIcon,
  ExpandMore as ExpandMoreIcon,
  PlayArrow as PlayIcon,
  Stop as StopIcon,
  TableChart as TableIcon,
  PictureAsPdf as PdfIcon,
  Description as DocIcon
} from '@mui/icons-material';
import { useDropzone } from 'react-dropzone';

const EstimateAnalyzer = ({ toolId, onJobStart, onJobComplete }) => {
  // State management
  const [uploadedFiles, setUploadedFiles] = useState([]);
  const [analysisParams, setAnalysisParams] = useState({
    region: 'moscow',
    analysisType: 'full',
    includeGESN: true,
    includeFER: false,
    checkCompliance: true,
    generateReport: true,
    currency: 'RUB',
    priceYear: '2024'
  });
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisResults, setAnalysisResults] = useState(null);
  const [jobProgress, setJobProgress] = useState(0);
  const [selectedFile, setSelectedFile] = useState(null);
  const [previewDialogOpen, setPreviewDialogOpen] = useState(false);

  // Supported file types
  const supportedTypes = {
    '.xlsx': 'Excel —Ñ–∞–π–ª',
    '.xls': 'Excel —Ñ–∞–π–ª (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)',
    '.pdf': 'PDF –¥–æ–∫—É–º–µ–Ω—Ç',
    '.csv': 'CSV —Ñ–∞–π–ª',
    '.doc': 'Word –¥–æ–∫—É–º–µ–Ω—Ç',
    '.docx': 'Word –¥–æ–∫—É–º–µ–Ω—Ç'
  };

  // Regions configuration
  const regions = [
    { value: 'moscow', label: '–ú–æ—Å–∫–≤–∞' },
    { value: 'spb', label: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥' },
    { value: 'ekaterinburg', label: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥' },
    { value: 'novosibirsk', label: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫' },
    { value: 'kazan', label: '–ö–∞–∑–∞–Ω—å' }
  ];

  const analysisTypes = [
    { value: 'full', label: '–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑' },
    { value: 'quick', label: '–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞' },
    { value: 'compliance', label: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è' },
    { value: 'comparison', label: '–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑' }
  ];

  // File drop handling
  const onDrop = useCallback((acceptedFiles) => {
    const newFiles = acceptedFiles.map(file => ({
      id: Math.random().toString(36).substr(2, 9),
      file,
      name: file.name,
      size: file.size,
      type: file.type,
      uploadedAt: new Date(),
      status: 'ready'
    }));
    
    setUploadedFiles(prev => [...prev, ...newFiles]);
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx'],
      'application/vnd.ms-excel': ['.xls'],
      'application/pdf': ['.pdf'],
      'text/csv': ['.csv'],
      'application/msword': ['.doc'],
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': ['.docx']
    },
    maxSize: 50 * 1024 * 1024 // 50MB
  });

  // Remove file
  const removeFile = (fileId) => {
    setUploadedFiles(prev => prev.filter(f => f.id !== fileId));
  };

  // Preview file
  const previewFile = (file) => {
    setSelectedFile(file);
    setPreviewDialogOpen(true);
  };

  // Start analysis
  const startAnalysis = async () => {
    if (uploadedFiles.length === 0) {
      alert('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }

    setIsAnalyzing(true);
    setJobProgress(0);
    setAnalysisResults(null);

    try {
      // Prepare form data
      const formData = new FormData();
      uploadedFiles.forEach((fileData, index) => {
        formData.append(`files`, fileData.file);
      });
      
      // Add analysis parameters
      formData.append('params', JSON.stringify(analysisParams));
      formData.append('tool', 'estimate_analyzer');

      // Start analysis job
      const response = await fetch('/api/tools/analyze/estimate', {
        method: 'POST',
        body: formData
      });

      const result = await response.json();
      
      if (result.success) {
        const jobId = result.job_id;
        onJobStart(jobId);
        
        // Poll for progress
        const progressInterval = setInterval(async () => {
          try {
            const progressResponse = await fetch(`/api/tools/jobs/${jobId}/status`);
            const progressData = await progressResponse.json();
            
            if (progressData.success) {
              setJobProgress(progressData.progress || 0);
              
              if (progressData.status === 'completed') {
                clearInterval(progressInterval);
                setAnalysisResults(progressData.result);
                setIsAnalyzing(false);
                onJobComplete(jobId, progressData.result);
              } else if (progressData.status === 'failed') {
                clearInterval(progressInterval);
                setIsAnalyzing(false);
                alert('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ' + progressData.error);
              }
            }
          } catch (error) {
            console.error('Error polling job status:', error);
          }
        }, 1000);

      } else {
        setIsAnalyzing(false);
        alert('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ' + result.error);
      }
    } catch (error) {
      setIsAnalyzing(false);
      console.error('Error starting analysis:', error);
      alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message);
    }
  };

  // Stop analysis
  const stopAnalysis = () => {
    setIsAnalyzing(false);
    setJobProgress(0);
    // TODO: Send cancel request to backend
  };

  // Format file size
  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  // Get file icon
  const getFileIcon = (fileName) => {
    const ext = fileName.substring(fileName.lastIndexOf('.')).toLowerCase();
    switch (ext) {
      case '.pdf': return <PdfIcon />;
      case '.xlsx':
      case '.xls': return <TableIcon />;
      default: return <DocIcon />;
    }
  };

  return (
    <Box>
      <Grid container spacing={3}>
        {/* File Upload Section */}
        <Grid item xs={12} md={8}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
              </Typography>
              
              {/* Drag & Drop Zone */}
              <Box
                {...getRootProps()}
                sx={{
                  border: '2px dashed #cccccc',
                  borderRadius: 2,
                  p: 4,
                  textAlign: 'center',
                  cursor: 'pointer',
                  backgroundColor: isDragActive ? '#f5f5f5' : 'transparent',
                  '&:hover': {
                    backgroundColor: '#f8f8f8'
                  }
                }}
              >
                <input {...getInputProps()} />
                <UploadIcon sx={{ fontSize: 48, color: '#666', mb: 2 }} />
                <Typography variant="h6" gutterBottom>
                  {isDragActive 
                    ? '–û—Ç–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª—ã –∑–¥–µ—Å—å...' 
                    : '–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞'
                  }
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: {Object.entries(supportedTypes).map(([ext, desc]) => ext).join(', ')}
                </Typography>
                <Typography variant="body2" color="textSecondary">
                  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50 –ú–ë
                </Typography>
              </Box>

              {/* Uploaded Files List */}
              {uploadedFiles.length > 0 && (
                <Box mt={3}>
                  <Typography variant="subtitle1" gutterBottom>
                    –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({uploadedFiles.length})
                  </Typography>
                  <List>
                    {uploadedFiles.map((fileData) => (
                      <ListItem
                        key={fileData.id}
                        secondaryAction={
                          <Box>
                            <IconButton onClick={() => previewFile(fileData)}>
                              <ViewIcon />
                            </IconButton>
                            <IconButton onClick={() => removeFile(fileData.id)} color="error">
                              <DeleteIcon />
                            </IconButton>
                          </Box>
                        }
                      >
                        <ListItemIcon>
                          {getFileIcon(fileData.name)}
                        </ListItemIcon>
                        <ListItemText
                          primary={fileData.name}
                          secondary={`${formatFileSize(fileData.size)} ‚Ä¢ ${fileData.uploadedAt.toLocaleString()}`}
                        />
                        <Chip 
                          label={fileData.status} 
                          size="small" 
                          color={fileData.status === 'ready' ? 'success' : 'default'}
                        />
                      </ListItem>
                    ))}
                  </List>
                </Box>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* Analysis Settings */}
        <Grid item xs={12} md={4}>
          <Card>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
              </Typography>

              <FormControl fullWidth margin="normal">
                <InputLabel>–†–µ–≥–∏–æ–Ω</InputLabel>
                <Select
                  value={analysisParams.region}
                  onChange={(e) => setAnalysisParams(prev => ({ ...prev, region: e.target.value }))}
                  label="–†–µ–≥–∏–æ–Ω"
                >
                  {regions.map((region) => (
                    <MenuItem key={region.value} value={region.value}>
                      {region.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <FormControl fullWidth margin="normal">
                <InputLabel>–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞</InputLabel>
                <Select
                  value={analysisParams.analysisType}
                  onChange={(e) => setAnalysisParams(prev => ({ ...prev, analysisType: e.target.value }))}
                  label="–¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞"
                >
                  {analysisTypes.map((type) => (
                    <MenuItem key={type.value} value={type.value}>
                      {type.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <TextField
                fullWidth
                label="–ì–æ–¥ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"
                type="number"
                value={analysisParams.priceYear}
                onChange={(e) => setAnalysisParams(prev => ({ ...prev, priceYear: e.target.value }))}
                margin="normal"
                inputProps={{ min: 2020, max: 2030 }}
              />

              <Divider sx={{ my: 2 }} />

              <Typography variant="subtitle2" gutterBottom>
                –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
              </Typography>

              <FormControlLabel
                control={
                  <Switch
                    checked={analysisParams.includeGESN}
                    onChange={(e) => setAnalysisParams(prev => ({ ...prev, includeGESN: e.target.checked }))}
                  />
                }
                label="–í–∫–ª—é—á–∏—Ç—å –ì–≠–°–ù —Ä–∞—Å—Ü–µ–Ω–∫–∏"
              />

              <FormControlLabel
                control={
                  <Switch
                    checked={analysisParams.includeFER}
                    onChange={(e) => setAnalysisParams(prev => ({ ...prev, includeFER: e.target.checked }))}
                  />
                }
                label="–í–∫–ª—é—á–∏—Ç—å –§–ï–† —Ä–∞—Å—Ü–µ–Ω–∫–∏"
              />

              <FormControlLabel
                control={
                  <Switch
                    checked={analysisParams.checkCompliance}
                    onChange={(e) => setAnalysisParams(prev => ({ ...prev, checkCompliance: e.target.checked }))}
                  />
                }
                label="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"
              />

              <FormControlLabel
                control={
                  <Switch
                    checked={analysisParams.generateReport}
                    onChange={(e) => setAnalysisParams(prev => ({ ...prev, generateReport: e.target.checked }))}
                  />
                }
                label="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"
              />

              <Box mt={3}>
                <Button
                  fullWidth
                  variant="contained"
                  size="large"
                  onClick={startAnalysis}
                  disabled={isAnalyzing || uploadedFiles.length === 0}
                  startIcon={isAnalyzing ? <StopIcon /> : <PlayIcon />}
                  color={isAnalyzing ? "error" : "primary"}
                >
                  {isAnalyzing ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑' : '–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑'}
                </Button>
              </Box>

              {isAnalyzing && (
                <Box mt={2}>
                  <Typography variant="body2" gutterBottom>
                    –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞: {jobProgress}%
                  </Typography>
                  <LinearProgress 
                    variant="determinate" 
                    value={jobProgress} 
                    sx={{ height: 8, borderRadius: 4 }}
                  />
                </Box>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* Analysis Results */}
        {analysisResults && (
          <Grid item xs={12}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                </Typography>

                <Accordion defaultExpanded>
                  <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                    <Typography variant="subtitle1">–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</Typography>
                  </AccordionSummary>
                  <AccordionDetails>
                    <Grid container spacing={2}>
                      <Grid item xs={12} md={3}>
                        <Card variant="outlined">
                          <CardContent>
                            <Typography variant="h4" color="primary">
                              {analysisResults.summary?.total_cost || 'N/A'}
                            </Typography>
                            <Typography variant="body2">
                              –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
                            </Typography>
                          </CardContent>
                        </Card>
                      </Grid>
                      <Grid item xs={12} md={3}>
                        <Card variant="outlined">
                          <CardContent>
                            <Typography variant="h4" color="secondary">
                              {analysisResults.summary?.items_count || 'N/A'}
                            </Typography>
                            <Typography variant="body2">
                              –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π
                            </Typography>
                          </CardContent>
                        </Card>
                      </Grid>
                      <Grid item xs={12} md={3}>
                        <Card variant="outlined">
                          <CardContent>
                            <Typography variant="h4" color="error">
                              {analysisResults.summary?.errors_count || '0'}
                            </Typography>
                            <Typography variant="body2">
                              –û—à–∏–±–∫–∏
                            </Typography>
                          </CardContent>
                        </Card>
                      </Grid>
                      <Grid item xs={12} md={3}>
                        <Card variant="outlined">
                          <CardContent>
                            <Typography variant="h4" color="warning.main">
                              {analysisResults.summary?.warnings_count || '0'}
                            </Typography>
                            <Typography variant="body2">
                              –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
                            </Typography>
                          </CardContent>
                        </Card>
                      </Grid>
                    </Grid>
                  </AccordionDetails>
                </Accordion>

                {analysisResults.details && (
                  <Accordion>
                    <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                      <Typography variant="subtitle1">–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è</Typography>
                    </AccordionSummary>
                    <AccordionDetails>
                      <TableContainer component={Paper}>
                        <Table size="small">
                          <TableHead>
                            <TableRow>
                              <TableCell>–ü–æ–∑–∏—Ü–∏—è</TableCell>
                              <TableCell>–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</TableCell>
                              <TableCell align="right">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</TableCell>
                              <TableCell align="right">–¶–µ–Ω–∞</TableCell>
                              <TableCell align="right">–°—É–º–º–∞</TableCell>
                            </TableRow>
                          </TableHead>
                          <TableBody>
                            {analysisResults.details.slice(0, 10).map((item, index) => (
                              <TableRow key={index}>
                                <TableCell>{item.name || `–ü–æ–∑–∏—Ü–∏—è ${index + 1}`}</TableCell>
                                <TableCell>{item.unit || '—à—Ç'}</TableCell>
                                <TableCell align="right">{item.quantity || 0}</TableCell>
                                <TableCell align="right">{item.price || 0}</TableCell>
                                <TableCell align="right">{item.total || 0}</TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      </TableContainer>
                    </AccordionDetails>
                  </Accordion>
                )}

                <Box mt={2} display="flex" gap={2}>
                  <Button
                    variant="outlined"
                    startIcon={<DownloadIcon />}
                    onClick={() => {
                      // Download report
                      const blob = new Blob([JSON.stringify(analysisResults, null, 2)], 
                        { type: 'application/json' });
                      const url = URL.createObjectURL(blob);
                      const a = document.createElement('a');
                      a.href = url;
                      a.download = 'estimate_analysis_report.json';
                      a.click();
                    }}
                  >
                    –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
                  </Button>
                  <Button
                    variant="outlined"
                    startIcon={<AssessmentIcon />}
                  >
                    –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                  </Button>
                </Box>
              </CardContent>
            </Card>
          </Grid>
        )}
      </Grid>

      {/* File Preview Dialog */}
      <Dialog 
        open={previewDialogOpen} 
        onClose={() => setPreviewDialogOpen(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞: {selectedFile?.name}
        </DialogTitle>
        <DialogContent>
          {selectedFile && (
            <Box>
              <Typography variant="body1" gutterBottom>
                <strong>–ò–º—è —Ñ–∞–π–ª–∞:</strong> {selectedFile.name}
              </Typography>
              <Typography variant="body1" gutterBottom>
                <strong>–†–∞–∑–º–µ—Ä:</strong> {formatFileSize(selectedFile.size)}
              </Typography>
              <Typography variant="body1" gutterBottom>
                <strong>–¢–∏–ø:</strong> {selectedFile.type || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
              </Typography>
              <Typography variant="body1" gutterBottom>
                <strong>–ó–∞–≥—Ä—É–∂–µ–Ω:</strong> {selectedFile.uploadedAt?.toLocaleString()}
              </Typography>
              
              <Alert severity="info" sx={{ mt: 2 }}>
                –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö
              </Alert>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setPreviewDialogOpen(false)}>
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default EstimateAnalyzer;