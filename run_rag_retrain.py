#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
RUN RAG RETRAIN - –ó–ê–ü–£–°–ö –ü–ï–†–ï–û–ë–†–ê–ë–û–¢–ö–ò RAG
========================================

–ó–∞–ø—É—Å–∫ RAG-—Ç—Ä–µ–Ω–µ—Ä–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤.
"""

import os
import sys
import subprocess
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('run_rag_retrain.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = [
        "enterprise_rag_trainer_full.py",
        "clear_rag_data.py"
    ]
    
    for file_path in required_files:
        if not os.path.exists(file_path):
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {file_path}")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    docs_dir = "I:/docs/downloaded"
    if not os.path.exists(docs_dir):
        logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏: {docs_dir}")
        return False
    
    logger.info("‚úÖ –í—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    return True

def clear_rag_data():
    """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö RAG"""
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö RAG...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏
        result = subprocess.run([sys.executable, "clear_rag_data.py"], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ RAG –æ—á–∏—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        return False

def run_rag_trainer():
    """–ó–∞–ø—É—Å–∫ RAG-—Ç—Ä–µ–Ω–µ—Ä–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ RAG-—Ç—Ä–µ–Ω–µ—Ä–∞...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º RAG-—Ç—Ä–µ–Ω–µ—Ä
        result = subprocess.run([sys.executable, "enterprise_rag_trainer_full.py"], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            logger.info("‚úÖ RAG-—Ç—Ä–µ–Ω–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ RAG-—Ç—Ä–µ–Ω–µ—Ä–∞: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ RAG-—Ç—Ä–µ–Ω–µ—Ä–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –ù–ê–ß–ê–õ–û –ü–ï–†–ï–û–ë–†–ê–ë–û–¢–ö–ò RAG")
    logger.info("=" * 50)
    
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if not check_requirements():
            logger.error("‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
            return False
        
        # 2. –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ RAG
        if not clear_rag_data():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ RAG!")
            return False
        
        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º RAG-—Ç—Ä–µ–Ω–µ—Ä
        if not run_rag_trainer():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å RAG-—Ç—Ä–µ–Ω–µ—Ä!")
            return False
        
        logger.info("‚úÖ –ü–ï–†–ï–û–ë–†–ê–ë–û–¢–ö–ê RAG –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        logger.info("=" * 50)
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
