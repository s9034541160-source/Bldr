#!/usr/bin/env python3
"""
Test Async AI Processing Architecture
Verify non-blocking AI requests and concurrent handling
"""

import asyncio
import requests
import json
import time
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

API_BASE = 'http://localhost:8000'
API_TOKEN = os.getenv('API_TOKEN')

def get_auth_headers():
    """Get authentication headers for API calls"""
    headers = {
        "Content-Type": "application/json"
    }
    if API_TOKEN:
        headers['Authorization'] = f'Bearer {API_TOKEN}'
    return headers

async def test_concurrent_ai_requests():
    """Test multiple concurrent AI requests"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –∑–∞–ø—Ä–æ—Å–æ–≤...")
    
    # Check if API is responsive first
    try:
        response = requests.get(f'{API_BASE}/health', timeout=5)
        if response.status_code != 200:
            print(f"‚ùå API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
        return
    
    print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...")
    
    # Test 1: Submit multiple AI requests concurrently
    print("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ 3 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö AI –∑–∞–ø—Ä–æ—Å–æ–≤...")
    
    requests_data = [
        {
            "prompt": "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–µ—Ç–æ–Ω—É –ú300?",
            "model": "deepseek/deepseek-r1-0528-qwen3-8b"
        },
        {
            "prompt": "–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ—Ä–º –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞",
            "model": "deepseek/deepseek-r1-0528-qwen3-8b"
        },
        {
            "prompt": "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞—Ä–º–∞—Ç—É—Ä–µ –≤ –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö",
            "model": "deepseek/deepseek-r1-0528-qwen3-8b"
        }
    ]
    
    task_ids = []
    start_time = time.time()
    
    # Submit all requests quickly
    for i, request_data in enumerate(requests_data):
        try:
            response = requests.post(
                f'{API_BASE}/ai',
                json=request_data,
                headers=get_auth_headers(),
                timeout=10
            )
            
            if response.status_code == 200:
                result = response.json()
                task_id = result.get('task_id')
                task_ids.append(task_id)
                print(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i+1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {task_id}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {i+1}: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –∑–∞–ø—Ä–æ—Å–µ {i+1}: {str(e)}")
    
    submission_time = time.time() - start_time
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {submission_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    if len(task_ids) == 0:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
        return
    
    # Test 2: Check that API remains responsive during processing
    print(f"\nüèÉ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ API –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ {len(task_ids)} –∑–∞–¥–∞—á...")
    
    # Make a simple health check while AI requests are processing
    for i in range(5):
        try:
            health_start = time.time()
            response = requests.get(f'{API_BASE}/health', timeout=5)
            health_time = time.time() - health_start
            
            if response.status_code == 200:
                print(f"‚úÖ Health check {i+1}: {health_time:.3f}s - API –æ—Ç–∑—ã–≤—á–∏–≤")
            else:
                print(f"‚ö†Ô∏è Health check {i+1}: HTTP {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Health check {i+1} failed: {str(e)}")
        
        await asyncio.sleep(2)
    
    # Test 3: Monitor AI task progress
    print(f"\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á...")
    
    completed_tasks = set()
    max_wait_time = 300  # 5 minutes
    check_start = time.time()
    
    while len(completed_tasks) < len(task_ids) and (time.time() - check_start) < max_wait_time:
        for task_id in task_ids:
            if task_id in completed_tasks:
                continue
                
            try:
                response = requests.get(
                    f'{API_BASE}/ai/status/{task_id}',
                    headers=get_auth_headers(),
                    timeout=5
                )
                
                if response.status_code == 200:
                    status_data = response.json()
                    status = status_data.get('status')
                    stage = status_data.get('stage', '')
                    progress = status_data.get('progress', 0)
                    
                    print(f"üìã {task_id[:12]}: {status} - {stage} ({progress}%)")
                    
                    if status in ['completed', 'error', 'timeout']:
                        completed_tasks.add(task_id)
                        if status == 'completed' and 'result' in status_data:
                            result_preview = status_data['result'][:100] + "..." if len(status_data['result']) > 100 else status_data['result']
                            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç {task_id[:12]}: {result_preview}")
                        elif status == 'error':
                            print(f"‚ùå –û—à–∏–±–∫–∞ {task_id[:12]}: {status_data.get('error', 'Unknown error')}")
                            
                elif response.status_code == 404:
                    print(f"‚ùå –ó–∞–¥–∞—á–∞ {task_id[:12]} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    completed_tasks.add(task_id)  # Remove from monitoring
                else:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ {task_id[:12]}: {response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {task_id[:12]}: {str(e)}")
        
        if len(completed_tasks) < len(task_ids):
            await asyncio.sleep(10)  # Check every 10 seconds
    
    total_time = time.time() - start_time
    print(f"\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.1f} —Å–µ–∫—É–Ω–¥")
    print(f"üìà –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–¥–∞—á: {len(completed_tasks)}/{len(task_ids)}")
    
    # Test 4: List all active tasks
    print(f"\nüìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á...")
    try:
        response = requests.get(
            f'{API_BASE}/ai/tasks',
            headers=get_auth_headers(),
            timeout=5
        )
        
        if response.status_code == 200:
            tasks_data = response.json()
            active_count = tasks_data.get('active_tasks', 0)
            max_concurrent = tasks_data.get('max_concurrent', 0)
            print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active_count}, –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: {max_concurrent}")
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {str(e)}")

def test_multimedia_support():
    """Test multimedia data support"""
    print(f"\nüé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞...")
    
    # Test image data
    test_image_b64 = "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg=="
    
    multimedia_request = {
        "prompt": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–µ—Ä—Ç–µ–∂–∞",
        "model": "deepseek/deepseek-r1-0528-qwen3-8b",
        "image_data": test_image_b64
    }
    
    try:
        response = requests.post(
            f'{API_BASE}/ai',
            json=multimedia_request,
            headers=get_auth_headers(),
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –ú—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç: {result.get('task_id', 'No task ID')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ —Ç–µ—Å—Ç–∞: {str(e)}")

async def main():
    """Main test function"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π AI –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Bldr API")
    print("=" * 60)
    
    await test_concurrent_ai_requests()
    test_multimedia_support()
    
    print("\n‚ú® –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüìã –ö–ª—é—á–µ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
    print("  üîÑ –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ AI –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("  üöÄ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")  
    print("  üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ REST API")
    print("  üé¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–ª—å—Ç–∏–º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö (—Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å, –¥–æ–∫—É–º–µ–Ω—Ç—ã)")
    print("  üåê WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ")
    print("  üõ°Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")
    print("  üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")

if __name__ == '__main__':
    asyncio.run(main())