#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–ö–†–ò–ü–¢ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ú–ï–ù –£–ñ–ï –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–• –§–ê–ô–õ–û–í
==================================================

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ processed/, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ 
–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω—ã –∏–∑-–∑–∞ –±–∞–≥–∞ –≤ Stage 15.

–ü—Ä–æ–±–ª–µ–º–∞: –§–∞–π–ª—ã –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–ª–∏—Å—å –≤ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –°–ù–∏–ü –≤–º–µ—Å—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –°–ü
–†–µ—à–µ–Ω–∏–µ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
"""

import os
import json
import shutil
import re
from pathlib import Path
from typing import Dict, List, Optional

def load_processed_files_cache() -> Dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    cache_path = Path("I:/docs/downloaded/processed_files.json")
    if cache_path.exists():
        with open(cache_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

def extract_correct_document_name(metadata: Dict) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –ü–†–ê–í–ò–õ–¨–ù–û–ô –ª–æ–≥–∏–∫–æ–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
    doc_numbers = metadata.get('doc_numbers', [])
    if not doc_numbers:
        return "–î–æ–∫—É–º–µ–Ω—Ç"
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    prioritized_docs = []
    
    for doc in doc_numbers:
        priority = 0
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1 (–í—ã—Å—à–∏–π): –°–ü —Å –ø–æ–ª–Ω—ã–º –≥–æ–¥–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–ü 541.1325800.2024)
        if doc.startswith('–°–ü ') and ('.20' in doc or '.19' in doc):
            priority = 1000 + len(doc)  # –î–ª–∏–Ω–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –ø–æ–ª–Ω–æ—Ç–µ
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –°–ü —Å –ø–æ–ª–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –±–µ–∑ –≥–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–ü 88.13330)
        elif doc.startswith('–°–ü ') and '.' in doc and '.20' not in doc and '.19' not in doc:
            priority = 800 + len(doc)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –°–ü –∫–æ—Ä–æ—Ç–∫–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–ü 88)
        elif doc.startswith('–°–ü ') and '.' not in doc:
            priority = 600 + len(doc)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4: –°–ù–∏–ü —Å –ø–æ–ª–Ω—ã–º –≥–æ–¥–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–ù–∏–ü 23-03-2003)
        elif doc.startswith('–°–ù–∏–ü ') and ('.20' in doc or '.19' in doc or '-' in doc):
            priority = 400 + len(doc)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 5: –°–ù–∏–ü –∫–æ—Ä–æ—Ç–∫–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–ù–∏–ü 2)
        elif doc.startswith('–°–ù–∏–ü ') and '.' not in doc and '-' not in doc:
            priority = 200 + len(doc)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 6: –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
        else:
            priority = 100 + len(doc)
        
        prioritized_docs.append((priority, doc))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    prioritized_docs.sort(key=lambda x: x[0], reverse=True)
    
    if prioritized_docs:
        return prioritized_docs[0][1]
    
    return "–î–æ–∫—É–º–µ–Ω—Ç"

def create_safe_filename(title: str) -> str:
    """–°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞"""
    if not title or title == '–î–æ–∫—É–º–µ–Ω—Ç':
        return '–î–æ–∫—É–º–µ–Ω—Ç'
    
    # –û—á–∏—â–∞–µ–º –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    safe_title = re.sub(r'[<>:"/\\|?*]', '_', title)
    safe_title = re.sub(r'\s+', '_', safe_title)
    safe_title = re.sub(r'_+', '_', safe_title)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(safe_title) > 80:
        safe_title = safe_title[:80]
        last_underscore = safe_title.rfind('_')
        if last_underscore > 50:
            safe_title = safe_title[:last_underscore]
    
    safe_title = safe_title.strip('_')
    return safe_title if safe_title else "–î–æ–∫—É–º–µ–Ω—Ç"

def is_incorrectly_named_file(filename: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º"""
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏ –°–ù–∏–ü
    if re.search(r'–°–ù–∏–ü_\d+\.\d+\.\d+', filename):
        return True
    
    # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –°–ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–ü_60 –≤–º–µ—Å—Ç–æ –°–ü_490)
    if re.search(r'–°–ü_\d+\.\d+\.\d+', filename):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –°–ü
        wrong_sps = ['–°–ü_60', '–°–ü_71', '–°–ü_158']  # –î–æ–±–∞–≤—å—Ç–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
        for wrong_sp in wrong_sps:
            if wrong_sp in filename:
                return True
    
    return False

def fix_processed_filenames():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
    
    print("üîß –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ú–ï–ù –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–• –§–ê–ô–õ–û–í")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    processed_cache = load_processed_files_cache()
    print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω –∫–µ—à: {len(processed_cache)} —Ñ–∞–π–ª–æ–≤")
    
    # –ü–∞–ø–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    processed_dir = Path("I:/docs/processed/norms")
    if not processed_dir.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {processed_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –°—á–µ—Ç—á–∏–∫–∏
    fixed_count = 0
    skipped_count = 0
    error_count = 0
    
    print(f"üîç –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É: {processed_dir}")
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–∞–π–ª–∞–º –≤ –ø–∞–ø–∫–µ processed
    for file_path in processed_dir.glob("*.pdf"):
        filename = file_path.name
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –∏–º—è —Ñ–∞–π–ª–∞
        if not is_incorrectly_named_file(filename):
            skipped_count += 1
            continue
        
        print(f"\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º: {filename}")
        
        # –ò—â–µ–º —Ñ–∞–π–ª –≤ –∫–µ—à–µ –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –ø—É—Ç–∏
        original_path = None
        file_metadata = None
        
        for cache_path, cache_data in processed_cache.items():
            if cache_data.get('original_path') == str(file_path):
                original_path = cache_path
                file_metadata = cache_data
                break
        
        if not file_metadata:
            print(f"   ‚ö†Ô∏è –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {filename}")
            error_count += 1
            continue
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        correct_name = extract_correct_document_name(file_metadata)
        print(f"   üìã –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {correct_name}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        safe_name = create_safe_filename(correct_name)
        new_filename = f"{safe_name}.pdf"
        new_path = file_path.parent / new_filename
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        if new_path.exists() and new_path != file_path:
            print(f"   ‚ö†Ô∏è –§–∞–π–ª {new_filename} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            error_count += 1
            continue
        
        try:
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
            shutil.move(str(file_path), str(new_path))
            print(f"   ‚úÖ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: {filename} -> {new_filename}")
            fixed_count += 1
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: {e}")
            error_count += 1
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {fixed_count}")
    print(f"   ‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {skipped_count}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
    print("=" * 60)

if __name__ == "__main__":
    fix_processed_filenames()

