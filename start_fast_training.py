#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ RAG-–æ–±—É—á–µ–Ω–∏—è –≤ FAST —Ä–µ–∂–∏–º–µ
"""

import requests
import json
import time
import os

# API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"

def create_test_token():
    """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    import jwt
    from datetime import datetime, timedelta
    
    payload = {
        "sub": "test_user",
        "exp": datetime.utcnow() + timedelta(hours=24)
    }
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–µ–∫—Ä–µ—Ç
    token = jwt.encode(payload, "your-secret-key-change-in-production", algorithm="HS256")
    return token

def start_fast_training():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
    print("üöÄ –ó–ê–ü–£–°–ö –ë–´–°–¢–†–û–ì–û RAG-–û–ë–£–ß–ï–ù–ò–Ø!")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
    token = create_test_token()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    custom_dir = "I:/docs/downloaded"
    if not os.path.exists(custom_dir):
        print(f"‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {custom_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("üí° –ü–æ–ø—Ä–æ–±—É–µ–º —Å –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π...")
        custom_dir = None
    else:
        files_count = len([f for f in os.listdir(custom_dir) if os.path.isfile(os.path.join(custom_dir, f))])
        print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {files_count} —Ñ–∞–π–ª–æ–≤ –≤ {custom_dir}")
    
    # –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
    request_data = {
        "fast_mode": True,
        "custom_dir": custom_dir
    }
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    try:
        print(f"‚ö° –ó–∞–ø—É—Å–∫ FAST MODE –æ–±—É—á–µ–Ω–∏—è...")
        print(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {custom_dir or '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
        response = requests.post(
            f"{API_BASE_URL}/train",
            json=request_data,
            headers=headers,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ {result['message']}")
            print(f"üèÉ –†–µ–∂–∏–º: {'FAST' if result.get('fast_mode') else 'NORMAL'}")
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            print("\nüìä –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ì–†–ï–°–°–ê:")
            print("-" * 50)
            
            last_progress = -1
            start_time = time.time()
            
            while True:
                time.sleep(3)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
                
                try:
                    status_response = requests.get(
                        f"{API_BASE_URL}/api/training/status",
                        headers=headers,
                        timeout=10
                    )
                    
                    if status_response.status_code == 200:
                        status = status_response.json()
                        
                        progress = status.get("progress", 0)
                        stage = status.get("current_stage", "")
                        message = status.get("message", "")
                        mode = status.get("mode", "normal")
                        is_training = status.get("is_training", False)
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
                        if progress != last_progress or not is_training:
                            elapsed = time.time() - start_time
                            print(f"[{mode.upper()}] {stage}: {message} ({progress}%) - {elapsed:.1f}s")
                            last_progress = progress
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                        if not is_training:
                            if status.get("status") == "success" or stage == "completed":
                                elapsed = time.time() - start_time
                                print(f"\nüéâ –ë–´–°–¢–†–û–ï –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
                                print(f"‚è±Ô∏è –í—Ä–µ–º—è: {elapsed:.1f} —Å–µ–∫—É–Ω–¥")
                                print(f"üöÄ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ: ~{elapsed*7/elapsed:.1f}x –±—ã—Å—Ç—Ä–µ–µ –æ–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
                                break
                            elif "error" in stage or "error" in status.get("status", ""):
                                print(f"\n‚ùå –û—à–∏–±–∫–∞: {message}")
                                break
                            else:
                                print(f"\n‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {message}")
                                break
                    else:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {status_response.status_code}")
                        break
                        
                except requests.exceptions.RequestException as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
                    time.sleep(5)  # –ñ–¥–µ–º –¥–æ–ª—å—à–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                    continue
                    
                # –¢–∞–π–º–∞—É—Ç —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
                if time.time() - start_time > 600:
                    print("‚è∞ –¢–∞–π–º–∞—É—Ç - –æ–±—É—á–µ–Ω–∏–µ –∏–¥–µ—Ç –¥–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç")
                    break
                    
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {response.status_code}")
            print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    start_fast_training()