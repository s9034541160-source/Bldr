#!/usr/bin/env python3
"""
–í—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ RAG –æ–±—É—á–µ–Ω–∏—è –±–µ–∑ Neo4j 
(—Å –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é, –Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)
"""

import os
import requests
import json
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

API_BASE = "http://localhost:8000"
API_TOKEN = os.getenv("API_TOKEN")

def start_training_without_neo4j():
    """–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –±–µ–∑ Neo4j"""
    print("‚ö†Ô∏è  –í–†–ï–ú–ï–ù–ù–´–ô –∑–∞–ø—É—Å–∫ RAG –æ–±—É—á–µ–Ω–∏—è –±–µ–∑ Neo4j")
    print("=" * 55)
    print("üîß –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞:")
    print("   ‚ùå –ù–µ—Ç –≥—Ä–∞—Ñ–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏") 
    print("   ‚ùå –ù–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π —Ä–∞–±–æ—Ç")
    print("   ‚ùå –ù–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–≤—è–∑–µ–π")
    print("   ‚úÖ –ï—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Qdrant")
    print("   ‚úÖ –ï—Å—Ç—å Stage 0 –ù–¢–î –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞")
    print("   ‚úÖ –ï—Å—Ç—å –±–∞–∑–æ–≤–æ–µ —á–∞–Ω–∫–∏–Ω–≥ –∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∏")
    print()
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º Neo4j –≤ .env
    print("üîß –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º Neo4j...")
    update_env_skip_neo4j(True)
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–µ–∫–µ–Ω–¥–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∫–µ–Ω–¥ —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É")
    print("   1. –ó–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ FastAPI Backend")
    print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞: python -m uvicorn core.bldr_api:app --host 127.0.0.1 --port 8000 --reload")
    print()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    user_input = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é? (y/N): ").lower().strip()
    if user_input not in ['y', 'yes']:
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    
    print("\n‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∫–µ–Ω–¥, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ Enter...")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –∫–æ–≥–¥–∞ –±–µ–∫–µ–Ω–¥ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω...")
    
    # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
    if not API_TOKEN:
        print("‚ùå –ù–µ—Ç API —Ç–æ–∫–µ–Ω–∞")
        return False
    
    headers = {"Authorization": f"Bearer {API_TOKEN}"}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ API
    try:
        response = requests.get(f"{API_BASE}/health", timeout=10, headers=headers)
        if response.status_code != 200:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return False
        print("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        return False
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    train_data = {
        "custom_dir": "I:/docs/downloaded"
    }
    
    print(f"üìÇ –ü–∞–ø–∫–∞: {train_data['custom_dir']}")
    print(f"üìä –§–∞–π–ª–æ–≤: 1168 –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ù–¢–î")
    print(f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
    
    try:
        print("\nüì§ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ RAG –æ–±—É—á–µ–Ω–∏–µ...")
        
        response = requests.post(
            f"{API_BASE}/train",
            json=train_data,
            headers=headers,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
            print(f"üìã –û—Ç–≤–µ—Ç: {result}")
            print("\nüéØ RAG –æ–±—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ (–±–µ–∑ Neo4j)")
            print("üîÑ –ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            print("‚è±Ô∏è  –í—Ä–µ–º—è: ~2-4 —á–∞—Å–∞")
            print("\nüí° –ö–æ–≥–¥–∞ Neo4j –∑–∞—Ä–∞–±–æ—Ç–∞–µ—Ç:")
            print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SKIP_NEO4J=false –≤ .env")
            print("   2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∫–µ–Ω–¥")
            print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å–Ω–æ–≤–∞")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"üìÑ –î–µ—Ç–∞–ª–∏: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return False

def update_env_skip_neo4j(skip):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SKIP_NEO4J –≤ .env —Ñ–∞–π–ª–µ"""
    try:
        with open(".env", 'r') as f:
            lines = f.readlines()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º SKIP_NEO4J
        updated = False
        for i, line in enumerate(lines):
            if line.startswith("SKIP_NEO4J="):
                lines[i] = f"SKIP_NEO4J={'true' if skip else 'false'}\r\n"
                updated = True
                break
        
        if not updated:
            lines.append(f"SKIP_NEO4J={'true' if skip else 'false'}\r\n")
        
        with open(".env", 'w') as f:
            f.writelines(lines)
        
        print(f"‚úÖ SKIP_NEO4J —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ {'true' if skip else 'false'}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env: {e}")

def main():
    success = start_training_without_neo4j()
    if success:
        print("\nüöÄ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ RAG –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
        print("üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ python quick_search_test.py –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")

if __name__ == "__main__":
    main()