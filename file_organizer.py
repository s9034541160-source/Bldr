#!/usr/bin/env python3
"""
File Organizer Module
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ –ø–∞–ø–∫–∞–º –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
"""

import os
import shutil
import json
from pathlib import Path
from typing import Dict, Any, Optional, List
import logging

logger = logging.getLogger(__name__)

class DocumentFileOrganizer:
    """–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, base_dir: str = "I:/docs"):
        self.base_dir = Path(base_dir)
        self.downloaded_dir = self.base_dir / "downloaded"
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –ø–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.folder_structure = {
            # –ù–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            'norms': {
                'folder': 'norms',
                'subfolders': {
                    'gost': 'norms/gost',
                    'snip': 'norms/snip', 
                    'sp': 'norms/sp',
                    'general': 'norms/general'
                }
            },
            
            # –§–∏–Ω–∞–Ω—Å—ã –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è
            'finance': {
                'folder': 'finance',
                'subfolders': {
                    'accounting': 'finance/accounting',
                    'budgeting': 'finance/budgeting',
                    'reports': 'finance/reports',
                    'tax': 'finance/tax',
                    'general': 'finance/general'
                }
            },
            
            # HR / –ö–∞–¥—Ä—ã
            'hr': {
                'folder': 'hr',
                'subfolders': {
                    'policies': 'hr/policies',
                    'contracts': 'hr/contracts',
                    'onboarding': 'hr/onboarding',
                    'training': 'hr/training',
                    'general': 'hr/general'
                }
            },
            
            # –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è/–ø–æ–∂–∞—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, –û–¢/–¢–ë
            'safety': {
                'folder': 'safety',
                'subfolders': {
                    'industrial': 'safety/industrial',
                    'fire': 'safety/fire',
                    'labor': 'safety/labor',
                    'tb': 'safety/tech_safety',
                    'general': 'safety/general'
                }
            },
            
            # –≠–∫–æ–ª–æ–≥–∏—è
            'ecology': {
                'folder': 'ecology',
                'subfolders': {
                    'standards': 'ecology/standards',
                    'reports': 'ecology/reports',
                    'permits': 'ecology/permits',
                    'general': 'ecology/general'
                }
            },
            
            # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–∫–Ω–∏–≥–∏, –ª–µ–∫—Ü–∏–∏, –º–µ—Ç–æ–¥–∏—á–∫–∏)
            'education': {
                'folder': 'education',
                'subfolders': {
                    'books': 'education/books',
                    'lectures': 'education/lectures',
                    'guidelines': 'education/guidelines',
                    'tutorials': 'education/tutorials',
                    'general': 'education/general'
                }
            },
            
            # –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è / –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ / —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã
            'operations': {
                'folder': 'operations',
                'subfolders': {
                    'exec_docs': 'operations/exec_docs',
                    'instructions': 'operations/instructions',
                    'regulations': 'operations/regulations',
                    'general': 'operations/general'
                }
            },
            
            # –°–º–µ—Ç—ã –∏ —Ä–∞—Å—á–µ—Ç—ã
            'estimates': {
                'folder': 'estimates',
                'subfolders': {
                    'gesn': 'estimates/gesn',
                    'fer': 'estimates/fer',
                    'ter': 'estimates/ter',
                    'local': 'estimates/local_estimates',
                    'summary': 'estimates/summary_estimates'
                }
            },
            
            # –ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            'projects': {
                'folder': 'projects',
                'subfolders': {
                    'ppr': 'projects/ppr',
                    'pto': 'projects/pto',
                    'drawings': 'projects/drawings',
                    'specifications': 'projects/specifications'
                }
            },
            
            # –î–æ–≥–æ–≤–æ—Ä—ã –∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
            'contracts': {
                'folder': 'contracts',
                'subfolders': {
                    'construction': 'contracts/construction',
                    'supply': 'contracts/supply',
                    'service': 'contracts/service',
                    'subcontract': 'contracts/subcontract'
                }
            },
            
            # –û—Ç—á–µ—Ç—ã –∏ –∞–∫—Ç—ã
            'reports': {
                'folder': 'reports',
                'subfolders': {
                    'acts': 'reports/acts',
                    'certificates': 'reports/certificates',
                    'inspections': 'reports/inspections',
                    'progress': 'reports/progress'
                }
            },
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            'technical': {
                'folder': 'technical',
                'subfolders': {
                    'manuals': 'technical/manuals',
                    'specifications': 'technical/specifications',
                    'catalogs': 'technical/catalogs',
                    'datasheets': 'technical/datasheets'
                }
            },
            
            # –ü—Ä–æ—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            'other': {
                'folder': 'other',
                'subfolders': {
                    'letters': 'other/letters',
                    'protocols': 'other/protocols',
                    'presentations': 'other/presentations',
                    'unknown': 'other/unknown'
                }
            }
        }
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
        self._create_folder_structure()
        
        # –§–∞–π–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π
        self.moves_log = self.base_dir / "file_moves.json"
        self.moves_history = self._load_moves_history()

    def _create_folder_structure(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫"""
        logger.info("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤...")
        
        created_folders = []
        
        for doc_type, config in self.folder_structure.items():
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É
            main_folder = self.base_dir / config['folder']
            main_folder.mkdir(parents=True, exist_ok=True)
            created_folders.append(str(main_folder))
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
            for subfolder_key, subfolder_path in config['subfolders'].items():
                subfolder = self.base_dir / subfolder_path
                subfolder.mkdir(parents=True, exist_ok=True)
                created_folders.append(str(subfolder))
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–∞–ø–æ–∫: {len(created_folders)}")

    def _load_moves_history(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π"""
        if self.moves_log.exists():
            try:
                with open(self.moves_log, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π: {e}")
        
        return {'moves': [], 'stats': {}}

    def _save_moves_history(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π"""
        try:
            with open(self.moves_log, 'w', encoding='utf-8') as f:
                json.dump(self.moves_history, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π: {e}")

    def organize_file(self, file_path: str, doc_type_info: Dict[str, Any], 
                     structural_data: Dict[str, Any] = None) -> Dict[str, Any]:
        """
        –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–æ —Ç–∏–ø—É –¥–æ–∫—É–º–µ–Ω—Ç–∞
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            doc_type_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —ç—Ç–∞–ø–∞ 4
            structural_data: –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç—Ç–∞–ø–∞ 5
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏
        """
        try:
            source_path = Path(file_path)
            if not source_path.exists():
                return {
                    'status': 'error',
                    'error': f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}',
                    'original_path': file_path,
                    'new_path': None
                }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
            target_folder = self._determine_target_folder(doc_type_info, structural_data, source_path)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            target_path = self._get_unique_target_path(source_path, target_folder)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
            logger.info(f"üì¶ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {source_path.name}")
            logger.info(f"   –ò–∑: {source_path}")
            logger.info(f"   –í:  {target_path}")
            
            # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            target_path.parent.mkdir(parents=True, exist_ok=True)
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
            shutil.move(str(source_path), str(target_path))
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            from datetime import datetime
            move_record = {
                'timestamp': datetime.now().isoformat(),
                'original_path': str(source_path),
                'new_path': str(target_path),
                'doc_type': doc_type_info.get('doc_type', 'unknown'),
                'doc_subtype': doc_type_info.get('doc_subtype', 'unknown'),
                'confidence': doc_type_info.get('confidence', 0.0),
                'file_size': target_path.stat().st_size,
                'reason': self._get_move_reason(doc_type_info, structural_data)
            }
            
            self.moves_history['moves'].append(move_record)
            self._update_stats(doc_type_info['doc_type'])
            self._save_moves_history()
            
            logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤: {target_path.parent.name}/{target_path.name}")
            
            return {
                'status': 'success',
                'original_path': str(source_path),
                'new_path': str(target_path),
                'target_folder': str(target_path.parent),
                'doc_type': doc_type_info.get('doc_type'),
                'move_reason': move_record['reason']
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return {
                'status': 'error',
                'error': str(e),
                'original_path': file_path,
                'new_path': None
            }

    def _determine_target_folder(self, doc_type_info: Dict, structural_data: Dict, 
                                source_path: Path) -> Path:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–∏ –¥–ª—è —Ñ–∞–π–ª–∞"""
        
        doc_type = doc_type_info.get('doc_type', 'other')
        doc_subtype = doc_type_info.get('doc_subtype', 'general')
        filename = source_path.name.lower()
        confidence = float(doc_type_info.get('confidence', 0.0) or 0.0)
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –¥–æ–º–µ–Ω–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–∏ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–∏–ø–∞)
        domain = self._detect_domain_from_filename(filename)
        if domain and (doc_type == 'other' or confidence < 0.6):
            # –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è –∏–ª–∏ —Ç–∏–ø 'other', –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω–Ω—É—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
            sub = domain.get('sub', 'general')
            dom_key = domain['key']
            if dom_key in self.folder_structure:
                subfolders = self.folder_structure[dom_key]['subfolders']
                return self.base_dir / subfolders.get(sub, list(subfolders.values())[0])
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if doc_type == 'norms':
            if '–≥–æ—Å—Ç' in filename or 'gost' in filename or 'gost r' in filename or 'iso' in filename:
                return self.base_dir / self.folder_structure['norms']['subfolders']['gost']
            elif '—Å–Ω–∏–ø' in filename or 'snip' in filename:
                return self.base_dir / self.folder_structure['norms']['subfolders']['snip']
            elif any(sp_marker in filename for sp_marker in ['—Å–ø ', ' sp', '—Å–≤–æ–¥ –ø—Ä–∞–≤–∏–ª', 'svod pravil']):
                return self.base_dir / self.folder_structure['norms']['subfolders']['sp']
            else:
                return self.base_dir / self.folder_structure['norms']['subfolders']['general']
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–º–µ—Ç
        elif doc_type == 'estimates':
            if '–≥—ç—Å–Ω' in filename or 'gesn' in filename:
                return self.base_dir / self.folder_structure['estimates']['subfolders']['gesn']
            elif '—Ñ–µ—Ä' in filename or 'fer' in filename:
                return self.base_dir / self.folder_structure['estimates']['subfolders']['fer']
            elif '—Ç–µ—Ä' in filename or 'ter' in filename:
                return self.base_dir / self.folder_structure['estimates']['subfolders']['ter']
            elif '–ª–æ–∫–∞–ª—å–Ω' in filename or 'local' in filename:
                return self.base_dir / self.folder_structure['estimates']['subfolders']['local']
            else:
                return self.base_dir / self.folder_structure['estimates']['subfolders']['summary']
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
        elif doc_type == 'projects':
            if doc_subtype == 'ppr' or '–ø–ø—Ä' in filename:
                return self.base_dir / self.folder_structure['projects']['subfolders']['ppr']
            elif doc_subtype == 'pto' or '–ø—Ç–æ' in filename:
                return self.base_dir / self.folder_structure['projects']['subfolders']['pto']
            elif any(drawing_marker in filename for drawing_marker in ['—á–µ—Ä—Ç–µ–∂', '–ø–ª–∞–Ω', '—Å—Ö–µ–º–∞']):
                return self.base_dir / self.folder_structure['projects']['subfolders']['drawings']
            else:
                return self.base_dir / self.folder_structure['projects']['subfolders']['specifications']
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É
        elif doc_type in self.folder_structure:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ç–∏–ø –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∞–ø–∫–∞
            if doc_subtype in self.folder_structure[doc_type]['subfolders']:
                subfolder_path = self.folder_structure[doc_type]['subfolders'][doc_subtype]
                return self.base_dir / subfolder_path
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –ø–æ–¥–ø–∞–ø–∫—É
                first_subfolder = list(self.folder_structure[doc_type]['subfolders'].values())[0]
                return self.base_dir / first_subfolder
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –≤ –ø–∞–ø–∫—É "other/unknown"
        return self.base_dir / self.folder_structure['other']['subfolders']['unknown']

    def _detect_domain_from_filename(self, filename: str) -> Dict[str, str]:
        """–≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –¥–æ–º–µ–Ω–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        # –§–∏–Ω–∞–Ω—Å—ã/–±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è
        if any(k in filename for k in ['—Å–º–µ—Ç', 'budget', '—Å–º–µ—Ç–∞', '–∫–±–∫', '–∫–∞—Å—Å–æ–≤', '–±—é–¥–∂–µ—Ç', '–±–∞–ª–∞–Ω—Å', '–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å', '—Ñ–∏–Ω–∞–Ω', '–ø–ª–∞–Ω-—Ñ–∞–∫—Ç', '–Ω–∞–ª–æ–≥', '–Ω–¥—Å', 'income', 'expense']):
            if any(k in filename for k in ['–Ω–∞–ª–æ–≥', 'tax', '–Ω–¥—Å']):
                return {'key': 'finance', 'sub': 'tax'}
            if any(k in filename for k in ['–±—é–¥–∂–µ—Ç', 'budget', '–ø–ª–∞–Ω-—Ñ–∞–∫—Ç']):
                return {'key': 'finance', 'sub': 'budgeting'}
            if any(k in filename for k in ['–±–∞–ª–∞–Ω—Å', '–æ—Ç—á–µ—Ç', 'report']):
                return {'key': 'finance', 'sub': 'reports'}
            return {'key': 'finance', 'sub': 'general'}
        
        # HR / –∫–∞–¥—Ä—ã
        if any(k in filename for k in ['—Ç—Ä—É–¥–æ–≤', '—à—Ç–∞—Ç–Ω', '–¥–æ–ª–∂–Ω–æ—Å—Ç–Ω', 'hr', '–∫–∞–¥—Ä–æ–≤', '–ø—Ä–∏–µ–º', '—É–≤–æ–ª—å–Ω', '—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞', '–æ—Ç–ø—É—Å–∫']):
            if any(k in filename for k in ['–¥–æ–ª–∂–Ω–æ—Å—Ç–Ω', 'policy', '–ø–æ–ª–∏—Ç–∏–∫']):
                return {'key': 'hr', 'sub': 'policies'}
            if any(k in filename for k in ['–∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂', '–æ–±—É—á–µ–Ω–∏–µ', 'training']):
                return {'key': 'hr', 'sub': 'training'}
            return {'key': 'hr', 'sub': 'general'}
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–ø—Ä–æ–º/–ø–æ–∂/–æ—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞/–¢–ë)
        if any(k in filename for k in ['–ø–æ–∂–∞—Ä', '–æ—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞', '—Ç–±', '—Ç–µ—Ö–Ω–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', '–ø—Ä–æ–º–±–µ–∑', '–æ—Ö—Ä. —Ç—Ä—É–¥–∞', 'pb', '–ø–±']):
            if any(k in filename for k in ['–ø–æ–∂–∞—Ä', 'fire']):
                return {'key': 'safety', 'sub': 'fire'}
            if any(k in filename for k in ['–æ—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞', '—Ç–±', '—Ç–µ—Ö–Ω–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏']):
                return {'key': 'safety', 'sub': 'labor'}
            return {'key': 'safety', 'sub': 'industrial'}
        
        # –≠–∫–æ–ª–æ–≥–∏—è
        if any(k in filename for k in ['—ç–∫–æ–ª–æ–≥', 'ecolog', '–ø—Ä–∏—Ä–æ–¥–æ–æ—Ö—Ä', '—ç–º–∏—Å—Å–∏–∏', '–æ—Ç—Ö–æ–¥—ã', 'eia']):
            if any(k in filename for k in ['–æ—Ç—á–µ—Ç', 'report']):
                return {'key': 'ecology', 'sub': 'reports'}
            if any(k in filename for k in ['—Ä–∞–∑—Ä–µ—à–µ–Ω', 'permit']):
                return {'key': 'ecology', 'sub': 'permits'}
            return {'key': 'ecology', 'sub': 'standards'}
        
        # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–∫–Ω–∏–≥–∏/–ª–µ–∫—Ü–∏–∏/–º–µ—Ç–æ–¥–∏—á–∫–∏)
        if any(k in filename for k in ['–∫–Ω–∏–≥–∞', 'book', '–ª–µ–∫—Ü–∏', 'lecture', '–º–µ—Ç–æ–¥–∏—á–µ—Å–∫', 'guideline', '—É—á–µ–±–Ω', '–ø–æ—Å–æ–±–∏–µ', 'tutorial']):
            if any(k in filename for k in ['–ª–µ–∫—Ü–∏', 'lecture']):
                return {'key': 'education', 'sub': 'lectures'}
            if any(k in filename for k in ['–º–µ—Ç–æ–¥–∏—á–µ—Å–∫', 'guideline']):
                return {'key': 'education', 'sub': 'guidelines'}
            if any(k in filename for k in ['tutorial', '–ø–æ—Å–æ–±–∏–µ']):
                return {'key': 'education', 'sub': 'tutorials'}
            return {'key': 'education', 'sub': 'books'}
        
        # –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã)
        if any(k in filename for k in ['–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω', '—Ä–µ–≥–ª–∞–º–µ–Ω—Ç', '–∏–Ω—Å—Ç—Ä—É–∫—Ü', 'procedure', 'sop']):
            if any(k in filename for k in ['–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω', 'exec']):
                return {'key': 'operations', 'sub': 'exec_docs'}
            if any(k in filename for k in ['—Ä–µ–≥–ª–∞–º–µ–Ω—Ç', 'regulation']):
                return {'key': 'operations', 'sub': 'regulations'}
            return {'key': 'operations', 'sub': 'instructions'}
        
        # –°–º–µ—Ç—ã (–µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –æ–±—â–∏–π finance)
        if any(k in filename for k in ['–≥—ç—Å–Ω', 'gesn', '—Ñ–µ—Ä', 'fer', '—Ç–µ—Ä', 'ter']):
            return {'key': 'estimates', 'sub': 'gesn' if '–≥—ç—Å–Ω' in filename or 'gesn' in filename else ('fer' if '—Ñ–µ—Ä' in filename or 'fer' in filename else 'ter')}
        
        return {}

    def _get_unique_target_path(self, source_path: Path, target_folder: Path) -> Path:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–∞ –≤ —Ü–µ–ª–µ–≤–æ–π –ø–∞–ø–∫–µ"""
        
        base_name = source_path.stem
        extension = source_path.suffix
        target_path = target_folder / source_path.name
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä
        counter = 1
        while target_path.exists():
            new_name = f"{base_name}_{counter}{extension}"
            target_path = target_folder / new_name
            counter += 1
        
        return target_path

    def _get_move_reason(self, doc_type_info: Dict, structural_data: Dict) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        doc_type = doc_type_info.get('doc_type', 'unknown')
        confidence = doc_type_info.get('confidence', 0.0)
        
        reasons = []
        
        if confidence > 0.8:
            reasons.append(f"–í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ ({confidence:.2f})")
        elif confidence > 0.6:
            reasons.append(f"–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ ({confidence:.2f})")
        else:
            reasons.append(f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ç–∏–ø–∞ ({confidence:.2f})")
        
        if structural_data:
            sections = len(structural_data.get('sections', []))
            if sections > 0:
                reasons.append(f"–ù–∞–π–¥–µ–Ω–æ —Ä–∞–∑–¥–µ–ª–æ–≤: {sections}")
        
        return "; ".join(reasons)

    def _update_stats(self, doc_type: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π"""
        if 'stats' not in self.moves_history:
            self.moves_history['stats'] = {}
        
        if doc_type not in self.moves_history['stats']:
            self.moves_history['stats'][doc_type] = 0
        
        self.moves_history['stats'][doc_type] += 1

    def get_organization_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
        
        stats = {
            'total_moves': len(self.moves_history.get('moves', [])),
            'by_type': self.moves_history.get('stats', {}),
            'folder_contents': {},
            'recent_moves': []
        }
        
        # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–µ
        for doc_type, config in self.folder_structure.items():
            for subfolder_key, subfolder_path in config['subfolders'].items():
                folder_path = self.base_dir / subfolder_path
                if folder_path.exists():
                    file_count = len(list(folder_path.glob('*.*')))
                    stats['folder_contents'][subfolder_path] = file_count
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π
        recent_moves = self.moves_history.get('moves', [])[-10:]
        stats['recent_moves'] = recent_moves
        
        return stats

    def undo_last_move(self) -> Dict[str, Any]:
        """–û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è"""
        
        if not self.moves_history.get('moves'):
            return {
                'status': 'error',
                'error': '–ù–µ—Ç –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã'
            }
        
        try:
            last_move = self.moves_history['moves'].pop()
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ
            current_path = Path(last_move['new_path'])
            original_path = Path(last_move['original_path'])
            
            if current_path.exists():
                # –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                original_path.parent.mkdir(parents=True, exist_ok=True)
                shutil.move(str(current_path), str(original_path))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                doc_type = last_move['doc_type']
                if doc_type in self.moves_history['stats']:
                    self.moves_history['stats'][doc_type] -= 1
                    if self.moves_history['stats'][doc_type] <= 0:
                        del self.moves_history['stats'][doc_type]
                
                self._save_moves_history()
                
                logger.info(f"‚Ü©Ô∏è –û—Ç–º–µ–Ω–µ–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ: {original_path.name}")
                
                return {
                    'status': 'success',
                    'restored_path': str(original_path),
                    'move_info': last_move
                }
            else:
                return {
                    'status': 'error',
                    'error': f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–º–µ–Ω—ã: {current_path}'
                }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: {e}")
            return {
                'status': 'error',
                'error': str(e)
            }


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RAG-—Ç—Ä–µ–Ω–µ—Ä–æ–º
def organize_document_file(file_path: str, doc_type_info: Dict[str, Any], 
                          structural_data: Dict[str, Any] = None, 
                          base_dir: str = "I:/docs") -> Dict[str, Any]:
    """
    –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É
    
    Args:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        doc_type_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        structural_data: –°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        base_dir: –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
    """
    organizer = DocumentFileOrganizer(base_dir)
    return organizer.organize_file(file_path, doc_type_info, structural_data)


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    organizer = DocumentFileOrganizer()
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    test_doc_info = {
        'doc_type': 'norms',
        'doc_subtype': 'gost',
        'confidence': 0.95
    }
    
    test_structural = {
        'sections': ['–†–∞–∑–¥–µ–ª 1', '–†–∞–∑–¥–µ–ª 2'],
        'paragraphs': []
    }
    
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤:")
    stats = organizer.get_organization_stats()
    print(json.dumps(stats, ensure_ascii=False, indent=2))