#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Comprehensive Test for Expanded Stage 0 - NTD Preprocessing System
Tests automatic document sorting across all subject areas:
- Construction, Finance, Accounting, Safety, HR, Ecology, Training
"""
import os
import sys
import shutil
from pathlib import Path

# Add current directory to path
sys.path.insert(0, os.getcwd())

from core.ntd_preprocessor import _determine_document_category, initialize_ntd_system, ntd_preprocess

def show_expanded_baza_structure():
    """Show current expanded –ë–ê–ó–ê structure"""
    print("\nüìÅ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ë–ê–ó–ê:")
    print("=" * 80)
    
    base_path = Path("I:/docs/–ë–ê–ó–ê")
    if not base_path.exists():
        print("‚ùå –ü–∞–ø–∫–∞ –ë–ê–ó–ê –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    total_files = 0
    categories = {
        "üèóÔ∏è –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–û": [],
        "üí∞ –§–ò–ù–ê–ù–°–´": [],
        "üìä –ë–£–•–ì–ê–õ–¢–ï–†–ò–Ø": [],
        "‚ö†Ô∏è –ü–†–û–ú–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨": [],
        "üõ°Ô∏è –û–•–†–ê–ù–ê –¢–†–£–î–ê": [],
        "üë• HR –ò –ö–ê–î–†–´": [],
        "üåø –≠–ö–û–õ–û–ì–ò–Ø": [],
        "üìö –û–ë–£–ß–ï–ù–ò–ï": [],
        "üóÇÔ∏è –ü–†–û–ß–ï–ï": []
    }
    
    for folder in sorted(base_path.iterdir()):
        if folder.is_dir():
            files = [f for f in folder.iterdir() if f.is_file()]
            file_count = len(files)
            total_files += file_count
            
            folder_name = folder.name
            # Categorize folders by subject
            if "–°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–û" in folder_name:
                categories["üèóÔ∏è –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–û"].append((folder_name, file_count))
            elif "–§–ò–ù–ê–ù–°–´" in folder_name:
                categories["üí∞ –§–ò–ù–ê–ù–°–´"].append((folder_name, file_count))
            elif "–ë–£–•–£–ß–ï–¢" in folder_name:
                categories["üìä –ë–£–•–ì–ê–õ–¢–ï–†–ò–Ø"].append((folder_name, file_count))
            elif "–ü–†–û–ú–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨" in folder_name:
                categories["‚ö†Ô∏è –ü–†–û–ú–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨"].append((folder_name, file_count))
            elif "–û–•–†–ê–ù–ê –¢–†–£–î–ê" in folder_name:
                categories["üõ°Ô∏è –û–•–†–ê–ù–ê –¢–†–£–î–ê"].append((folder_name, file_count))
            elif "HR" in folder_name:
                categories["üë• HR –ò –ö–ê–î–†–´"].append((folder_name, file_count))
            elif "–≠–ö–û–õ–û–ì–ò–Ø" in folder_name:
                categories["üåø –≠–ö–û–õ–û–ì–ò–Ø"].append((folder_name, file_count))
            elif "–õ–ï–ö–¶–ò–ò" in folder_name or "–ö–ù–ò–ì–ò" in folder_name or "–°–¢–ê–ù–î–ê–†–¢–´" in folder_name:
                categories["üìö –û–ë–£–ß–ï–ù–ò–ï"].append((folder_name, file_count))
            else:
                categories["üóÇÔ∏è –ü–†–û–ß–ï–ï"].append((folder_name, file_count))
    
    # Print categorized structure
    for category, folders in categories.items():
        if folders:
            print(f"\n{category}")
            print("-" * 60)
            for folder_name, file_count in folders:
                print(f"   üìÇ {folder_name}: {file_count} —Ñ–∞–π–ª–æ–≤")
    
    print(f"\nüìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤ –≤ –ë–ê–ó–ê: {total_files}")
    print(f"üìä –í—Å–µ–≥–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len([f for f in base_path.iterdir() if f.is_dir()])}")

def test_expanded_category_detection():
    """Test category detection for all subject areas"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 80)
    
    # Comprehensive test files covering all subject areas
    test_files = [
        # Construction
        ("SP_25.13330.2020.pdf", "–°–ü 25.13330.2020 –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–∞–º–µ–Ω–Ω—ã–µ", "09. –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–û - –°–í–û–î–´ –ü–†–ê–í–ò–õ"),
        ("GOST_52742-2007.pdf", "–ì–û–°–¢ 52742-2007 –ê—Ä–º–∞—Ç—É—Ä–∞ —Å—Ç–µ–∫–ª–æ–ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è", "07. –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–û - –ì–û–°–¢—ã"),
        ("GESN_01.pdf", "–ì–≠–°–ù 01 –ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã", "05. –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–û - –°–ú–ï–¢–´"),
        ("MDS_21-1.98.pdf", "–ú–î–° 21-1.98 –ú–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ", "02. –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–û - –ú–î–°"),
        ("PPR_Karkas.pdf", "–ü—Ä–æ–µ–∫—Ç –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∫–∞—Ä–∫–∞—Å–∞", "03. –°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–û - –ü–û–°/–ü–ü–†"),
        
        # Finance
        ("NalogovyKodeks_Chast1.pdf", "–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å –†–§ —á–∞—Å—Ç—å 1", "10. –§–ò–ù–ê–ù–°–´ - –ó–ê–ö–û–ù–´"),
        ("PBU_23_2011.pdf", "–ü–ë–£ 23/2011 –û—Ç—á–µ—Ç –æ –¥–≤–∏–∂–µ–Ω–∏–∏ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤", "12. –§–ò–ù–ê–ù–°–´ - –°–¢–ê–ù–î–ê–†–¢–´"),
        ("Instrukcia_CB_180P.pdf", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ë–∞–Ω–∫–∞ –†–æ—Å—Å–∏–∏ ‚Ññ180-–ü", "14. –§–ò–ù–ê–ù–°–´ - –ë–ê–ù–ö–û–í–°–ö–û–ï –î–ï–õ–û"),
        
        # Accounting
        ("FZ_402_BuhUchet.pdf", "–§–ó ‚Ññ402 –û –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–º —É—á–µ—Ç–µ", "16. –ë–£–•–£–ß–ï–¢ - –ó–ê–ö–û–ù–´"),
        ("Plan_Schetov_2023.pdf", "–ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–≥–æ —É—á–µ—Ç–∞", "18. –ë–£–•–£–ß–ï–¢ - –ü–õ–ê–ù –°–ß–ï–¢–û–í"),
        ("BuhUchet_Uchebnik.pdf", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π —É—á–µ—Ç —É—á–µ–±–Ω–∏–∫", "21. –ë–£–•–£–ß–ï–¢ - –ö–ù–ò–ì–ò"),
        
        # Industrial Safety
        ("PromBezopasnost_FZ116.pdf", "–§–ó ‚Ññ116 –û –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "22. –ü–†–û–ú–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ - –ó–ê–ö–û–ù–´"),
        ("PB_03_273_99.pdf", "–ü–ë 03-273-99 –ü—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "23. –ü–†–û–ú–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ - –ü–†–ê–í–ò–õ–ê"),
        
        # Occupational Safety
        ("OhranaTruda_TK_RF.pdf", "–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§ —Ä–∞–∑–¥–µ–ª –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞", "28. –û–•–†–ê–ù–ê –¢–†–£–î–ê - –ó–ê–ö–û–ù–´"),
        ("Pravila_OT_Stroitelstvo.pdf", "–ü—Ä–∞–≤–∏–ª–∞ –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞ –ø—Ä–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–µ", "29. –û–•–†–ê–ù–ê –¢–†–£–î–ê - –ü–†–ê–í–ò–õ–ê"),
        ("SIZ_Normy_Vydachi.pdf", "–ù–æ—Ä–º—ã –≤—ã–¥–∞—á–∏ —Å—Ä–µ–¥—Å—Ç–≤ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã", "32. –û–•–†–ê–ù–ê –¢–†–£–î–ê - –°–ò–ó"),
        
        # HR
        ("Trudovoe_Pravo_Uchebnik.pdf", "–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ —É—á–µ–±–Ω–∏–∫", "35. HR - –¢–†–£–î–û–í–û–ï –ü–†–ê–í–û"),
        ("Kadrovoe_Deloproizvodstvo.pdf", "–ö–∞–¥—Ä–æ–≤–æ–µ –¥–µ–ª–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫", "36. HR - –ö–ê–î–†–û–í–û–ï –î–ï–õ–û–ü–†–û–ò–ó–í–û–î–°–¢–í–û"),
        ("MROT_2024.pdf", "–ú–†–û–¢ –Ω–∞ 2024 –≥–æ–¥", "38. HR - –û–ü–õ–ê–¢–ê –¢–†–£–î–ê"),
        
        # Ecology
        ("FZ_7_OOS.pdf", "–§–ó ‚Ññ7 –û–± –æ—Ö—Ä–∞–Ω–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã", "42. –≠–ö–û–õ–û–ì–ò–Ø - –ó–ê–ö–û–ù–´"),
        ("PDK_Atmosfera_2023.pdf", "–ü—Ä–µ–¥–µ–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ", "43. –≠–ö–û–õ–û–ì–ò–Ø - –ù–û–†–ú–ê–¢–ò–í–´"),
        ("FKKO_2021.pdf", "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–¥–æ–≤ –æ—Ç—Ö–æ–¥–æ–≤", "47. –≠–ö–û–õ–û–ì–ò–Ø - –û–¢–•–û–î–´"),
        
        # Training Materials
        ("Lekcia_Stroitelstvo.pptx", "–õ–µ–∫—Ü–∏—è –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞", "49. –õ–ï–ö–¶–ò–ò –ò –ö–£–†–°–´"),
        ("Tehnichesky_Spravochnik.pdf", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∏–Ω–∂–µ–Ω–µ—Ä–∞", "50. –ö–ù–ò–ì–ò –û–ë–©–ò–ï"),
        ("ISO_9001_2015.pdf", "–ì–û–°–¢ –† –ò–°–û 9001-2015 –°–∏—Å—Ç–µ–º–∞ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞ –∫–∞—á–µ—Å—Ç–≤–∞", "51. –°–¢–ê–ù–î–ê–†–¢–´ –ö–ê–ß–ï–°–¢–í–ê"),
        
        # Unknown/Other
        ("Unknown_Document.pdf", "–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞", "99. –î–†–£–ì–ò–ï –î–û–ö–£–ú–ï–ù–¢–´")
    ]
    
    correct_predictions = 0
    for file_name, content, expected_category in test_files:
        predicted_category = _determine_document_category(file_name.lower(), content)
        status = "‚úÖ" if predicted_category == expected_category else "‚ùå"
        
        # Color coding by subject area
        if "–°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–û" in predicted_category:
            icon = "üèóÔ∏è"
        elif "–§–ò–ù–ê–ù–°–´" in predicted_category:
            icon = "üí∞"
        elif "–ë–£–•–£–ß–ï–¢" in predicted_category:
            icon = "üìä"
        elif "–ü–†–û–ú–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨" in predicted_category:
            icon = "‚ö†Ô∏è"
        elif "–û–•–†–ê–ù–ê –¢–†–£–î–ê" in predicted_category:
            icon = "üõ°Ô∏è"
        elif "HR" in predicted_category:
            icon = "üë•"
        elif "–≠–ö–û–õ–û–ì–ò–Ø" in predicted_category:
            icon = "üåø"
        elif any(x in predicted_category for x in ["–õ–ï–ö–¶–ò–ò", "–ö–ù–ò–ì–ò", "–°–¢–ê–ù–î–ê–†–¢–´"]):
            icon = "üìö"
        else:
            icon = "üóÇÔ∏è"
        
        print(f"{status} {icon} {file_name}")
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_category}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ:  {predicted_category}")
        
        if predicted_category == expected_category:
            correct_predictions += 1
        print()
    
    accuracy = (correct_predictions / len(test_files)) * 100
    print(f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {correct_predictions}/{len(test_files)} ({accuracy:.1f}%)")
    
    return accuracy > 80

def test_expanded_stage0_processing():
    """Test full Stage 0 processing with expanded categories"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stage 0 - –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 80)
    
    # Create test files for different subject areas
    test_dir = Path("C:/temp/test_expanded_ntd")
    test_dir.mkdir(exist_ok=True)
    
    test_files = [
        # Construction
        ("SP_25.13330.2020_Konstrukcii.pdf", "–°–ü 25.13330.2020 –ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–∞–º–µ–Ω–Ω—ã–µ –∏ –∞—Ä–º–æ–∫–∞–º–µ–Ω–Ω—ã–µ\n–°–≤–æ–¥ –ø—Ä–∞–≤–∏–ª\n–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"),
        ("GOST_52742_Armatura.pdf", "–ì–û–°–¢ 52742-2007 –ê—Ä–º–∞—Ç—É—Ä–∞ —Å—Ç–µ–∫–ª–æ–ø–ª–∞—Å—Ç–∏–∫–æ–≤–∞—è\n–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç\n–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"),
        ("GESN_01_Zemlyanye.pdf", "–ì–≠–°–ù 01 –ó–µ–º–ª—è–Ω—ã–µ —Ä–∞–±–æ—Ç—ã\n–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–Ω—ã–µ —Å–º–µ—Ç–Ω—ã–µ –Ω–æ—Ä–º—ã\n–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç"),
        
        # Finance & Accounting
        ("NalogovyKodeks_RF.pdf", "–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å –†–æ—Å—Å–∏–π—Å–∫–æ–π –§–µ–¥–µ—Ä–∞—Ü–∏–∏\n–ß–∞—Å—Ç—å –ø–µ—Ä–≤–∞—è\n–ù–∞–ª–æ–≥–æ–≤–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ"),
        ("PBU_23_DDDS.pdf", "–ü–ë–£ 23/2011 –û—Ç—á–µ—Ç –æ –¥–≤–∏–∂–µ–Ω–∏–∏ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤\n–ü–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–º—É —É—á–µ—Ç—É\n–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã"),
        ("Plan_Schetov_Buh.pdf", "–ü–ª–∞–Ω —Å—á–µ—Ç–æ–≤ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–≥–æ —É—á–µ—Ç–∞\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é\n–ö–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ü–∏—è —Å—á–µ—Ç–æ–≤"),
        
        # Safety & HR
        ("PromBez_FZ116.pdf", "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –û –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤\n–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"),
        ("OhranaTruda_Pravila.pdf", "–ü—Ä–∞–≤–∏–ª–∞ –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞ –ø—Ä–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö\n–û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞\n–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç—Ä—É–¥–∞"),
        ("Kadrovoe_Delo_2024.pdf", "–ö–∞–¥—Ä–æ–≤–æ–µ –¥–µ–ª–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –≤ 2024 –≥–æ–¥—É\n–¢—Ä—É–¥–æ–≤—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã\nHR –¥–æ–∫—É–º–µ–Ω—Ç—ã"),
        
        # Ecology & Training
        ("Ecologia_FZ7_OOS.pdf", "–§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –∑–∞–∫–æ–Ω –û–± –æ—Ö—Ä–∞–Ω–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã\n–≠–∫–æ–ª–æ–≥–∏—è\n–û—Ö—Ä–∞–Ω–∞ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã"),
        ("Lekcia_Tehnologii.pdf", "–õ–µ–∫—Ü–∏—è –ø–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º\n–û–±—É—á–µ–Ω–∏–µ\n–ö—É—Ä—Å –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    ]
    
    # Create test files with content
    for file_name, content in test_files:
        test_file = test_dir / file_name
        with open(test_file, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"üìÑ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª: {file_name}")
    
    # Initialize NTD system
    try:
        print("\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ù–¢–î...")
        normative_db, normative_checker = initialize_ntd_system()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ù–¢–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # Process each file
        processed_files = []
        for file_name, _ in test_files:
            test_file = test_dir / file_name
            print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_name}")
            
            result = ntd_preprocess(str(test_file), normative_db, normative_checker, test_mode=True)
            
            if result:
                print(f"‚úÖ –§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {Path(result).name}")
                processed_files.append(result)
                
                # Show which –ë–ê–ó–ê category was assigned
                if "–ë–ê–ó–ê" in result:
                    category = Path(result).parent.name
                    if "–°–¢–†–û–ò–¢–ï–õ–¨–°–¢–í–û" in category:
                        icon = "üèóÔ∏è"
                    elif "–§–ò–ù–ê–ù–°–´" in category:
                        icon = "üí∞"
                    elif "–ë–£–•–£–ß–ï–¢" in category:
                        icon = "üìä"
                    elif "–ü–†–û–ú–ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨" in category:
                        icon = "‚ö†Ô∏è"
                    elif "–û–•–†–ê–ù–ê –¢–†–£–î–ê" in category:
                        icon = "üõ°Ô∏è"
                    elif "HR" in category:
                        icon = "üë•"
                    elif "–≠–ö–û–õ–û–ì–ò–Ø" in category:
                        icon = "üåø"
                    else:
                        icon = "üìÇ"
                    
                    print(f"üìÅ {icon} –§–∞–π–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤: {category}")
                else:
                    print("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –±—ã–ª –ø–µ—Ä–µ–º–µ—â—ë–Ω –≤ –ë–ê–ó–ê")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {file_name}")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(processed_files)}/{len(test_files)} —Ñ–∞–π–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
        # Cleanup test files
        print(f"\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        shutil.rmtree(test_dir, ignore_errors=True)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
        
        return len(processed_files) > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–°–®–ò–†–ï–ù–ù–û–ô STAGE 0 - NTD PREPROCESSING")
    print("üåê –ú–ù–û–ì–û–ü–†–û–§–ò–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –°–û–†–¢–ò–†–û–í–ö–ò –î–û–ö–£–ú–ï–ù–¢–û–í")
    print("=" * 80)
    print("üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–±–ª–∞—Å—Ç–∏:")
    print("   üèóÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
    print("   üí∞ –§–∏–Ω–∞–Ω—Å—ã –∏ —ç–∫–æ–Ω–æ–º–∏–∫–∞")
    print("   üìä –ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–π —É—á–µ—Ç")
    print("   ‚ö†Ô∏è –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
    print("   üõ°Ô∏è –û—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞")
    print("   üë• HR –∏ —Ç—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ")
    print("   üåø –≠–∫–æ–ª–æ–≥–∏—è")
    print("   üìö –û–±—É—á–∞—é—â–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã")
    print("=" * 80)
    
    # Show current expanded structure
    show_expanded_baza_structure()
    
    # Test 1: Category detection for all areas
    success1 = test_expanded_category_detection()
    
    # Test 2: Full Stage 0 processing
    success2 = test_expanded_stage0_processing()
    
    print("\n" + "=" * 80)
    if success1 and success2:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –†–ê–°–®–ò–†–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ Stage 0 –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —Å –º–Ω–æ–≥–æ–ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π")
        print("üåê –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏")
        print("üìÅ –§–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ I:/docs/–ë–ê–ó–ê/")
        print("üî• –ì–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ:")
        print("   ‚Ä¢ –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É ‚Ä¢ –§–∏–Ω–∞–Ω—Å–∞–º ‚Ä¢ –ë—É—Ö—É—á–µ—Ç—É ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        print("   ‚Ä¢ HR ‚Ä¢ –≠–∫–æ–ª–æ–≥–∏–∏ ‚Ä¢ –û–±—É—á–µ–Ω–∏—é ‚Ä¢ –ò –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º!")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        if not success1:
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        if not success2:
            print("   - –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π Stage 0")
    print("=" * 80)