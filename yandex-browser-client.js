/**
 * Yandex Browser Client –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å MCP —Å–µ—Ä–≤–µ—Ä–æ–º
 * –í–Ω–µ–¥—Ä—è–µ—Ç—Å—è –≤ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫
 */

class YandexBrowserMCPClient {
  constructor(config = {}) {
    this.config = {
      serverUrl: config.serverUrl || 'http://localhost:3000',
      apiKey: config.apiKey || 'mcp-yandex-browser-key-2024',
      sessionId: this.generateSessionId(),
      browserInfo: this.getBrowserInfo(),
      ...config
    };
    
    this.isConnected = false;
    this.errorQueue = [];
    this.retryCount = 0;
    this.maxRetries = 3;
    
    this.init();
  }

  generateSessionId() {
    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  }

  getBrowserInfo() {
    return {
      userAgent: navigator.userAgent,
      language: navigator.language,
      platform: navigator.platform,
      cookieEnabled: navigator.cookieEnabled,
      onLine: navigator.onLine,
      screen: {
        width: screen.width,
        height: screen.height,
        colorDepth: screen.colorDepth
      },
      viewport: {
        width: window.innerWidth,
        height: window.innerHeight
      },
      url: window.location.href,
      referrer: document.referrer,
      timestamp: new Date().toISOString()
    };
  }

  init() {
    console.log('üîó Yandex Browser MCP Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    this.setupErrorHandlers();
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É
    this.connect();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ—à–∏–±–æ–∫
    setInterval(() => {
      this.flushErrorQueue();
    }, 5000);
  }

  setupErrorHandlers() {
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ JavaScript
    window.addEventListener('error', (event) => {
      this.captureError({
        type: 'JavaScript Error',
        message: event.message,
        filename: event.filename,
        lineno: event.lineno,
        colno: event.colno,
        stack: event.error ? event.error.stack : '',
        url: window.location.href
      });
    });

    // –û—à–∏–±–∫–∏ –ø—Ä–æ–º–∏—Å–æ–≤
    window.addEventListener('unhandledrejection', (event) => {
      this.captureError({
        type: 'Unhandled Promise Rejection',
        message: event.reason ? event.reason.toString() : 'Unknown promise rejection',
        stack: event.reason ? event.reason.stack : '',
        url: window.location.href
      });
    });

    // –û—à–∏–±–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–∫—Ä–∏–ø—Ç—ã, —Å—Ç–∏–ª–∏)
    window.addEventListener('error', (event) => {
      if (event.target !== window) {
        this.captureError({
          type: 'Resource Error',
          message: `Failed to load resource: ${event.target.src || event.target.href}`,
          element: event.target.tagName,
          src: event.target.src || event.target.href,
          url: window.location.href
        });
      }
    }, true);

    // –û—à–∏–±–∫–∏ —Å–µ—Ç–∏
    this.setupNetworkErrorHandling();
  }

  setupNetworkErrorHandling() {
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º fetch –∑–∞–ø—Ä–æ—Å—ã
    const originalFetch = window.fetch;
    window.fetch = async (...args) => {
      try {
        const response = await originalFetch(...args);
        if (!response.ok) {
          this.captureError({
            type: 'Network Error',
            message: `HTTP ${response.status}: ${response.statusText}`,
            url: args[0],
            status: response.status,
            statusText: response.statusText
          });
        }
        return response;
      } catch (error) {
        this.captureError({
          type: 'Network Error',
          message: error.message,
          url: args[0],
          stack: error.stack
        });
        throw error;
      }
    };

    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º XMLHttpRequest
    const originalXHR = window.XMLHttpRequest;
    window.XMLHttpRequest = function() {
      const xhr = new originalXHR();
      const originalOpen = xhr.open;
      const originalSend = xhr.send;

      xhr.open = function(method, url, ...args) {
        this._method = method;
        this._url = url;
        return originalOpen.apply(this, [method, url, ...args]);
      };

      xhr.send = function(...args) {
        this.addEventListener('error', () => {
          this.captureError({
            type: 'XHR Error',
            message: 'XMLHttpRequest failed',
            url: this._url,
            method: this._method,
            status: this.status
          });
        });

        this.addEventListener('load', () => {
          if (this.status >= 400) {
            this.captureError({
              type: 'XHR Error',
              message: `HTTP ${this.status}: ${this.statusText}`,
              url: this._url,
              method: this._method,
              status: this.status,
              statusText: this.statusText
            });
          }
        });

        return originalSend.apply(this, args);
      };

      return xhr;
    };
  }

  captureError(errorData) {
    const enrichedError = {
      ...errorData,
      sessionId: this.config.sessionId,
      browserInfo: this.config.browserInfo,
      timestamp: new Date().toISOString(),
      severity: this.calculateSeverity(errorData)
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
    this.errorQueue.push(enrichedError);
    
    console.log('üîç –û—à–∏–±–∫–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–∞:', enrichedError.type, enrichedError.message);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    this.sendError(enrichedError);
  }

  calculateSeverity(errorData) {
    if (errorData.type === 'JavaScript Error' && 
        (errorData.message.includes('ReferenceError') || 
         errorData.message.includes('TypeError'))) {
      return 'high';
    }
    
    if (errorData.type === 'Network Error' && 
        errorData.status >= 500) {
      return 'high';
    }
    
    if (errorData.type === 'Resource Error') {
      return 'medium';
    }
    
    return 'low';
  }

  async connect() {
    try {
      const response = await fetch(`${this.config.serverUrl}/api/connect`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.config.apiKey}`
        },
        body: JSON.stringify({
          sessionId: this.config.sessionId,
          browserInfo: this.config.browserInfo
        })
      });

      if (response.ok) {
        this.isConnected = true;
        this.retryCount = 0;
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      } else {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É:', error.message);
      this.scheduleReconnect();
    }
  }

  scheduleReconnect() {
    if (this.retryCount < this.maxRetries) {
      this.retryCount++;
      const delay = Math.pow(2, this.retryCount) * 1000; // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
      
      setTimeout(() => {
        console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${this.retryCount}/${this.maxRetries}`);
        this.connect();
      }, delay);
    } else {
      console.error('‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω–æ');
    }
  }

  async sendError(errorData) {
    if (!this.isConnected) {
      return; // –û—à–∏–±–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    }

    try {
      const response = await fetch(`${this.config.serverUrl}/api/error`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.config.apiKey}`
        },
        body: JSON.stringify(errorData)
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      console.log('üì§ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', error.message);
      this.isConnected = false;
      this.scheduleReconnect();
    }
  }

  async flushErrorQueue() {
    if (this.errorQueue.length === 0 || !this.isConnected) {
      return;
    }

    const errors = [...this.errorQueue];
    this.errorQueue = [];

    try {
      const response = await fetch(`${this.config.serverUrl}/api/errors/batch`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.config.apiKey}`
        },
        body: JSON.stringify({ errors })
      });

      if (response.ok) {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${errors.length} –æ—à–∏–±–æ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏`);
      } else {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
        this.errorQueue.unshift(...errors);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—á–µ—Ä–µ–¥–∏:', error.message);
      this.errorQueue.unshift(...errors);
      this.isConnected = false;
      this.scheduleReconnect();
    }
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  getSessionInfo() {
    return {
      sessionId: this.config.sessionId,
      isConnected: this.isConnected,
      errorQueueLength: this.errorQueue.length,
      browserInfo: this.config.browserInfo
    };
  }

  disconnect() {
    this.isConnected = false;
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞');
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –±—Ä–∞—É–∑–µ—Ä–µ
if (typeof window !== 'undefined') {
  // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
  window.YandexBrowserMCP = new YandexBrowserMCPClient();
  
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = YandexBrowserMCPClient;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è Node.js
if (typeof module !== 'undefined' && module.exports) {
  module.exports = YandexBrowserMCPClient;
}
