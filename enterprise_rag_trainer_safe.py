#!/usr/bin/env python3
"""
Enterprise RAG Trainer - Safe Version
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
"""

import os
import sys
import json
import time
import psutil
import signal
import atexit
from pathlib import Path
from datetime import datetime
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent))

class RAGTrainingLock:
    """–°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ RAG –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self, lockfile_path="./rag_training.lock"):
        self.lockfile_path = Path(lockfile_path)
        self.pid = os.getpid()
        self.locked = False
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        atexit.register(self.release_lock)
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print(f"\n‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
        self.release_lock()
        sys.exit(0)
        
    def acquire_lock(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        if self.lockfile_path.exists():
            try:
                with open(self.lockfile_path, 'r', encoding='utf-8') as f:
                    lock_data = json.load(f)
                
                old_pid = lock_data.get('pid')
                if old_pid and psutil.pid_exists(old_pid):
                    try:
                        proc = psutil.Process(old_pid)
                        cmdline = ' '.join(proc.cmdline())
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è RAG
                        if any(keyword in cmdline.lower() for keyword in [
                            'rag_trainer', 'enterprise_rag', 'train'
                        ]):
                            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û–±—É—á–µ–Ω–∏–µ RAG —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!")
                            print("=" * 60)
                            print(f"üîí PID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {old_pid}")
                            print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {lock_data.get('start_time')}")
                            print(f"üíª –•–æ—Å—Ç: {lock_data.get('hostname', 'unknown')}")
                            print(f"‚ö° –ö–æ–º–∞–Ω–¥–∞: {cmdline}")
                            print()
                            print("üõë –û–î–ù–û–í–†–ï–ú–ï–ù–ù–´–ô –ó–ê–ü–£–°–ö –ó–ê–ü–†–ï–©–ï–ù!")
                            print("   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫:")
                            print("   ‚Ä¢ –ö–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö")
                            print("   ‚Ä¢ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö")
                            print("   ‚Ä¢ –û—à–∏–±–∫–∞–º 'object cannot be re-sized'")
                            print()
                            print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:")
                            if os.name == 'nt':  # Windows
                                print(f"   taskkill /PID {old_pid} /F")
                            else:  # Linux/Mac
                                print(f"   kill {old_pid}")
                            print("   –ò–õ–ò –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –≤ –æ–∫–Ω–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
                            print()
                            return False
                    except psutil.NoSuchProcess:
                        # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π lockfile
                        print("üßπ –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lockfile...")
                        self.lockfile_path.unlink()
                else:
                    # PID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π lockfile
                    print("üßπ –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π lockfile...")
                    self.lockfile_path.unlink()
                    
            except (json.JSONDecodeError, KeyError, FileNotFoundError):
                # –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π lockfile, —É–¥–∞–ª—è–µ–º
                print("üßπ –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π lockfile...")
                if self.lockfile_path.exists():
                    self.lockfile_path.unlink()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π lockfile
        lock_data = {
            'pid': self.pid,
            'start_time': datetime.now().isoformat(),
            'hostname': os.uname().nodename if hasattr(os, 'uname') else os.getenv('COMPUTERNAME', 'windows'),
            'command': ' '.join(sys.argv),
            'working_dir': str(Path.cwd()),
            'python_version': sys.version
        }
        
        try:
            with open(self.lockfile_path, 'w', encoding='utf-8') as f:
                json.dump(lock_data, f, indent=2, ensure_ascii=False)
            
            self.locked = True
            print(f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"   PID: {self.pid}")
            print(f"   Lockfile: {self.lockfile_path.absolute()}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è lockfile: {e}")
            return False
    
    def release_lock(self):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        if self.locked:
            try:
                if self.lockfile_path.exists():
                    self.lockfile_path.unlink()
                    print(f"üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞: PID {self.pid}")
                self.locked = False
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    
    def __enter__(self):
        if not self.acquire_lock():
            sys.exit(1)
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.release_lock()

def check_system_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –¢–†–ï–ë–û–í–ê–ù–ò–ô")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    memory = psutil.virtual_memory()
    print(f"üíæ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: {memory.total / 1024**3:.1f} GB")
    print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {memory.available / 1024**3:.1f} GB ({memory.percent:.1f}% –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)")
    
    if memory.available < 4 * 1024**3:  # –ú–µ–Ω—å—à–µ 4 GB
        print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞
    disk = psutil.disk_usage('.')
    print(f"üíø –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: {disk.total / 1024**3:.1f} GB")
    print(f"   –°–≤–æ–±–æ–¥–Ω–æ: {disk.free / 1024**3:.1f} GB ({(disk.free/disk.total)*100:.1f}%)")
    
    if disk.free < 10 * 1024**3:  # –ú–µ–Ω—å—à–µ 10 GB
        print("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ!")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    cpu_count = psutil.cpu_count()
    cpu_percent = psutil.cpu_percent(interval=1)
    print(f"üñ•Ô∏è –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {cpu_count} —è–¥–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ {cpu_percent:.1f}%")
    
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def check_neo4j_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j"""
    print("\nüîå –ü–†–û–í–ï–†–ö–ê NEO4J")
    print("=" * 20)
    
    try:
        import requests
        
        neo4j_urls = [
            "http://localhost:7474",
            "http://127.0.0.1:7474",
            "http://localhost:7475"
        ]
        
        for url in neo4j_urls:
            try:
                response = requests.get(url, timeout=5)
                if response.status_code == 200:
                    print(f"‚úÖ Neo4j –¥–æ—Å—Ç—É–ø–µ–Ω: {url}")
                    return True
            except requests.exceptions.RequestException:
                continue
        
        print("‚ùå Neo4j –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Neo4j Desktop –∑–∞–ø—É—â–µ–Ω")
        return False
        
    except ImportError:
        print("‚ö†Ô∏è –ú–æ–¥—É–ª—å requests –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É Neo4j")
        return True

def safe_import_trainer():
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞"""
    print("\nüì¶ –ò–ú–ü–û–†–¢ –û–°–ù–û–í–ù–û–ì–û –¢–†–ï–ù–ï–†–ê")
    print("=" * 30)
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–µ—Ä
        trainer_files = [
            "enterprise_rag_trainer_full.py",
            "enterprise_rag_trainer.py", 
            "rag_trainer.py"
        ]
        
        for trainer_file in trainer_files:
            if Path(trainer_file).exists():
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ç—Ä–µ–Ω–µ—Ä: {trainer_file}")
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∫ –º–æ–¥—É–ª—å
                import importlib.util
                spec = importlib.util.spec_from_file_location("trainer", trainer_file)
                trainer_module = importlib.util.module_from_spec(spec)
                spec.loader.exec_module(trainer_module)
                
                return trainer_module
        
        print("‚ùå –û—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª enterprise_rag_trainer_full.py —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç—Ä–µ–Ω–µ—Ä–∞: {e}")
        return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    print("üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–´–ô –ó–ê–ü–£–°–ö RAG –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 50)
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üêç Python: {sys.version}")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path.cwd()}")
    print()
    
    # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    with RAGTrainingLock() as lock:
        print("\n‚úÖ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        check_system_requirements()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Neo4j
        if not check_neo4j_connection():
            print("\n‚ùå Neo4j –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±—É—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ")
            return 1
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–µ—Ä
        trainer_module = safe_import_trainer()
        if not trainer_module:
            print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–µ—Ä")
            return 1
        
        print("\nüöÄ –ó–ê–ü–£–°–ö –û–ë–£–ß–ï–ù–ò–Ø")
        print("=" * 20)
        print("‚ö†Ô∏è –ù–ï –ó–ê–ü–£–°–ö–ê–ô–¢–ï –î–†–£–ì–ò–ï –≠–ö–ó–ï–ú–ü–õ–Ø–†–´ –¢–†–ï–ù–ï–†–ê!")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º –≤ –±–∞–∑–∞—Ö –¥–∞–Ω–Ω—ã—Ö")
        print()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            if hasattr(trainer_module, 'start_enterprise_training'):
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                import argparse
                parser = argparse.ArgumentParser()
                parser.add_argument('--custom_dir', default='I:/docs/downloaded')
                parser.add_argument('--max_files', type=int, default=None)
                parser.add_argument('--fast_mode', action='store_true')
                args, _ = parser.parse_known_args()
                
                print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {args.custom_dir}")
                print(f"üìä –ú–∞–∫—Å. —Ñ–∞–π–ª–æ–≤: {'ALL' if args.max_files is None else args.max_files}")
                print(f"‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º: {'–î–ê' if args.fast_mode else '–ù–ï–¢'}")
                print()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
                result = trainer_module.start_enterprise_training(args.custom_dir, args.max_files)
            else:
                print("‚ùå –§—É–Ω–∫—Ü–∏—è start_enterprise_training() –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç—Ä–µ–Ω–µ—Ä–µ")
                return 1
            
            print("\nüéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            return 0
            
        except KeyboardInterrupt:
            print("\n‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)")
            return 130
            
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –û–ë–£–ß–ï–ù–ò–Ø: {e}")
            import traceback
            traceback.print_exc()
            return 1
            
        finally:
            print("\nüîì –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É...")

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except Exception as e:
        print(f"\nüí• –§–ê–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        sys.exit(1)