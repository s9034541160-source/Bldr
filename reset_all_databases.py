#!/usr/bin/env python3
"""
Reset All Databases Script
–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –∏ –∫—ç—à–∞ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
"""

import os
import sys
import shutil
import json
import time
import psutil
from pathlib import Path
import subprocess

def kill_training_processes():
    """–£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ–±—É—á–µ–Ω–∏—è"""
    print("üî™ –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–• –ü–†–û–¶–ï–°–°–û–í –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 40)
    
    killed_processes = []
    
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            cmdline = ' '.join(proc.info['cmdline'] or [])
            
            # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã RAG-—Ç—Ä–µ–Ω–µ—Ä–∞
            if any(keyword in cmdline.lower() for keyword in [
                'enterprise_rag_trainer',
                'rag_trainer',
                'train.py',
                'training'
            ]):
                print(f"   –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å: PID {proc.info['pid']} - {proc.info['name']}")
                proc.kill()
                killed_processes.append(proc.info['pid'])
                
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    
    if killed_processes:
        print(f"‚úÖ –£–±–∏—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(killed_processes)}")
        time.sleep(3)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    else:
        print("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

def reset_neo4j_database():
    """–°–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Neo4j"""
    print("\nüóëÔ∏è –°–ë–†–û–° NEO4J –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 35)
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Neo4j
        print("   –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Neo4j...")
        os.system("taskkill /f /im java.exe /fi \"WINDOWTITLE eq Neo4j*\" 2>nul")
        time.sleep(5)
        
        # –ò—â–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö Neo4j
        neo4j_data_paths = [
            Path.home() / ".Neo4jDesktop" / "relate-data" / "dbmss",
            Path("C:/Users") / os.getenv('USERNAME', '') / "AppData/Roaming/Neo4j Desktop/Application/relate-data/dbmss",
            Path("C:/neo4j/data"),
            Path("./neo4j-data")
        ]
        
        databases_cleared = 0
        
        for data_path in neo4j_data_paths:
            if data_path.exists():
                print(f"   –ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Neo4j: {data_path}")
                
                # –ò—â–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                for db_dir in data_path.rglob("*/data/databases"):
                    if db_dir.exists():
                        print(f"   –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã: {db_dir}")
                        try:
                            # –£–¥–∞–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
                            for item in db_dir.iterdir():
                                if item.is_dir():
                                    shutil.rmtree(item)
                                else:
                                    item.unlink()
                            databases_cleared += 1
                        except Exception as e:
                            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {db_dir}: {e}")
        
        if databases_cleared > 0:
            print(f"‚úÖ –û—á–∏—â–µ–Ω–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö Neo4j: {databases_cleared}")
        else:
            print("‚ö†Ô∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Neo4j –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º Neo4j –æ–±—Ä–∞—Ç–Ω–æ
        print("   –ó–∞–ø—É—Å–∫ Neo4j...")
        neo4j_desktop_paths = [
            r"C:\Users\%USERNAME%\AppData\Local\Programs\Neo4j Desktop\Neo4j Desktop.exe",
            r"C:\Program Files\Neo4j Desktop\Neo4j Desktop.exe"
        ]
        
        for path in neo4j_desktop_paths:
            expanded_path = os.path.expandvars(path)
            if os.path.exists(expanded_path):
                subprocess.Popen([expanded_path], shell=True)
                print(f"   ‚úÖ Neo4j Desktop –∑–∞–ø—É—â–µ–Ω: {expanded_path}")
                break
        
        time.sleep(10)  # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ Neo4j: {e}")

def reset_vector_database():
    """–°–±—Ä–æ—Å –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóëÔ∏è –°–ë–†–û–° –í–ï–ö–¢–û–†–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 40)
    
    vector_db_paths = [
        "./chroma_db",
        "./vector_db", 
        "./embeddings",
        "./faiss_index",
        "I:/docs/vector_db",
        "I:/docs/chroma_db"
    ]
    
    cleared_dbs = 0
    
    for db_path in vector_db_paths:
        path = Path(db_path)
        if path.exists():
            print(f"   –£–¥–∞–ª–µ–Ω–∏–µ: {path}")
            try:
                if path.is_dir():
                    shutil.rmtree(path)
                else:
                    path.unlink()
                cleared_dbs += 1
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {path}: {e}")
    
    if cleared_dbs > 0:
        print(f"‚úÖ –û—á–∏—â–µ–Ω–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –±–∞–∑: {cleared_dbs}")
    else:
        print("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def reset_json_cache():
    """–°–±—Ä–æ—Å JSON –∫—ç—à–∞"""
    print("\nüóëÔ∏è –°–ë–†–û–° JSON –ö–≠–®–ê")
    print("=" * 25)
    
    cache_paths = [
        "I:/docs/downloaded/cache",
        "./cache",
        "./data/cache",
        "./training_cache"
    ]
    
    total_files_removed = 0
    total_size_removed = 0
    
    for cache_path in cache_paths:
        path = Path(cache_path)
        if path.exists():
            print(f"   –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: {path}")
            
            files_removed = 0
            size_removed = 0
            
            try:
                for file in path.rglob("*.json"):
                    size_removed += file.stat().st_size
                    file.unlink()
                    files_removed += 1
                
                # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –∫—ç—à–∞
                for pattern in ["*.pkl", "*.cache", "*.tmp"]:
                    for file in path.rglob(pattern):
                        size_removed += file.stat().st_size
                        file.unlink()
                        files_removed += 1
                
                total_files_removed += files_removed
                total_size_removed += size_removed
                
                print(f"   ‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_removed}, —Ä–∞–∑–º–µ—Ä: {size_removed / 1024 / 1024:.2f} MB")
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ {path}: {e}")
    
    print(f"‚úÖ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: {total_files_removed} —Ñ–∞–π–ª–æ–≤, {total_size_removed / 1024 / 1024:.2f} MB")

def reset_training_logs():
    """–°–±—Ä–æ—Å –ª–æ–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
    print("\nüóëÔ∏è –°–ë–†–û–° –õ–û–ì–û–í –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 30)
    
    log_paths = [
        "./logs",
        "./training_logs",
        "./rag_logs",
        "I:/docs/logs"
    ]
    
    logs_cleared = 0
    
    for log_path in log_paths:
        path = Path(log_path)
        if path.exists():
            print(f"   –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤: {path}")
            try:
                for log_file in path.rglob("*.log"):
                    log_file.unlink()
                    logs_cleared += 1
                for log_file in path.rglob("*.txt"):
                    if 'log' in log_file.name.lower():
                        log_file.unlink()
                        logs_cleared += 1
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤ {path}: {e}")
    
    if logs_cleared > 0:
        print(f"‚úÖ –û—á–∏—â–µ–Ω–æ –ª–æ–≥–æ–≤: {logs_cleared}")
    else:
        print("‚úÖ –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def create_lockfile_system():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    print("\nüîí –°–û–ó–î–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ë–õ–û–ö–ò–†–û–í–ö–ò")
    print("=" * 40)
    
    lockfile_code = '''#!/usr/bin/env python3
"""
RAG Training Lockfile System
–°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è
"""

import os
import sys
import time
import psutil
from pathlib import Path
import json
from datetime import datetime

class RAGTrainingLock:
    """–°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ RAG –æ–±—É—á–µ–Ω–∏—è"""
    
    def __init__(self, lockfile_path="./rag_training.lock"):
        self.lockfile_path = Path(lockfile_path)
        self.pid = os.getpid()
        
    def acquire_lock(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        if self.lockfile_path.exists():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∏–∑ lockfile
            try:
                with open(self.lockfile_path, 'r') as f:
                    lock_data = json.load(f)
                
                old_pid = lock_data.get('pid')
                if old_pid and psutil.pid_exists(old_pid):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
                    try:
                        proc = psutil.Process(old_pid)
                        cmdline = ' '.join(proc.cmdline())
                        if 'rag_trainer' in cmdline.lower() or 'enterprise_rag' in cmdline.lower():
                            print(f"‚ùå –û–®–ò–ë–ö–ê: –û–±—É—á–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ!")
                            print(f"   PID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {old_pid}")
                            print(f"   –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {lock_data.get('start_time')}")
                            print(f"   –ö–æ–º–∞–Ω–¥–∞: {cmdline}")
                            print("\\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:")
                            print(f"   kill {old_pid}  # Linux/Mac")
                            print(f"   taskkill /PID {old_pid} /F  # Windows")
                            return False
                    except psutil.NoSuchProcess:
                        # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π lockfile
                        self.lockfile_path.unlink()
                else:
                    # PID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π lockfile
                    self.lockfile_path.unlink()
                    
            except (json.JSONDecodeError, KeyError):
                # –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π lockfile, —É–¥–∞–ª—è–µ–º
                self.lockfile_path.unlink()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π lockfile
        lock_data = {
            'pid': self.pid,
            'start_time': datetime.now().isoformat(),
            'hostname': os.uname().nodename if hasattr(os, 'uname') else 'windows',
            'command': ' '.join(sys.argv)
        }
        
        try:
            with open(self.lockfile_path, 'w') as f:
                json.dump(lock_data, f, indent=2)
            print(f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: PID {self.pid}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è lockfile: {e}")
            return False
    
    def release_lock(self):
        """–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        try:
            if self.lockfile_path.exists():
                self.lockfile_path.unlink()
                print(f"üîì –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞: PID {self.pid}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
    
    def __enter__(self):
        if not self.acquire_lock():
            sys.exit(1)
        return self
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.release_lock()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
def ensure_single_training_instance():
    """–£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∑–∞–ø—É—â–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—É—á–µ–Ω–∏—è"""
    lock = RAGTrainingLock()
    return lock.acquire_lock()

if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    with RAGTrainingLock() as lock:
        print("–û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...")
        time.sleep(5)
        print("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
'''
    
    with open("rag_training_lock.py", "w", encoding="utf-8") as f:
        f.write(lockfile_code)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: rag_training_lock.py")

def create_safe_training_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è"""
    print("\nüìù –°–û–ó–î–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–ì–û –°–ö–†–ò–ü–¢–ê –ó–ê–ü–£–°–ö–ê")
    print("=" * 45)
    
    safe_script = '''#!/usr/bin/env python3
"""
Safe RAG Training Launcher
–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è RAG —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
"""

import sys
import os
from rag_training_lock import RAGTrainingLock

def main():
    print("üöÄ –ë–ï–ó–û–ü–ê–°–ù–´–ô –ó–ê–ü–£–°–ö RAG –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    with RAGTrainingLock() as lock:
        print("‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ...")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç—Ä–µ–Ω–µ—Ä
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–º–ø–æ—Ä—Ç –≤–∞—à–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
            # import enterprise_rag_trainer_full
            # enterprise_rag_trainer_full.main()
            
            # –ü–æ–∫–∞ —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ subprocess –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            import subprocess
            
            cmd = [
                sys.executable, 
                "enterprise_rag_trainer_full.py",
                "--custom_dir", "I:/docs/downloaded",
                "--fast_mode"
            ]
            
            print(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {' '.join(cmd)}")
            result = subprocess.run(cmd, capture_output=False)
            
            if result.returncode == 0:
                print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            else:
                print(f"‚ùå –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π: –∫–æ–¥ {result.returncode}")
                
        except KeyboardInterrupt:
            print("\\n‚ö†Ô∏è –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {e}")
        finally:
            print("üîì –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É...")

if __name__ == "__main__":
    main()
'''
    
    with open("safe_rag_training.py", "w", encoding="utf-8") as f:
        f.write(safe_script)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: safe_rag_training.py")

def create_reset_and_train_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è"""
    print("\nüìù –°–û–ó–î–ê–ù–ò–ï –°–ö–†–ò–ü–¢–ê –°–ë–†–û–°–ê –ò –û–ë–£–ß–ï–ù–ò–Ø")
    print("=" * 45)
    
    reset_and_train = '''@echo off
echo üî• –ü–û–õ–ù–´–ô –°–ë–†–û–° –ò –ü–ï–†–ï–ó–ê–ü–£–°–ö –û–ë–£–ß–ï–ù–ò–Ø RAG
echo ==========================================

echo.
echo ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –æ–±—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!
echo –í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?
pause

echo.
echo üóëÔ∏è –°–±—Ä–æ—Å –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...
python reset_all_databases.py

echo.
echo ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...
timeout /t 10 /nobreak

echo.
echo üöÄ –ó–∞–ø—É—Å–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...
python safe_rag_training.py

echo.
echo ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!
pause
'''
    
    with open("reset_and_train.bat", "w", encoding="utf-8") as f:
        f.write(reset_and_train)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: reset_and_train.bat")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞"""
    print("üí• –ü–û–õ–ù–´–ô –°–ë–†–û–° –í–°–ï–• –ë–ê–ó –î–ê–ù–ù–´–•")
    print("=" * 50)
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –æ–±—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!")
    print("–í–∫–ª—é—á–∞—è Neo4j, –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –±–∞–∑—ã, JSON –∫—ç—à –∏ –ª–æ–≥–∏")
    print()
    
    confirm = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã? –í–≤–µ–¥–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
    if confirm != "YES":
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    print("\nüî• –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–õ–ù–´–ô –°–ë–†–û–°...")
    print("=" * 35)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å –ø–æ –ø–æ—Ä—è–¥–∫—É
    kill_training_processes()
    reset_neo4j_database()
    reset_vector_database()
    reset_json_cache()
    reset_training_logs()
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –∑–∞—â–∏—Ç—ã
    create_lockfile_system()
    create_safe_training_script()
    create_reset_and_train_script()
    
    print("\nüéâ –ü–û–õ–ù–´–ô –°–ë–†–û–° –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 30)
    print("‚úÖ –í—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω—ã")
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–æ–∑–¥–∞–Ω–∞")
    print("‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
    print()
    print("üìã –ß–¢–û –î–ï–õ–ê–¢–¨ –î–ê–õ–¨–®–ï:")
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Neo4j Desktop –∑–∞–ø—É—â–µ–Ω")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python safe_rag_training.py")
    print("   –ò–õ–ò")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: reset_and_train.bat")
    print()
    print("üí° –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
    print("‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞")
    print("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    print("‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")

if __name__ == "__main__":
    main()