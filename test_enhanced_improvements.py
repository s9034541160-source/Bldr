#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ò–ô RAG PIPELINE
============================

–¢–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:
1. ‚úÖ –ó–∞–º–µ–Ω–∞ Rubern –Ω–∞ SBERT –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç  
2. ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
3. ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥ —Å —É—á–µ—Ç–æ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞  
4. ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

üéØ –¶–µ–ª—å: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏–π
"""

import sys
import os
sys.path.append('.')

from scripts.bldr_rag_trainer import BldrRAGTrainer
from enhanced_rag_improvements import apply_improvements_to_trainer
import time
import json
from pathlib import Path

def test_improvements():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏–π RAG pipeline"""
    
    print("üß™ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ò–ô RAG PIPELINE")
    print("="*50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–µ—Ä
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞...")
    trainer = BldrRAGTrainer()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è
    print("‚ö° –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è...")
    improvements_result = apply_improvements_to_trainer(trainer)
    
    print("‚úÖ –£–ª—É—á—à–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã:")
    for component in improvements_result['components']:
        print(f"   - {component}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_content = """
    1. –û–ë–©–ò–ï –ü–û–õ–û–ñ–ï–ù–ò–Ø
    
    1.1 –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –∂–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–æ–ª–∂–Ω–æ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π.
    
    1.2 –ú–æ–Ω—Ç–∞–∂ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏.
    
    2. –ó–ï–ú–õ–Ø–ù–´–ï –†–ê–ë–û–¢–´
    
    2.1 –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–µ–º–ª—è–Ω—ã—Ö —Ä–∞–±–æ—Ç –≤–∫–ª—é—á–∞–µ—Ç:
    - —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –≥—Ä—É–Ω—Ç–∞ —ç–∫—Å–∫–∞–≤–∞—Ç–æ—Ä–æ–º
    - —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Å—á–∞–Ω–æ–≥–æ –æ—Å–Ω–æ–≤–∞–Ω–∏—è 
    - –æ–±—Ä–∞—Ç–Ω—É—é –∑–∞—Å—ã–ø–∫—É —Å –ø–æ—Å–ª–æ–π–Ω—ã–º —É–ø–ª–æ—Ç–Ω–µ–Ω–∏–µ–º
    
    3. –ë–ï–¢–û–ù–ù–´–ï –†–ê–ë–û–¢–´
    
    3.1 –ë–µ—Ç–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –±–µ—Ç–æ–Ω–æ–º –∫–ª–∞—Å—Å–∞ –í25.
    3.2 –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è —É–∫–ª–∞–¥–∫–∏ –±–µ—Ç–æ–Ω–Ω–æ–π —Å–º–µ—Å–∏ –¥–æ–ª–∂–Ω–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—Ç—å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø–∞–ª—É–±–∫–∏.
    """
    
    test_filename = "SP_test_document.pdf"
    doc_type = "norms"
    doc_subtype = "sp"
    
    print("\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –æ–±—Ä–∞–∑—Ü–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    print(f"–§–∞–π–ª: {test_filename}")
    print(f"–¢–∏–ø: {doc_type}/{doc_subtype}")
    
    # –¢–µ—Å—Ç 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç —Å SBERT
    print("\nüîç –¢–µ—Å—Ç 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç —Å SBERT...")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º seed works
    seed_works = ["—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤", "–º–æ–Ω—Ç–∞–∂ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"]
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    structural_data = {
        'sections': 3,
        'tables': 0,
        'completeness': 0.8
    }
    
    # –í—ã–∑—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
    try:
        rubern_data = trainer._stage7_rubern_markup_enhanced(
            test_content, doc_type, doc_subtype, seed_works, structural_data
        )
        
        extracted_works = rubern_data.get('works', [])
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ä–∞–±–æ—Ç: {len(extracted_works)}")
        
        print("üìã –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã:")
        for i, work in enumerate(extracted_works[:5], 1):
            print(f"   {i}. {work}")
        
        if len(extracted_works) > 5:
            print(f"   ... –∏ –µ—â–µ {len(extracted_works) - 5} —Ä–∞–±–æ—Ç")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç: {e}")
    
    # –¢–µ—Å—Ç 2: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
    print("\nüè∑Ô∏è –¢–µ—Å—Ç 2: –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è...")
    
    try:
        category, confidence = trainer.enhanced_categorization(
            test_content, test_filename, doc_type
        )
        
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}")
        print(f"‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    
    # –¢–µ—Å—Ç 3: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥
    print("\nüìÑ –¢–µ—Å—Ç 3: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥...")
    
    try:
        chunks = trainer.enhanced_chunking(
            rubern_data,
            {'materials': [], 'finances': [], 'dates': []},
            {'doc_type': doc_type, 'doc_subtype': doc_subtype}
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
        
        # –ê–Ω–∞–ª–∏–∑ —á–∞–Ω–∫–æ–≤
        total_length = sum(chunk['length'] for chunk in chunks)
        avg_length = total_length / len(chunks) if chunks else 0
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞–Ω–∫–æ–≤:")
        print(f"   - –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_length} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   - –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {avg_length:.0f} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —á–∞–Ω–∫–∞
        print("üìã –ü–µ—Ä–≤—ã–µ —á–∞–Ω–∫–∏:")
        for i, chunk in enumerate(chunks[:2], 1):
            chunk_preview = chunk['text'][:100] + "..." if len(chunk['text']) > 100 else chunk['text']
            print(f"   –ß–∞–Ω–∫ {i} ({chunk['length']} —Å–∏–º–≤–æ–ª–æ–≤): {chunk_preview}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á–∞–Ω–∫–∏–Ω–≥–µ: {e}")
    
    # –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    print("\nüóÉÔ∏è –¢–µ—Å—Ç 4: –ë–∞–∑–∞ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    
    if 'db_update' in improvements_result:
        db_result = improvements_result['db_update']
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {db_result['status']}")
        print(f"‚úÖ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {db_result['total_documents']}")
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {db_result['categories']}")
        print(f"‚úÖ –ù–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {db_result['new_documents']}")
    else:
        print("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê")
    print("="*50)
    
    improvements_score = 0
    total_tests = 4
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    if 'works' in locals() and extracted_works:
        improvements_score += 1
        print("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç —Å SBERT: –†–ê–ë–û–¢–ê–ï–¢")
    else:
        print("‚ùå –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç —Å SBERT: –û–®–ò–ë–ö–ê")
    
    if 'category' in locals() and category:
        improvements_score += 1
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: –†–ê–ë–û–¢–ê–ï–¢")
    else:
        print("‚ùå –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è: –û–®–ò–ë–ö–ê")
    
    if 'chunks' in locals() and chunks:
        improvements_score += 1
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥: –†–ê–ë–û–¢–ê–ï–¢")
    else:
        print("‚ùå –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞–Ω–∫–∏–Ω–≥: –û–®–ò–ë–ö–ê")
    
    if improvements_result.get('db_update', {}).get('status') == 'success':
        improvements_score += 1
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –ù–¢–î: –†–ê–ë–û–¢–ê–ï–¢")
    else:
        print("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –ù–¢–î: –û–®–ò–ë–ö–ê")
    
    success_rate = (improvements_score / total_tests) * 100
    
    print(f"\nüìà –†–ï–ó–£–õ–¨–¢–ê–¢: {improvements_score}/{total_tests} ({success_rate:.0f}%)")
    
    if success_rate >= 75:
        print("üéâ –£–õ–£–ß–®–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –û–¢–õ–ò–ß–ù–û!")
        print("üí° –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏")
    elif success_rate >= 50:
        print("‚ö†Ô∏è  –£–õ–£–ß–®–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ß–ê–°–¢–ò–ß–ù–û")
        print("üí° –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    else:
        print("‚ùå –£–õ–£–ß–®–ï–ù–ò–Ø –ù–ï –†–ê–ë–û–¢–ê–Æ–¢")
        print("üí° –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    return {
        'success_rate': success_rate,
        'working_components': improvements_score,
        'total_tests': total_tests,
        'improvements_result': improvements_result
    }


if __name__ == "__main__":
    try:
        result = test_improvements()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with open('test_improvements_result.json', 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ test_improvements_result.json")
        
    except Exception as e:
        print(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()