#!/usr/bin/env python3
"""
Test script for the fixed training functionality
Tests the corrected background task execution and status tracking
"""

import requests
import time
import json
from dotenv import load_dotenv
import os

load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')
headers = {
    'Authorization': f'Bearer {API_TOKEN}',
    'Content-Type': 'application/json'
}

def test_training_functionality():
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–±—É—á–µ–Ω–∏—è")
    print("=" * 60)
    
    # Test 1: Check API health
    print("üì° –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API...")
    try:
        health_response = requests.get('http://localhost:8000/health', timeout=10)
        if health_response.status_code == 200:
            health_data = health_response.json()
            print(f"‚úÖ API —Å—Ç–∞—Ç—É—Å: {health_data.get('status', 'unknown')}")
        else:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health_response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {str(e)}")
        return
    
    # Test 2: Check initial training status
    print("\nüìä –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è...")
    try:
        status_response = requests.get(
            'http://localhost:8000/api/training/status',
            headers=headers,
            timeout=10
        )
        
        if status_response.status_code == 200:
            status_data = status_response.json()
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω:")
            print(f"   üîÑ is_training: {status_data.get('is_training', False)}")
            print(f"   üìà progress: {status_data.get('progress', 0)}%")
            print(f"   üè∑Ô∏è stage: {status_data.get('current_stage', 'unknown')}")
            print(f"   üí¨ message: {status_data.get('message', 'No message')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
    
    # Test 3: Start training on a small test directory
    print("\nüöÄ –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")
    
    # Use a smaller directory for testing
    test_directories = [
        "C:\\Bldr\\test_docs",
        "C:\\Bldr\\docs", 
        "I:\\docs\\–±–∞–∑–∞"
    ]
    
    test_dir = None
    for directory in test_directories:
        if os.path.exists(directory):
            test_dir = directory
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {test_dir}")
            break
    
    if not test_dir:
        print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é:")
        test_dir = "I:\\docs\\downloaded"
    
    try:
        train_response = requests.post(
            'http://localhost:8000/train',
            json={'custom_dir': test_dir},
            headers=headers,
            timeout=30
        )
        
        if train_response.status_code == 200:
            train_data = train_response.json()
            print(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ:")
            print(f"   üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {train_data.get('custom_dir', 'N/A')}")
            print(f"   üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {train_data.get('message', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {train_response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {train_response.text}")
            return
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è: {str(e)}")
        return
    
    # Test 4: Monitor training progress
    print(f"\nüìä –®–∞–≥ 4: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è (3 –º–∏–Ω—É—Ç—ã)...")
    
    start_time = time.time()
    max_duration = 180  # 3 minutes
    check_interval = 10  # Check every 10 seconds
    
    training_started = False
    training_completed = False
    
    while (time.time() - start_time) < max_duration and not training_completed:
        try:
            status_response = requests.get(
                'http://localhost:8000/api/training/status',
                headers=headers,
                timeout=10
            )
            
            if status_response.status_code == 200:
                status_data = status_response.json()
                is_training = status_data.get('is_training', False)
                progress = status_data.get('progress', 0)
                stage = status_data.get('current_stage', 'unknown')
                message = status_data.get('message', 'No message')
                elapsed_api = status_data.get('elapsed_seconds', 0)
                
                elapsed_test = int(time.time() - start_time)
                
                print(f"   [{elapsed_test:3}s] üìà {stage}: {message}")
                print(f"           üéØ Progress: {progress}% | Training: {is_training} | API elapsed: {elapsed_api}s")
                
                # Check if training actually started
                if is_training and not training_started:
                    print("üéâ –û–±—É—á–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∞–ª–æ—Å—å!")
                    training_started = True
                
                # Check if training completed
                if not is_training and training_started and progress >= 100:
                    print("üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                    training_completed = True
                    break
                elif not is_training and training_started and stage == "completed":
                    print("üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–ø–æ —Å—Ç–∞—Ç—É—Å—É)!")
                    training_completed = True
                    break
                elif stage == "error":
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {message}")
                    break
                    
            else:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status_response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
        
        time.sleep(check_interval)
    
    # Test 5: Final status check
    print(f"\nüìã –®–∞–≥ 5: –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    
    final_time = time.time() - start_time
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {int(final_time)}s")
    print(f"üöÄ –û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–ª–æ—Å—å: {'‚úÖ –î–∞' if training_started else '‚ùå –ù–µ—Ç'}")
    print(f"üèÅ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å: {'‚úÖ –î–∞' if training_completed else '‚ùå –ù–µ—Ç'}")
    
    # Test 6: Quick query test after training
    if training_completed:
        print(f"\nüîç –®–∞–≥ 6: –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è...")
        
        test_queries = ["—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ", "–¥–æ–∫—É–º–µ–Ω—Ç"]
        
        for query in test_queries:
            try:
                query_response = requests.post(
                    'http://localhost:8000/query',
                    json={'query': query, 'k': 3},
                    headers=headers,
                    timeout=30
                )
                
                if query_response.status_code == 200:
                    query_data = query_response.json()
                    results = query_data.get('results', [])
                    ndcg = query_data.get('ndcg', 0)
                    
                    print(f"   üéØ '{query}': {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, NDCG: {ndcg:.3f}")
                    
                    if results:
                        best_score = results[0].get('score', 0)
                        print(f"      üìä –õ—É—á—à–∏–π score: {best_score:.3f}")
                    
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {query_response.status_code}")
                    
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {str(e)}")
        
    print(f"\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # Summary
    print(f"\nüìã –†–µ–∑—é–º–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
    print(f"   üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–Ω—Ç–∞–∫—Å–∏—Å background_tasks.add_task()")
    print(f"   üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è")
    print(f"   ‚è±Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
    print(f"   üîÑ –£–ª—É—á—à–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è run_training_with_updates()")
    print(f"   üì° –û–±–Ω–æ–≤–ª–µ–Ω —ç–Ω–¥–ø–æ–∏–Ω—Ç /api/training/status")

if __name__ == '__main__':
    test_training_functionality()