#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import subprocess
import time
import requests
import os
import signal
from dotenv import load_dotenv

load_dotenv()

def kill_python_servers():
    """–£–±–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python...")
    try:
        # –î–ª—è Windows
        subprocess.run(["taskkill", "/f", "/im", "python.exe"], 
                      capture_output=True, text=True)
        time.sleep(2)
        print("‚úÖ –°—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

def start_server():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å FastAPI —Å–µ—Ä–≤–µ—Ä"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä...")
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env = os.environ.copy()
        env['SKIP_NEO4J'] = 'true'
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º uvicorn
        process = subprocess.Popen([
            "python", "-m", "uvicorn", 
            "core.main:app", 
            "--host", "0.0.0.0", 
            "--port", "8000",
            "--reload",
            "--access-log"
        ], 
        cwd="C:\\Bldr",
        env=env,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True,
        bufsize=1
        )
        
        print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —Å PID: {process.pid}")
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        for i in range(30):  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
            try:
                response = requests.get("http://localhost:8000/health", timeout=2)
                if response.status_code == 200:
                    print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤! (–ø–æ–ø—ã—Ç–∫–∞ {i+1})")
                    return process
            except:
                pass
            time.sleep(1)
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}/30...")
        
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
        return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        return None

def quick_test():
    """–ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print("\nüß™ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    api_token = os.getenv('API_TOKEN')
    if not api_token:
        print("‚ùå API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    headers = {
        "Authorization": f"Bearer {api_token}",
        "Content-Type": "application/json"
    }
    
    tests = [
        ("Health Check", "GET", "/health", {}, {}),
        ("Training Status", "GET", "/api/training/status", headers, {}),
        ("RAG Search", "POST", "/query", headers, {"query": "—Ç–µ—Å—Ç", "k": 1}),
        ("AI Request", "POST", "/ai", headers, {"prompt": "–ü—Ä–∏–≤–µ—Ç", "model": "deepseek/deepseek-r1-0528-qwen3-8b"}),
    ]
    
    results = []
    
    for test_name, method, endpoint, test_headers, data in tests:
        print(f"   üîÑ {test_name}...", end=" ", flush=True)
        try:
            url = f"http://localhost:8000{endpoint}"
            start_time = time.time()
            
            if method == "GET":
                response = requests.get(url, headers=test_headers, timeout=10)
            else:
                response = requests.post(url, headers=test_headers, json=data, timeout=10)
            
            duration = time.time() - start_time
            
            if response.status_code == 200:
                print(f"‚úÖ {duration:.2f}s")
                results.append(True)
            else:
                print(f"‚ùå HTTP {response.status_code} ({duration:.2f}s)")
                results.append(False)
        except Exception as e:
            print(f"‚ùå Error: {str(e)}")
            results.append(False)
    
    success_rate = sum(results) / len(results) * 100
    print(f"\nüìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {sum(results)}/{len(results)} ({success_rate:.1f}%)")
    
    if success_rate >= 75:
        print("üéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ!")
    elif success_rate >= 50:
        print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("üö® –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º, –Ω—É–∂–Ω–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    
    return success_rate

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –ò –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 60)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    kill_python_servers()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    server_process = start_server()
    
    if server_process:
        try:
            # –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            success_rate = quick_test()
            
            print(f"\nüéØ –ò–¢–û–ì:")
            if success_rate >= 75:
                print("   ‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ–ª–Ω—ã–µ E2E —Ç–µ—Å—Ç—ã")
                print("   üîÑ –ö–æ–º–∞–Ω–¥–∞: python final_e2e_test.py")
            else:
                print("   ‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
                print("   üîÑ –ö–æ–º–∞–Ω–¥–∞: python test_auth_fixed.py")
            
            print(f"\\nüì° –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞: http://localhost:8000")
            print(f"üìö API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8000/docs")
            print(f"üîß –õ–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏")
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞—Ç—å
            print(f"\\n‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–≤–ª–µ–Ω —Ä–∞–±–æ—Ç–∞—é—â–∏–º (PID: {server_process.pid})")
            print("   –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C –∏–ª–∏ taskkill /f /im python.exe")
            
        except KeyboardInterrupt:
            print("\\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
            server_process.terminate()
            time.sleep(2)
            if server_process.poll() is None:
                server_process.kill()
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")

if __name__ == "__main__":
    main()