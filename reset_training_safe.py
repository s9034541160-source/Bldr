#!/usr/bin/env python3
"""
üö® –ë–ï–ó–û–ü–ê–°–ù–´–ô –°–ë–†–û–° –ü–†–û–¶–ï–°–°–ê –û–ë–£–ß–ï–ù–ò–Ø RAG-–¢–†–ï–ù–ï–†–ê üö®

–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –ù–ï –£–ë–ò–í–ê–ï–¢ –°–ï–ë–Ø!
- –û—á–∏—â–∞–µ—Ç –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Neo4j, Qdrant, Redis)
- –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∫—ç—à–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
- –û—á–∏—â–∞–µ—Ç processed_files.json
- –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –æ—Ç—á–µ—Ç—ã –∏ –ª–æ–≥–∏
- –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
- –ù–ï –£–ë–ò–í–ê–ï–¢ –°–ï–ë–Ø! (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω —ç–ø–∏—á–µ—Å–∫–∏–π –±–∞–≥)

‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û! –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!
"""

import os
import json
import shutil
import time
import subprocess
import sys
from pathlib import Path

def print_banner():
    """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞"""
    print("=" * 80)
    print("üö® –ë–ï–ó–û–ü–ê–°–ù–´–ô –°–ë–†–û–° –ü–†–û–¶–ï–°–°–ê –û–ë–£–ß–ï–ù–ò–Ø RAG-–¢–†–ï–ù–ï–†–ê üö®")
    print("=" * 80)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!")
    print("‚ö†Ô∏è  –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!")
    print("‚úÖ  –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∫—Ä–∏–ø—Ç –ù–ï —É–±–∏–≤–∞–µ—Ç —Å–µ–±—è!")
    print("=" * 80)

def confirm_reset():
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞"""
    print("\nü§î –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ü–û–õ–ù–´–ô —Å–±—Ä–æ—Å?")
    print("–≠—Ç–æ —É–¥–∞–ª–∏—Ç:")
    print("  - –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ Neo4j")
    print("  - –í—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ Qdrant") 
    print("  - –í—Å–µ –∫—ç—à–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
    print("  - –í—Å–µ –æ—Ç—á–µ—Ç—ã –∏ –ª–æ–≥–∏")
    print("  - processed_files.json")
    print("  - –ù–ï –£–ë–¨–ï–¢ –°–ï–ë–Ø! (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)")
    
    response = input("\n‚ùì –í–≤–µ–¥–∏—Ç–µ 'RESET' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
    return response.strip() == 'RESET'

def stop_training_processes():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¢–û–õ–¨–ö–û –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è (–ù–ï –°–ï–ë–Ø!)"""
    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è...")
    try:
        import psutil
        import os
        
        current_pid = os.getpid()
        killed_count = 0
        
        print(f"üîç –¢–µ–∫—É—â–∏–π PID: {current_pid}")
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                if proc.info['name'] and 'python' in proc.info['name'].lower():
                    cmdline = ' '.join(proc.info['cmdline'] or [])
                    
                    # –ù–ï —É–±–∏–≤–∞–µ–º —Å–µ–±—è!
                    if proc.info['pid'] == current_pid:
                        print(f"   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–±—è: PID {proc.info['pid']}")
                        continue
                    
                    # –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã RAG-—Ç—Ä–µ–Ω–µ—Ä–∞
                    if any(keyword in cmdline.lower() for keyword in [
                        'enterprise_rag_trainer',
                        'rag_trainer', 
                        'train.py',
                        'training',
                        'celery',
                        'worker',
                        'rag_training'
                    ]):
                        print(f"   üéØ –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è: PID {proc.info['pid']}")
                        print(f"      –ö–æ–º–∞–Ω–¥–∞: {cmdline[:80]}...")
                        proc.kill()
                        killed_count += 1
                        
            except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
                pass
        
        if killed_count > 0:
            print(f"‚úÖ –£–±–∏—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è: {killed_count}")
            time.sleep(3)  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        else:
            print("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except ImportError:
        print("‚ö†Ô∏è psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π taskkill")
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback - —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –æ–∫–æ–Ω
            result1 = subprocess.run(['taskkill', '/F', '/FI', 'WINDOWTITLE eq *RAG*'], 
                                   capture_output=True, text=True)
            result2 = subprocess.run(['taskkill', '/F', '/FI', 'WINDOWTITLE eq *Training*'], 
                                   capture_output=True, text=True)
            print("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –æ–±—É—á–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (–±–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback)")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")

def reset_databases():
    """–°–±—Ä–æ—Å –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è –°–±—Ä–æ—Å –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
    
    # 1. –û—á–∏—Å—Ç–∫–∞ Qdrant
    try:
        from qdrant_client import QdrantClient
        client = QdrantClient(host='localhost', port=6333)
        collections = client.get_collections()
        for collection in collections.collections:
            print(f"  üóëÔ∏è –£–¥–∞–ª—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: {collection.name}")
            client.delete_collection(collection.name)
        print("‚úÖ Qdrant –æ—á–∏—â–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Qdrant: {e}")
    
    # 2. –û—á–∏—Å—Ç–∫–∞ Neo4j
    try:
        from neo4j import GraphDatabase
        driver = GraphDatabase.driver("bolt://localhost:7687", auth=("neo4j", "password"))
        with driver.session() as session:
            session.run("MATCH (n) DETACH DELETE n")
        driver.close()
        print("‚úÖ Neo4j –æ—á–∏—â–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Neo4j: {e}")
    
    # 3. –û—á–∏—Å—Ç–∫–∞ Redis
    try:
        import redis
        r = redis.Redis(host='localhost', port=6379, db=0)
        r.flushdb()
        print("‚úÖ Redis –æ—á–∏—â–µ–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis: {e}")

def clear_cache_and_files():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    items_to_remove = [
        'processed_files.json',
        'I:/docs/cache',
        'I:/docs/reports', 
        'I:/docs/embedding_cache',
        'I:/docs/downloaded/processed_files.json',  # !!! –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û! !!!
        'cache',
        'logs',
        '__pycache__',
        'temp',
        'processed',
        'failed'
    ]
    
    for item in items_to_remove:
        if os.path.exists(item):
            try:
                if os.path.isfile(item):
                    os.remove(item)
                    print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {item}")
                elif os.path.isdir(item):
                    shutil.rmtree(item)
                    print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {item}")
            except Exception as e:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {item}: {e}")
    
    # –£–¥–∞–ª–µ–Ω–∏–µ .pyc —Ñ–∞–π–ª–æ–≤
    try:
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.endswith('.pyc'):
                    os.remove(os.path.join(root, file))
        print("‚úÖ .pyc —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è .pyc: {e}")

def restart_docker_containers():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
    print("\nüê≥ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    try:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        subprocess.run(['docker', 'compose', 'down'], check=True)
        print("‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        subprocess.run(['docker', 'compose', 'up', '-d', 'redis', 'neo4j', 'qdrant'], check=True)
        print("‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Docker: {e}")

def wait_for_services():
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    services = [
        ('Redis', 'localhost', 6379),
        ('Neo4j', 'localhost', 7687),
        ('Qdrant', 'localhost', 6333)
    ]
    
    for service_name, host, port in services:
        print(f"  üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {service_name}...")
        for attempt in range(30):  # 30 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 2 —Å–µ–∫—É–Ω–¥—ã = 1 –º–∏–Ω—É—Ç–∞
            try:
                import socket
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((host, port))
                sock.close()
                if result == 0:
                    print(f"  ‚úÖ {service_name} –≥–æ—Ç–æ–≤")
                    break
            except:
                pass
            time.sleep(2)
        else:
            print(f"  ‚ùå {service_name} –Ω–µ –≥–æ—Ç–æ–≤")
            return False
    
    return True

def create_fresh_processed_files():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ processed_files.json"""
    print("\nüìÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ processed_files.json...")
    try:
        fresh_data = {
            "processed_files": [],
            "failed_files": [],
            "total_processed": 0,
            "total_failed": 0,
            "last_reset": time.strftime("%Y-%m-%d %H:%M:%S"),
            "version": "1.0"
        }
        
        with open('processed_files.json', 'w', encoding='utf-8') as f:
            json.dump(fresh_data, f, ensure_ascii=False, indent=2)
        
        print("‚úÖ processed_files.json —Å–æ–∑–¥–∞–Ω")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è processed_files.json: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if not confirm_reset():
        print("\n‚ùå –°–±—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    print("\nüöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ë–ï–ó–û–ü–ê–°–ù–´–ô –°–ë–†–û–°...")
    start_time = time.time()
    
    # 1. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ (–ë–ï–ó–û–ü–ê–°–ù–û!)
    stop_training_processes()
    
    # 2. –°–±—Ä–æ—Å –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    reset_databases()
    
    # 3. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π
    clear_cache_and_files()
    
    # 4. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker
    restart_docker_containers()
    
    # 5. –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
    if not wait_for_services():
        print("\n‚ùå –°–ë–†–û–° –ù–ï –ó–ê–í–ï–†–®–ï–ù: –°–µ—Ä–≤–∏—Å—ã –Ω–µ –≥–æ—Ç–æ–≤—ã")
        return
    
    # 6. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    create_fresh_processed_files()
    
    # –ò—Ç–æ–≥–∏
    elapsed = time.time() - start_time
    print("\n" + "=" * 80)
    print("üéâ –ë–ï–ó–û–ü–ê–°–ù–´–ô –°–ë–†–û–° –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
    print("=" * 80)
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.2f} —Å–µ–∫—É–Ω–¥")
    print("‚úÖ –í—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω—ã")
    print("‚úÖ –í—Å–µ –∫—ç—à–∏ —É–¥–∞–ª–µ–Ω—ã")
    print("‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã")
    print("‚úÖ –°–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
    print("‚úÖ processed_files.json —Å–æ–∑–¥–∞–Ω")
    print("‚úÖ –°–ö–†–ò–ü–¢ –ù–ï –£–ë–ò–õ –°–ï–ë–Ø! (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)")
    print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞:")
    print("   python enterprise_rag_trainer_full.py")
    print("=" * 80)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå –°–±—Ä–æ—Å –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
