#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simple Test API
===============
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RAG —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –±–µ–∑ —Ç—è–∂–µ–ª—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

from fastapi import FastAPI, HTTPException, Depends
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import time
import jwt
import os
import sys
from datetime import datetime
from typing import Optional, List, Dict, Any

# –î–æ–±–∞–≤–∏—Ç—å –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç –Ω–∞—à–∏—Ö RAG –º–æ–¥–µ–ª–µ–π
from rag_api_models import (
    RAGSearchRequest, RAGSearchResponse, RAGSearchResult,
    RAGTrainingRequest, RAGTrainingResponse, RAGStatusResponse,
    AIChatMessage, AIChatResponse,
    DocumentAnalysisRequest, DocumentAnalysisResponse
)

# –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(title="Simple RAG API Test", version="1.0.0")

# –î–æ–±–∞–≤–∏—Ç—å CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
security = HTTPBearer()
SECRET_KEY = "your-secret-key-change-in-production"

def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞"""
    try:
        token = credentials.credentials
        payload = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
        return payload
    except jwt.PyJWTError:
        raise HTTPException(status_code=401, detail="Invalid token")

# –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
mock_training_status = {
    "is_training": False,
    "progress": 0,
    "current_stage": "idle",
    "message": "RAG system ready",
    "total_documents": 42,
    "total_chunks": 1337
}

# ===============================
# API ENDPOINTS
# ===============================

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "status": "ok",
        "timestamp": datetime.now().isoformat(),
        "message": "Simple RAG API Test is running"
    }

@app.post("/api/rag/search", response_model=RAGSearchResponse)
async def rag_search(request_data: RAGSearchRequest, credentials: dict = Depends(verify_token)):
    """–¢–µ—Å—Ç–æ–≤—ã–π RAG –ø–æ–∏—Å–∫ (–º–æ–∫ –¥–∞–Ω–Ω—ã–µ)"""
    
    # –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞
    time.sleep(0.1)  # –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    # –°–æ–∑–¥–∞—Ç—å –º–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    mock_results = []
    for i in range(min(request_data.k, 3)):
        result = RAGSearchResult(
            content=f"–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç {i+1} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{request_data.query}'. –≠—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ—Ä–º–∞—Ö –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö.",
            score=0.9 - (i * 0.1),
            metadata={
                "doc_id": f"test_doc_{i+1}",
                "source": "test_database",
                "category": "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
                "type": "–Ω–æ—Ä–º–∞"
            },
            section_id=f"section_{i+1}",
            chunk_type="paragraph"
        )
        mock_results.append(result)
    
    response = RAGSearchResponse(
        query=request_data.query,
        results=mock_results,
        total_found=len(mock_results),
        processing_time=0.12,
        search_method="sbert_mock"
    )
    
    return response

@app.post("/api/rag/train", response_model=RAGTrainingResponse)
async def rag_train(request_data: RAGTrainingRequest, credentials: dict = Depends(verify_token)):
    """–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è RAG"""
    
    # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å (–º–æ–∫)
    global mock_training_status
    mock_training_status["is_training"] = True
    mock_training_status["current_stage"] = "starting"
    mock_training_status["message"] = "–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ RAG —Å–∏—Å—Ç–µ–º—ã..."
    
    task_id = f"mock_training_{int(time.time())}"
    
    response = RAGTrainingResponse(
        task_id=task_id,
        status="started",
        message="RAG training started successfully (mock)",
        estimated_time="2-5 minutes (mock)"
    )
    
    return response

@app.get("/api/rag/status", response_model=RAGStatusResponse)
async def rag_status(credentials: dict = Depends(verify_token)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å RAG —Å–∏—Å—Ç–µ–º—ã (–º–æ–∫)"""
    
    global mock_training_status
    
    response = RAGStatusResponse(
        is_training=mock_training_status["is_training"],
        progress=mock_training_status["progress"],
        current_stage=mock_training_status["current_stage"],
        message=mock_training_status["message"],
        total_documents=mock_training_status["total_documents"],
        total_chunks=mock_training_status["total_chunks"],
        last_update=datetime.now()
    )
    
    return response

@app.post("/api/ai/chat", response_model=AIChatResponse)
async def ai_chat(request_data: AIChatMessage, credentials: dict = Depends(verify_token)):
    """–¢–µ—Å—Ç–æ–≤—ã–π AI —á–∞—Ç (–º–æ–∫)"""
    
    # –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_used = []
    if request_data.context_search:
        for i in range(min(request_data.max_context, 2)):
            context_result = RAGSearchResult(
                content=f"–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç {i+1}: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {request_data.message[:20]}...",
                score=0.8 - (i * 0.1),
                metadata={"source": f"context_doc_{i+1}"},
                section_id=f"ctx_section_{i+1}",
                chunk_type="context"
            )
            context_used.append(context_result)
    
    # –ú–æ–∫ –æ—Ç–≤–µ—Ç AI
    ai_response = f"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: '{request_data.message}'. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
    
    if context_used:
        ai_response += f" –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ {len(context_used)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
    
    response = AIChatResponse(
        response=ai_response,
        context_used=context_used,
        agent_used="mock_agent",
        processing_time=0.5
    )
    
    return response

@app.post("/api/document/analyze", response_model=DocumentAnalysisResponse)
async def analyze_document(request_data: DocumentAnalysisRequest, credentials: dict = Depends(verify_token)):
    """–¢–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–º–æ–∫)"""
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(request_data.file_path):
        raise HTTPException(status_code=404, detail="File not found")
    
    # –ú–æ–∫ –∞–Ω–∞–ª–∏–∑
    response = DocumentAnalysisResponse(
        file_path=request_data.file_path,
        doc_type="—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è_–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
        confidence=0.95,
        sections_count=5,
        works_found=3,
        metadata={
            "file_size": os.path.getsize(request_data.file_path),
            "analysis_date": datetime.now().isoformat(),
            "mock": True
        },
        quality_score=0.88,
        processing_time=0.3
    )
    
    return response

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º
@app.post("/query")
async def original_query(query_data: dict, credentials: dict = Depends(verify_token)):
    """–ò–º–∏—Ç–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ query —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    query = query_data.get("query", "")
    k = query_data.get("k", 4)
    
    # –ú–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    results = []
    for i in range(min(k, 3)):
        result = {
            "chunk": f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç {i+1} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'",
            "score": 0.95 - (i * 0.05),
            "meta": {
                "doc_id": f"orig_doc_{i+1}",
                "entities": {
                    "ORG": ["–°–ü31", "–ì–û–°–¢"],
                    "MONEY": ["300–º–ª–Ω"],
                    "PERCENT": ["95%"]
                }
            },
            "tezis": f"profit ROI rec conf0.{95-i*5}",
            "viol": 95 - (i * 5)
        }
        results.append(result)
    
    return {
        "results": results,
        "ndcg": 0.92
    }

if __name__ == "__main__":
    print("üöÄ Starting Simple RAG Test API...")
    print("   Port: 8001")
    print("   Host: 127.0.0.1")
    print("   Mock data enabled")
    print()
    
    uvicorn.run(app, host="127.0.0.1", port=8001, log_level="info")