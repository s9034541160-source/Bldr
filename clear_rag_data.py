#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
CLEAR RAG DATA - –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• RAG
==================================

–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö RAG –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∏.
"""

import os
import sys
import json
import shutil
from pathlib import Path
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('clear_rag_data.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

def clear_neo4j_data():
    """–ü–†–û–ü–£–°–ö –û–ß–ò–°–¢–ö–ò Neo4j - –ë–ê–ó–ê –î–ê–ù–ù–´–• –ù–ï –û–ß–ò–©–ê–ï–¢–°–Ø"""
    logger.info("‚ÑπÔ∏è –ü–†–û–ü–£–°–ö: Neo4j –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ù–ï –æ—á–∏—â–∞–µ—Ç—Å—è")
    logger.info("‚ÑπÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ Neo4j —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è")

def clear_qdrant_data():
    """–ü–†–û–ü–£–°–ö –û–ß–ò–°–¢–ö–ò Qdrant - –ë–ê–ó–ê –î–ê–ù–ù–´–• –ù–ï –û–ß–ò–©–ê–ï–¢–°–Ø"""
    logger.info("‚ÑπÔ∏è –ü–†–û–ü–£–°–ö: Qdrant –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ù–ï –æ—á–∏—â–∞–µ—Ç—Å—è")
    logger.info("‚ÑπÔ∏è –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ Qdrant —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è")

def clear_file_cache():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞ (–ë–ï–ó –ë–ê–ó –î–ê–ù–ù–´–•)"""
    logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞...")
    
    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—ç—à, –ù–ï –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cache_dirs = [
        "I:/docs/downloaded/cache",
        "I:/docs/downloaded/embedding_cache", 
        "I:/docs/downloaded/reports",
        "cache",
        "embedding_cache",
        "reports"
    ]
    
    # –ù–ï –æ—á–∏—â–∞–µ–º qdrant_db - —ç—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö!
    logger.info("‚ÑπÔ∏è –ü–†–û–ü–£–°–ö: qdrant_db –ù–ï –æ—á–∏—â–∞–µ—Ç—Å—è (—ç—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)")
    
    for cache_dir in cache_dirs:
        if os.path.exists(cache_dir):
            try:
                shutil.rmtree(cache_dir)
                os.makedirs(cache_dir, exist_ok=True)
                logger.info(f"–û—á–∏—â–µ–Ω–∞ –ø–∞–ø–∫–∞: {cache_dir}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å {cache_dir}: {e}")
        else:
            logger.info(f"‚ÑπÔ∏è –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {cache_dir}")

def clear_processed_files():
    """–û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    processed_files = [
        "processed_files.json",
        "duplication_master_list.csv",
        "duplication_master_list_updated.csv"
    ]
    
    for file_path in processed_files:
        if os.path.exists(file_path):
            try:
                os.remove(file_path)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file_path}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {file_path}: {e}")
        else:
            logger.info(f"‚ÑπÔ∏è –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")

def clear_logs():
    """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
    logger.info("üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤...")
    
    log_files = [
        "rag_training.log",
        "force_retrain.log",
        "clear_rag_data.log",
        "gui_debug.log"
    ]
    
    for log_file in log_files:
        if os.path.exists(log_file):
            try:
                os.remove(log_file)
                logger.info(f"–£–¥–∞–ª–µ–Ω –ª–æ–≥: {log_file}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {log_file}: {e}")

def create_backup():
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π"""
    logger.info("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...")
    
    backup_dir = f"backup_rag_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    try:
        os.makedirs(backup_dir, exist_ok=True)
        
        # –ë—ç–∫–∞–ø –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        important_files = [
            "processed_files.json",
            "duplication_master_list.csv",
            "duplication_master_list_updated.csv"
        ]
        
        for file_path in important_files:
            if os.path.exists(file_path):
                shutil.copy2(file_path, f"{backup_dir}/{file_path}")
                logger.info(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {file_path}")
        
        # –ë—ç–∫–∞–ø –∫—ç—à–∞ (–ë–ï–ó –ë–ê–ó –î–ê–ù–ù–´–•)
        cache_dirs = ["cache", "embedding_cache", "reports"]  # –ù–ï –≤–∫–ª—é—á–∞–µ–º qdrant_db!
        for cache_dir in cache_dirs:
            if os.path.exists(cache_dir):
                shutil.copytree(cache_dir, f"{backup_dir}/{cache_dir}")
                logger.info(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø –ø–∞–ø–∫–∏: {cache_dir}")
        
        logger.info("‚ÑπÔ∏è –ü–†–û–ü–£–°–ö: qdrant_db –ù–ï –≤–∫–ª—é—á–µ–Ω –≤ –±—ç–∫–∞–ø (—ç—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)")
        
        logger.info(f"–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ: {backup_dir}")
        return backup_dir
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏"""
    logger.info("–ù–ê–ß–ê–õ–û –û–ß–ò–°–¢–ö–ò –î–ê–ù–ù–´–• RAG")
    logger.info("=" * 50)
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        backup_dir = create_backup()
        
        # 2. –ü–†–û–ü–£–°–ö: Neo4j –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ù–ï –æ—á–∏—â–∞–µ—Ç—Å—è
        clear_neo4j_data()
        
        # 3. –ü–†–û–ü–£–°–ö: Qdrant –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ù–ï –æ—á–∏—â–∞–µ—Ç—Å—è  
        clear_qdrant_data()
        
        # 4. –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤—ã–π –∫—ç—à (–ë–ï–ó –ë–ê–ó –î–ê–ù–ù–´–•)
        clear_file_cache()
        
        # 5. –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        clear_processed_files()
        
        # 6. –û—á–∏—â–∞–µ–º –ª–æ–≥–∏
        clear_logs()
        
        logger.info("–û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• RAG –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        logger.info("=" * 50)
        logger.info("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å RAG-—Ç—Ä–µ–Ω–µ—Ä –∑–∞–Ω–æ–≤–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        raise

if __name__ == "__main__":
    main()
