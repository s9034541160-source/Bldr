version: '3.8'

services:
  # Redis
  redis:
    image: redis:alpine
    container_name: bldr_redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j Database
  neo4j:
    build: .
    hostname: neo4j
    container_name: bldr_neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    environment:
      - NEO4J_AUTH=neo4j/neopassword
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      - redis

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: bldr_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:6333 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      - redis

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bldr_postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=bldr
      - POSTGRES_USER=bldr_user
      - POSTGRES_PASSWORD=bldr_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bldr_user -d bldr"]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - redis

  # Backend API
  backend:
    build: .
    container_name: bldr_backend
    ports:
      - "8000:8000"
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=neopassword
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://bldr_user:bldr_password@postgres:5432/bldr
      - LLM_BASE_URL=http://localhost:1234/v1
      - FRONTEND_URL=http://localhost:3000
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-YOUR_TELEGRAM_BOT_TOKEN_HERE}
      - TELEGRAM_WEBHOOK_SECRET=${TELEGRAM_WEBHOOK_SECRET:-default_webhook_secret}
    volumes:
      - ./data:/app/data
      - ./exports:/app/exports
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # RAG Trainer Service
  rag-trainer:
    build: .
    container_name: bldr_rag_trainer
    environment:
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://bldr_user:bldr_password@postgres:5432/bldr
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import requests; requests.get(\"http://qdrant:6333/health\")' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Telegram Bot Webhook
  bot-webhook:
    build: .
    container_name: bldr_bot_webhook
    ports:
      - "8001:8000"
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN:-YOUR_TELEGRAM_BOT_TOKEN_HERE}
      - TELEGRAM_WEBHOOK_SECRET=${TELEGRAM_WEBHOOK_SECRET:-default_webhook_secret}
      - REDIS_URL=redis://redis:6379
      - QDRANT_URL=http://qdrant:6333
      - POSTGRES_URL=postgresql://bldr_user:bldr_password@postgres:5432/bldr
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:8000/tg/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend
  frontend:
    build:
      context: ./web/bldr_dashboard
      dockerfile: Dockerfile.frontend
    container_name: bldr_frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  neo4j_data:
  neo4j_logs:
  qdrant_data:
  postgres_data: