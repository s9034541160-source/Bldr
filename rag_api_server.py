"""
üåê API Server –¥–ª—è RAG-—Ç—Ä–µ–Ω–µ—Ä–∞
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ Bldr
"""

import os
import sys
import json
import logging
import time
from pathlib import Path
from typing import List, Dict, Optional
from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)
CORS(app)  # –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è RAG —Ç—Ä–µ–Ω–µ—Ä–∞
rag_trainer = None

def initialize_rag_trainer():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Ç—Ä–µ–Ω–µ—Ä–∞"""
    global rag_trainer
    
    try:
        from enterprise_rag_trainer_full import EnterpriseRAGTrainer
        
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Ç—Ä–µ–Ω–µ—Ä–∞...")
        rag_trainer = EnterpriseRAGTrainer()
        logger.info("‚úÖ RAG —Ç—Ä–µ–Ω–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG —Ç—Ä–µ–Ω–µ—Ä–∞: {e}")
        return False

@app.route('/api/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
    return jsonify({
        "status": "healthy",
        "rag_trainer_loaded": rag_trainer is not None,
        "timestamp": time.time()
    })

@app.route('/api/analyze-file', methods=['POST'])
def analyze_single_file():
    """
    API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    POST /api/analyze-file
    Body: {"file_path": "/path/to/file.pdf", "save_to_db": false}
    """
    try:
        if not rag_trainer:
            return jsonify({"error": "RAG trainer not initialized"}), 500
        
        data = request.get_json()
        if not data:
            return jsonify({"error": "No JSON data provided"}), 400
        
        file_path = data.get('file_path')
        save_to_db = data.get('save_to_db', False)
        
        if not file_path:
            return jsonify({"error": "file_path is required"}), 400
        
        if not os.path.exists(file_path):
            return jsonify({"error": "File not found"}), 404
        
        logger.info(f"üîç API: Analyzing file: {os.path.basename(file_path)}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
        result = rag_trainer.process_single_file_ad_hoc(file_path, save_to_db=save_to_db)
        
        if result and result.get('success'):
            return jsonify({
                "success": True,
                "data": result,
                "message": "File analyzed successfully"
            })
        else:
            return jsonify({
                "success": False,
                "error": result.get('error', 'Analysis failed') if result else 'No result'
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå Error in analyze_single_file: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/api/analyze-project', methods=['POST'])
def analyze_project():
    """
    API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤)
    POST /api/analyze-project
    Body: {"file_paths": ["/path/to/file1.pdf", "/path/to/file2.pdf"]}
    """
    try:
        if not rag_trainer:
            return jsonify({"error": "RAG trainer not initialized"}), 500
        
        data = request.get_json()
        if not data:
            return jsonify({"error": "No JSON data provided"}), 400
        
        file_paths = data.get('file_paths', [])
        
        if not file_paths:
            return jsonify({"error": "file_paths is required"}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        valid_files = []
        for file_path in file_paths:
            if os.path.exists(file_path):
                valid_files.append(file_path)
            else:
                logger.warning(f"‚ö†Ô∏è File not found: {file_path}")
        
        if not valid_files:
            return jsonify({"error": "No valid files found"}), 404
        
        logger.info(f"üìä API: Analyzing project with {len(valid_files)} files")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
        results = rag_trainer.analyze_project_context(valid_files)
        
        return jsonify({
            "success": True,
            "data": results,
            "message": f"Project analyzed successfully ({len(results)} files)"
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error in analyze_project: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/api/train-file', methods=['POST'])
def train_single_file():
    """
    API –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è –Ω–∞ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ
    POST /api/train-file
    Body: {"file_path": "/path/to/file.pdf"}
    """
    try:
        if not rag_trainer:
            return jsonify({"error": "RAG trainer not initialized"}), 500
        
        data = request.get_json()
        if not data:
            return jsonify({"error": "No JSON data provided"}), 400
        
        file_path = data.get('file_path')
        
        if not file_path:
            return jsonify({"error": "file_path is required"}), 400
        
        if not os.path.exists(file_path):
            return jsonify({"error": "File not found"}), 404
        
        logger.info(f"üéì API: Training on file: {os.path.basename(file_path)}")
        
        # –î–æ–æ–±—É—á–∞–µ–º –Ω–∞ —Ñ–∞–π–ª–µ (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î)
        result = rag_trainer.process_single_file_ad_hoc(file_path, save_to_db=True)
        
        if result and result.get('success'):
            return jsonify({
                "success": True,
                "data": result,
                "message": "File trained successfully and saved to database"
            })
        else:
            return jsonify({
                "success": False,
                "error": result.get('error', 'Training failed') if result else 'No result'
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå Error in train_single_file: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/api/get-file-info', methods=['GET'])
def get_file_info():
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
    GET /api/get-file-info?file_path=/path/to/file.pdf
    """
    try:
        file_path = request.args.get('file_path')
        
        if not file_path:
            return jsonify({"error": "file_path parameter is required"}), 400
        
        if not os.path.exists(file_path):
            return jsonify({"error": "File not found"}), 404
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info = {
            "file_name": os.path.basename(file_path),
            "file_path": file_path,
            "file_size": os.path.getsize(file_path),
            "file_extension": Path(file_path).suffix,
            "exists": True
        }
        
        return jsonify({
            "success": True,
            "data": file_info
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error in get_file_info: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route('/api/list-files', methods=['GET'])
def list_files():
    """
    API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    GET /api/list-files?directory=/path/to/directory&extension=.pdf
    """
    try:
        directory = request.args.get('directory', 'I:/docs/downloaded')
        extension = request.args.get('extension', '.pdf')
        
        if not os.path.exists(directory):
            return jsonify({"error": "Directory not found"}), 404
        
        files = []
        for root, dirs, filenames in os.walk(directory):
            for filename in filenames:
                if filename.endswith(extension):
                    file_path = os.path.join(root, filename)
                    files.append({
                        "file_name": filename,
                        "file_path": file_path,
                        "file_size": os.path.getsize(file_path),
                        "directory": root
                    })
        
        return jsonify({
            "success": True,
            "data": {
                "files": files,
                "count": len(files),
                "directory": directory,
                "extension": extension
            }
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error in list_files: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Endpoint not found"}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "Internal server error"}), 500

def main():
    """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ RAG API Server...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG —Ç—Ä–µ–Ω–µ—Ä
    if not initialize_rag_trainer():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RAG —Ç—Ä–µ–Ω–µ—Ä")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    logger.info("üåê API Server –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    logger.info("   - GET  /api/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è")
    logger.info("   - POST /api/analyze-file - –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    logger.info("   - POST /api/analyze-project - –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞")
    logger.info("   - POST /api/train-file - –¥–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ —Ñ–∞–π–ª–µ")
    logger.info("   - GET  /api/get-file-info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ")
    logger.info("   - GET  /api/list-files - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤")
    
    app.run(host='0.0.0.0', port=5000, debug=True)

if __name__ == "__main__":
    main()
