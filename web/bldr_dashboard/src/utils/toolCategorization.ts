/**
 * –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç 55 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
 */

export interface ToolCategory {
  id: string;
  title: string;
  description: string;
  icon: string;
  color: string;
  priority: number; // –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
}

export interface CategorizedTools {
  category: ToolCategory;
  tools: any[];
  count: number;
}

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
export const TOOL_CATEGORIES: ToolCategory[] = [
  {
    id: 'analysis',
    title: '–ê–Ω–∞–ª–∏–∑ –∏ –û—Ç—á–µ—Ç—ã',
    description: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤',
    icon: 'üìä',
    color: '#1890ff',
    priority: 1
  },
  {
    id: 'construction',
    title: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
    description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç—Ä–∞—Å–ª–∏',
    icon: 'üèóÔ∏è',
    color: '#52c41a',
    priority: 2
  },
  {
    id: 'ai',
    title: '–ò–ò –∏ ML',
    description: '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
    icon: 'ü§ñ',
    color: '#722ed1',
    priority: 3
  },
  {
    id: 'data',
    title: '–†–∞–±–æ—Ç–∞ —Å –î–∞–Ω–Ω—ã–º–∏',
    description: '–û–±—Ä–∞–±–æ—Ç–∫–∞, –æ—á–∏—Å—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
    icon: 'üíæ',
    color: '#fa8c16',
    priority: 4
  },
  {
    id: 'automation',
    title: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
    description: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
    icon: '‚ö°',
    color: '#eb2f96',
    priority: 5
  },
  {
    id: 'communication',
    title: '–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏',
    description: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π',
    icon: 'üí¨',
    color: '#13c2c2',
    priority: 6
  },
  {
    id: 'utilities',
    title: '–£—Ç–∏–ª–∏—Ç—ã',
    description: '–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ —É—Ç–∏–ª–∏—Ç—ã',
    icon: 'üîß',
    color: '#8c8c8c',
    priority: 7
  }
];

// –ü—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∏ –æ–ø–∏—Å–∞–Ω–∏–π
export const CATEGORIZATION_RULES = {
  analysis: [
    'analyze', 'analysis', 'report', 'summary', 'statistics', 'metrics',
    'tender', 'financial', 'budget', 'estimate', 'calculation'
  ],
  construction: [
    'construction', 'building', 'sp', '—Å–Ω–∏–ø', '–≥–æ—Å—Ç', '—Å–º–µ—Ç–∞', 'estimate',
    'project', 'design', 'planning', 'structural', 'engineering'
  ],
  ai: [
    'ai', 'ml', 'neural', 'model', 'prediction', 'classification',
    'nlp', 'text', 'image', 'recognition', 'intelligent'
  ],
  data: [
    'data', 'extract', 'parse', 'process', 'transform', 'clean',
    'import', 'export', 'convert', 'format', 'database'
  ],
  automation: [
    'auto', 'automation', 'batch', 'schedule', 'workflow', 'pipeline',
    'trigger', 'event', 'monitor', 'alert'
  ],
  communication: [
    'email', 'message', 'notification', 'alert', 'chat', 'voice',
    'speech', 'presentation', 'meeting', 'collaboration'
  ]
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
export function categorizeTool(tool: any): string {
  const name = tool.name?.toLowerCase() || '';
  const description = tool.description?.toLowerCase() || '';
  const category = tool.category?.toLowerCase() || '';
  
  const text = `${name} ${description} ${category}`;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
  for (const [categoryId, keywords] of Object.entries(CATEGORIZATION_RULES)) {
    if (keywords.some(keyword => text.includes(keyword))) {
      return categoryId;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Ç–∏–ª–∏—Ç—ã
  return 'utilities';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
export function groupToolsByCategory(tools: any[]): CategorizedTools[] {
  const grouped: { [key: string]: any[] } = {};
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
  tools.forEach(tool => {
    const categoryId = categorizeTool(tool);
    if (!grouped[categoryId]) {
      grouped[categoryId] = [];
    }
    grouped[categoryId].push(tool);
  });
  
  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
  return TOOL_CATEGORIES
    .map(category => ({
      category,
      tools: grouped[category.id] || [],
      count: grouped[category.id]?.length || 0
    }))
    .filter(group => group.count > 0)
    .sort((a, b) => a.category.priority - b.category.priority);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
export function getPopularTools(tools: any[]): any[] {
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
  return tools
    .filter(tool => tool.available)
    .sort((a, b) => {
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∏–∑–±—Ä–∞–Ω–Ω—ã–µ, –∑–∞—Ç–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
      const aFav = a.isFavorite ? 1 : 0;
      const bFav = b.isFavorite ? 1 : 0;
      if (aFav !== bFav) return bFav - aFav;
      return a.name.localeCompare(b.name);
    })
    .slice(0, 8); // –¢–æ–ø-8 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
export function getRecentTools(tools: any[]): any[] {
  return tools
    .filter(tool => tool.lastUsed)
    .sort((a, b) => new Date(b.lastUsed).getTime() - new Date(a.lastUsed).getTime())
    .slice(0, 6); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6
}
