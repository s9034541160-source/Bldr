/**
 * EstimateAnalyzer - –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–º–µ—Ç –¥–ª—è TypeScript/Ant Design
 */

import React, { useState, useCallback } from 'react';
import { 
  Card, 
  Upload, 
  Button, 
  Select, 
  Checkbox, 
  Progress, 
  Result, 
  Descriptions, 
  Table, 
  message,
  Row,
  Col,
  Divider
} from 'antd';
import { 
  UploadOutlined, 
  FileExcelOutlined, 
  DeleteOutlined, 
  PlayCircleOutlined,
  DownloadOutlined
} from '@ant-design/icons';
import type { RcFile, UploadFile } from 'antd/es/upload/interface';

const { Option } = Select;

interface AnalysisParams {
  analysisType: string;
  region: string;
  includeGESN: boolean;
  includeFER: boolean;
  includeRegionalCoeff: boolean;
}

interface AnalysisResult {
  summary: {
    total_cost: string;
    items_count: number;
    errors_count: number;
    warnings_count: number;
  };
  details: Array<{
    name: string;
    unit: string;
    quantity: number;
    price: number;
    total: number;
  }>;
  compliance_check: {
    gesn_compliance: string;
    regional_coefficients: string;
    price_year: string;
  };
}

const EstimateAnalyzer: React.FC = () => {
  const [files, setFiles] = useState<UploadFile[]>([]);
  const [analysisParams, setAnalysisParams] = useState<AnalysisParams>({
    analysisType: 'full',
    region: 'moscow', 
    includeGESN: true,
    includeFER: false,
    includeRegionalCoeff: true
  });
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisProgress, setAnalysisProgress] = useState(0);
  const [currentJobId, setCurrentJobId] = useState<string | null>(null);
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null);
  const [analysisError, setAnalysisError] = useState<string | null>(null);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
  const handleFileChange = useCallback((info: any) => {
    const { fileList } = info;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã
    const supportedFiles = fileList.filter((file: UploadFile) => {
      const isSupported = [
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.ms-excel',
        'application/pdf',
        'text/csv'
      ].includes(file.type || '');
      
      if (!isSupported && file.status !== 'removed') {
        message.error(`–§–∞–π–ª ${file.name} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`);
      }
      
      return isSupported;
    });
    
    setFiles(supportedFiles);
  }, []);

  // –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–∞–≥—Ä—É–∑–∫—É)
  const customRequest = ({ onSuccess }: any) => {
    setTimeout(() => {
      onSuccess({});
    }, 0);
  };

  // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
  const startAnalysis = async () => {
    if (files.length === 0) {
      message.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã —Å–º–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }

    setIsAnalyzing(true);
    setAnalysisProgress(0);
    setAnalysisResult(null);
    setAnalysisError(null);

    try {
      const formData = new FormData();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
      files.forEach((file) => {
        if (file.originFileObj) {
          formData.append('files', file.originFileObj as RcFile);
        }
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      formData.append('params', JSON.stringify(analysisParams));

      const response = await fetch('/api/tools/analyze/estimate', {
        method: 'POST',
        body: formData
      });

      if (!response.ok) {
        throw new Error(`HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.success) {
        setCurrentJobId(result.job_id);
        message.success('–ê–Ω–∞–ª–∏–∑ —Å–º–µ—Ç –∑–∞–ø—É—â–µ–Ω');
        
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        const checkProgress = async () => {
          try {
            const statusResponse = await fetch(`/api/tools/jobs/${result.job_id}/status`);
            if (statusResponse.ok) {
              const statusData = await statusResponse.json();
              
              setAnalysisProgress(statusData.progress || 0);
              
              if (statusData.status === 'completed') {
                setAnalysisResult(statusData.result);
                setIsAnalyzing(false);
                message.success('–ê–Ω–∞–ª–∏–∑ —Å–º–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
              } else if (statusData.status === 'failed') {
                setAnalysisError(statusData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
                setIsAnalyzing(false);
                message.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–º–µ—Ç');
              } else {
                setTimeout(checkProgress, 2000);
              }
            }
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
            setTimeout(checkProgress, 5000);
          }
        };
        
        checkProgress();
        
      } else {
        throw new Error(result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
      setAnalysisError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      setIsAnalyzing(false);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–º–µ—Ç');
    }
  };

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const downloadResult = async () => {
    if (!currentJobId) return;
    
    try {
      const response = await fetch(`/api/tools/jobs/${currentJobId}/download`);
      const blob = await response.blob();
      
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `estimate_analysis_result.json`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      message.success('–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
    } catch (error) {
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
    }
  };

  // –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π
  const detailColumns = [
    {
      title: '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç',
      dataIndex: 'name',
      key: 'name',
    },
    {
      title: '–ï–¥. –∏–∑–º.',
      dataIndex: 'unit',
      key: 'unit',
      width: 100,
    },
    {
      title: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      dataIndex: 'quantity',
      key: 'quantity',
      width: 120,
      render: (value: number) => value.toLocaleString('ru-RU'),
    },
    {
      title: '–¶–µ–Ω–∞, —Ä—É–±',
      dataIndex: 'price',
      key: 'price',
      width: 150,
      render: (value: number) => value.toLocaleString('ru-RU'),
    },
    {
      title: '–°—É–º–º–∞, —Ä—É–±',
      dataIndex: 'total',
      key: 'total',
      width: 180,
      render: (value: number) => (
        <span style={{ fontWeight: 'bold' }}>
          {value.toLocaleString('ru-RU')}
        </span>
      ),
    },
  ];

  return (
    <div>
      <Row gutter={[24, 24]}>
        {/* –ü–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ */}
        <Col span={12}>
          <Card title="üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–º–µ—Ç" size="small">
            <Upload.Dragger
              multiple
              accept=".xlsx,.xls,.pdf,.csv"
              fileList={files}
              onChange={handleFileChange}
              customRequest={customRequest}
              showUploadList={{
                showRemoveIcon: true,
                showPreviewIcon: false,
              }}
            >
              <p className="ant-upload-drag-icon">
                <FileExcelOutlined style={{ fontSize: 48, color: '#52c41a' }} />
              </p>
              <p className="ant-upload-text">
                –ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª—ã —Å–º–µ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
              </p>
              <p className="ant-upload-hint">
                –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: XLSX, XLS, PDF, CSV (–¥–æ 50MB)
              </p>
            </Upload.Dragger>
          </Card>
        </Col>

        {/* –ü–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
        <Col span={12}>
          <Card title="‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞" size="small">
            <div style={{ display: 'flex', flexDirection: 'column', gap: '16px' }}>
              <div>
                <label style={{ display: 'block', marginBottom: '8px', fontWeight: 500 }}>
                  –¢–∏–ø –∞–Ω–∞–ª–∏–∑–∞:
                </label>
                <Select
                  style={{ width: '100%' }}
                  value={analysisParams.analysisType}
                  onChange={(value) => setAnalysisParams(prev => ({ ...prev, analysisType: value }))}
                >
                  <Option value="full">–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑</Option>
                  <Option value="basic">–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑</Option>
                  <Option value="compliance">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è</Option>
                  <Option value="cost_only">–¢–æ–ª—å–∫–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å</Option>
                </Select>
              </div>

              <div>
                <label style={{ display: 'block', marginBottom: '8px', fontWeight: 500 }}>
                  –†–µ–≥–∏–æ–Ω:
                </label>
                <Select
                  style={{ width: '100%' }}
                  value={analysisParams.region}
                  onChange={(value) => setAnalysisParams(prev => ({ ...prev, region: value }))}
                >
                  <Option value="moscow">–ú–æ—Å–∫–≤–∞</Option>
                  <Option value="spb">–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</Option>
                  <Option value="ekb">–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥</Option>
                  <Option value="nsk">–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫</Option>
                  <Option value="kzn">–ö–∞–∑–∞–Ω—å</Option>
                </Select>
              </div>

              <Divider />

              <div style={{ display: 'flex', flexDirection: 'column', gap: '8px' }}>
                <Checkbox
                  checked={analysisParams.includeGESN}
                  onChange={(e) => setAnalysisParams(prev => ({ ...prev, includeGESN: e.target.checked }))}
                >
                  –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫–∏ –ì–≠–°–ù
                </Checkbox>
                
                <Checkbox
                  checked={analysisParams.includeFER}
                  onChange={(e) => setAnalysisParams(prev => ({ ...prev, includeFER: e.target.checked }))}
                >
                  –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫–∏ –§–ï–†
                </Checkbox>
                
                <Checkbox
                  checked={analysisParams.includeRegionalCoeff}
                  onChange={(e) => setAnalysisParams(prev => ({ ...prev, includeRegionalCoeff: e.target.checked }))}
                >
                  –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                </Checkbox>
              </div>
            </div>
          </Card>
        </Col>
      </Row>

      {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ */}
      <div style={{ textAlign: 'center', margin: '24px 0' }}>
        <Button
          type="primary"
          size="large"
          icon={<PlayCircleOutlined />}
          onClick={startAnalysis}
          disabled={files.length === 0 || isAnalyzing}
          loading={isAnalyzing}
        >
          {isAnalyzing ? '–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑...' : '–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–º–µ—Ç'}
        </Button>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ */}
      {isAnalyzing && (
        <Card style={{ marginBottom: '24px' }}>
          <div style={{ textAlign: 'center' }}>
            <Progress
              type="circle"
              percent={analysisProgress}
              status="active"
              format={percent => `${percent}%`}
            />
            <p style={{ marginTop: '16px', color: '#666' }}>
              –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {files.length} —Ñ–∞–π–ª(–æ–≤)...
            </p>
          </div>
        </Card>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ */}
      {analysisResult && (
        <Card 
          title="‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–º–µ—Ç"
          extra={
            <Button 
              type="primary" 
              icon={<DownloadOutlined />}
              onClick={downloadResult}
            >
              –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç
            </Button>
          }
        >
          {/* –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <Descriptions column={4} bordered>
            <Descriptions.Item label="–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å">
              <span style={{ fontSize: '18px', fontWeight: 'bold', color: '#52c41a' }}>
                {analysisResult.summary.total_cost}
              </span>
            </Descriptions.Item>
            <Descriptions.Item label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π">
              {analysisResult.summary.items_count}
            </Descriptions.Item>
            <Descriptions.Item label="–û—à–∏–±–∫–∏">
              <span style={{ color: analysisResult.summary.errors_count > 0 ? '#ff4d4f' : '#52c41a' }}>
                {analysisResult.summary.errors_count}
              </span>
            </Descriptions.Item>
            <Descriptions.Item label="–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è">
              <span style={{ color: analysisResult.summary.warnings_count > 0 ? '#faad14' : '#52c41a' }}>
                {analysisResult.summary.warnings_count}
              </span>
            </Descriptions.Item>
            <Descriptions.Item label="–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ì–≠–°–ù" span={2}>
              {analysisResult.compliance_check.gesn_compliance}
            </Descriptions.Item>
            <Descriptions.Item label="–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã" span={2}>
              {analysisResult.compliance_check.regional_coefficients}
            </Descriptions.Item>
          </Descriptions>

          {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ */}
          <Divider orientation="left">–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø–æ–∑–∏—Ü–∏—è–º</Divider>
          <Table
            columns={detailColumns}
            dataSource={analysisResult.details}
            rowKey="name"
            size="small"
            scroll={{ x: 800 }}
            pagination={{ 
              pageSize: 10, 
              showSizeChanger: true,
              showTotal: (total, range) => `${range[0]}-${range[1]} –∏–∑ ${total} –ø–æ–∑–∏—Ü–∏–π`
            }}
          />
        </Card>
      )}

      {/* –û—à–∏–±–∫–∏ */}
      {analysisError && (
        <Result
          status="error"
          title="–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–º–µ—Ç"
          subTitle={analysisError}
          extra={
            <Button type="primary" onClick={() => setAnalysisError(null)}>
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
          }
        />
      )}
    </div>
  );
};

export default EstimateAnalyzer;