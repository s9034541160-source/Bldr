import os
import ast
import shutil
from pathlib import Path
from datetime import datetime
from collections import defaultdict

def load_function_inventory_from_report():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –æ—Ç—á–µ—Ç–∞ —Å–∫—Ä–∏–ø—Ç–∞-—Ö–∏—Ä—É—Ä–≥–∞.
    –ï—Å–ª–∏ –æ—Ç—á–µ—Ç–∞ –Ω–µ—Ç ‚Äî —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –∑–∞–Ω–æ–≤–æ.
    """
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Ç—á–µ—Ç
    report_path = Path("BUILD_REPORT") / "BUILD_REPORT.md"
    if report_path.exists():
        print("üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏–∑ –æ—Ç—á–µ—Ç–∞...")
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –ø–∞—Ä—Å–∏–Ω–≥ –æ—Ç—á–µ—Ç–∞, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä—É–µ–º
        pass

    # –ü–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
    print("üîç –ü–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...")
    function_inventory = []
    ignored_dirs = {
        'venv', '.venv', '.git', '.vscode', '.idea', '__pycache__',
        '.pytest_cache', 'node_modules', 'build', 'dist',
        'ARCHIVE', 'CANONICAL_FUNCTIONS', 'BUILD_REPORT', 'web', 'data', 'logs'
    }

    for file_path in Path(r"C:\Bldr").rglob("*.py"):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
        if any(ignored in str(file_path).lower() for ignored in ignored_dirs):
            continue

        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                source = f.read()
            tree = ast.parse(source)
            for node in ast.walk(tree):
                if isinstance(node, ast.FunctionDef):
                    function_inventory.append({
                        'FunctionName': node.name,
                        'FilePath': str(file_path.resolve()),
                        'StartLine': node.lineno,
                        'EndLine': getattr(node, 'end_lineno', node.lineno)
                    })
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞ {file_path}: {e}")

    return function_inventory

def find_canonical_functions():
    """
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏.
    """
    canonical_dir = Path("CANONICAL_FUNCTIONS")
    if not canonical_dir.exists():
        return set()

    canonical_functions = set()
    for file_path in canonical_dir.glob("*.py"):
        func_name = file_path.stem  # –ò–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        canonical_functions.add(func_name)

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(canonical_functions)} –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π.")
    return canonical_functions

def find_vital_files(function_inventory, canonical_functions, critical_files):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∂–∏–∑–Ω–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.
    """
    vital_files = set()

    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    for cf in critical_files:
        vital_files.add(str(Path(cf).resolve()))

    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    for item in function_inventory:
        func_name = item['FunctionName']
        file_path = item['FilePath']
        # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –ù–ï –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∞—è ‚Äî –∑–Ω–∞—á–∏—Ç, –æ–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞, –∏ –µ—ë —Ñ–∞–π–ª –∂–∏–∑–Ω–µ–Ω–Ω–æ –≤–∞–∂–µ–Ω
        if func_name not in canonical_functions:
            vital_files.add(file_path)

    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(vital_files)} –∂–∏–∑–Ω–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
    return vital_files

def detect_and_archive_dead_code(vital_files):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç "–º–µ—Ä—Ç–≤—ã–π –∫–æ–¥" ‚Äî —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∂–∏–∑–Ω–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã–º–∏.
    """
    archive_dir = Path(f"ARCHIVE_DEAD_CODE_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
    archive_dir.mkdir(exist_ok=True)
    print(f"üóÉÔ∏è  –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –º–µ—Ä—Ç–≤–æ–≥–æ –∫–æ–¥–∞: {archive_dir}")

    ignored_dirs = {
        'venv', '.venv', '.git', '.vscode', '.idea', '__pycache__',
        '.pytest_cache', 'node_modules', 'build', 'dist',
        'ARCHIVE', 'CANONICAL_FUNCTIONS', 'BUILD_REPORT', 'web', 'data', 'logs'
    }

    dead_files = []
    for file_path in Path(r"C:\Bldr").rglob("*.py"):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏
        if any(ignored in str(file_path).lower() for ignored in ignored_dirs):
            continue

        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã –∏ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if "ARCHIVE" in str(file_path) or "CANONICAL_FUNCTIONS" in str(file_path):
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∂–∏–∑–Ω–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã–º
        if str(file_path.resolve()) not in vital_files:
            dead_files.append(file_path)

    print(f"üíÄ –ù–∞–π–¥–µ–Ω–æ {len(dead_files)} —Ñ–∞–π–ª–æ–≤ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º '–º–µ—Ä—Ç–≤—ã–º –∫–æ–¥–æ–º'.")

    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –º–µ—Ä—Ç–≤—ã–π –∫–æ–¥ –≤ –∞—Ä—Ö–∏–≤
    for file_path in dead_files:
        try:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –≤ –∞—Ä—Ö–∏–≤–µ
            relative_path = file_path.relative_to(Path(r"C:\Bldr"))
            archive_file_path = archive_dir / relative_path
            archive_file_path.parent.mkdir(parents=True, exist_ok=True)
            shutil.move(file_path, archive_file_path)
            print(f"   üóÉÔ∏è  –ü–µ—Ä–µ–º–µ—â–µ–Ω: {relative_path}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ {file_path}: {e}")

    print(f"\n‚úÖ –ê—Ä—Ö–∏–≤–∞—Ü–∏—è –º–µ—Ä—Ç–≤–æ–≥–æ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ {len(dead_files)} —Ñ–∞–π–ª–æ–≤.")

def main():
    print("–ó–ê–ü–£–°–ö –î–ï–¢–ï–ö–¢–û–†–ê '–ú–ï–†–¢–í–û–ì–û –ö–û–î–ê'")
    print("=" * 60)
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞–π–¥–µ—Ç –∏ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç –≤ –∞—Ä—Ö–∏–≤ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ, –≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —Å–∏—Å—Ç–µ–º—ã.")
    print("–ñ–∏–∑–Ω–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã (—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã) –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    print()

    confirmation = input("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–í–≤–µ–¥–∏—Ç–µ '–î–ê'): ").strip()
    if confirmation != '–î–ê':
        print("‚ùå –ü—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω–µ–Ω.")
        return

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è
    critical_files = [
        "main.py",
        "bldr_gui.py",
        "bldr_system_launcher.py",
        "core/main.py",      # –µ—Å–ª–∏ –µ—Å—Ç—å
        "core/coordinator.py", # –µ—Å–ª–∏ –µ—Å—Ç—å
        "core/tools_system.py" # –µ—Å–ª–∏ –µ—Å—Ç—å
    ]

    # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Ñ—É–Ω–∫—Ü–∏–π
    function_inventory = load_function_inventory_from_report()

    # –®–∞–≥ 2: –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    canonical_functions = find_canonical_functions()

    # –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∂–∏–∑–Ω–µ–Ω–Ω–æ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
    vital_files = find_vital_files(function_inventory, canonical_functions, critical_files)

    # –®–∞–≥ 4: –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –º–µ—Ä—Ç–≤—ã–π –∫–æ–¥
    detect_and_archive_dead_code(vital_files)

    print("\n" + "=" * 60)
    print("‚úÖ –û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("–¢–µ–ø–µ—Ä—å –≤ C:\\Bldr –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ:")
    print(" - –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã (main.py, bldr_gui.py, ...)")
    print(" - –§–∞–π–ª—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏")
    print(" - –°–ª—É–∂–µ–±–Ω—ã–µ –ø–∞–ø–∫–∏ (venv, data, integrations, .vscode)")
    print(" - –ü–∞–ø–∫–∏ CANONICAL_FUNCTIONS –∏ BUILD_REPORT")
    print()
    print("–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤ ARCHIVE_DEAD_CODE_...")
    print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å bldr_gui.py –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É!")

if __name__ == "__main__":
    main()