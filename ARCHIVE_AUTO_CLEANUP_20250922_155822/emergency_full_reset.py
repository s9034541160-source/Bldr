#!/usr/bin/env python3
"""
Emergency Full Reset
–≠–ö–°–¢–†–ï–ù–ù–´–ô –ü–û–õ–ù–´–ô –°–ë–†–û–° –í–°–ï–• –ë–ê–ó –î–ê–ù–ù–´–•
"""

import os
import sys
import shutil
import psutil
import time
import subprocess
from pathlib import Path

def kill_all_training_processes():
    """–£–ë–ò–í–ê–ï–ú –í–°–ï –ü–†–û–¶–ï–°–°–´ –û–ë–£–ß–ï–ù–ò–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û"""
    print("üíÄ –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–• –ü–†–û–¶–ï–°–°–û–í")
    print("=" * 40)
    
    killed = []
    
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            cmdline = ' '.join(proc.info['cmdline'] or [])
            
            # –ò—â–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±—É—á–µ–Ω–∏–µ–º
            if any(keyword in cmdline.lower() for keyword in [
                'rag_trainer', 'enterprise_rag', 'train', 'python'
            ]) and any(keyword in cmdline.lower() for keyword in [
                'enterprise', 'rag', 'trainer'
            ]):
                print(f"   üíÄ –£–ë–ò–í–ê–ï–ú: PID {proc.info['pid']} - {cmdline[:100]}")
                proc.kill()
                killed.append(proc.info['pid'])
                
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
    
    if killed:
        print(f"‚úÖ –£–±–∏—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(killed)}")
        time.sleep(5)
    else:
        print("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

def force_stop_neo4j():
    """–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê NEO4J"""
    print("\nüíÄ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê NEO4J")
    print("=" * 35)
    
    # –£–±–∏–≤–∞–µ–º –≤—Å–µ Java –ø—Ä–æ—Ü–µ—Å—Å—ã Neo4j
    os.system("taskkill /f /im java.exe 2>nul")
    os.system("taskkill /f /im \"Neo4j Desktop*.exe\" 2>nul")
    
    time.sleep(3)
    
    print("‚úÖ Neo4j –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

def nuclear_reset_neo4j():
    """–Ø–î–ï–†–ù–´–ô –°–ë–†–û–° NEO4J - –£–î–ê–õ–Ø–ï–ú –í–°–ï –î–ê–ù–ù–´–ï"""
    print("\n‚ò¢Ô∏è –Ø–î–ï–†–ù–´–ô –°–ë–†–û–° NEO4J")
    print("=" * 25)
    
    # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º Neo4j
    neo4j_paths = [
        Path.home() / ".Neo4jDesktop",
        Path("C:/Users") / os.getenv('USERNAME', '') / "AppData/Roaming/Neo4j Desktop",
        Path("C:/neo4j"),
        Path("./neo4j-data"),
        Path("./data/neo4j")
    ]
    
    deleted_paths = []
    
    for neo4j_path in neo4j_paths:
        if neo4j_path.exists():
            print(f"   üí£ –£–î–ê–õ–Ø–ï–ú: {neo4j_path}")
            try:
                if neo4j_path.is_dir():
                    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏, –Ω–µ —Å–∞–º Neo4j Desktop
                    for item in neo4j_path.rglob("*"):
                        if any(keyword in str(item).lower() for keyword in [
                            'data', 'databases', 'graph.db', 'neo4j.db'
                        ]):
                            if item.is_dir():
                                shutil.rmtree(item, ignore_errors=True)
                            else:
                                item.unlink(missing_ok=True)
                            deleted_paths.append(str(item))
                else:
                    neo4j_path.unlink()
                    deleted_paths.append(str(neo4j_path))
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {neo4j_path}: {e}")
    
    if deleted_paths:
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –ø—É—Ç–µ–π Neo4j: {len(deleted_paths)}")
    else:
        print("‚ö†Ô∏è –ü—É—Ç–∏ Neo4j –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def nuclear_reset_qdrant():
    """–Ø–î–ï–†–ù–´–ô –°–ë–†–û–° QDRANT"""
    print("\n‚ò¢Ô∏è –Ø–î–ï–†–ù–´–ô –°–ë–†–û–° QDRANT")
    print("=" * 25)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Qdrant –ø—Ä–æ—Ü–µ—Å—Å—ã
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            cmdline = ' '.join(proc.info['cmdline'] or [])
            if 'qdrant' in cmdline.lower():
                print(f"   üíÄ –£–±–∏–≤–∞–µ–º Qdrant: PID {proc.info['pid']}")
                proc.kill()
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
    
    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ Qdrant
    qdrant_paths = [
        "./qdrant_storage",
        "./storage",
        "./qdrant_data",
        "I:/docs/qdrant_storage",
        Path.home() / ".qdrant",
        "./data/qdrant"
    ]
    
    deleted_qdrant = 0
    for qdrant_path in qdrant_paths:
        path = Path(qdrant_path)
        if path.exists():
            print(f"   üí£ –£–î–ê–õ–Ø–ï–ú Qdrant: {path}")
            try:
                if path.is_dir():
                    shutil.rmtree(path)
                else:
                    path.unlink()
                deleted_qdrant += 1
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è Qdrant {path}: {e}")
    
    if deleted_qdrant > 0:
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ Qdrant —Ö—Ä–∞–Ω–∏–ª–∏—â: {deleted_qdrant}")
    else:
        print("‚úÖ Qdrant —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def nuclear_reset_all_caches():
    """–Ø–î–ï–†–ù–´–ô –°–ë–†–û–° –í–°–ï–• –ö–≠–®–ï–ô"""
    print("\n‚ò¢Ô∏è –Ø–î–ï–†–ù–´–ô –°–ë–†–û–° –í–°–ï–• –ö–≠–®–ï–ô")
    print("=" * 30)
    
    cache_paths = [
        "I:/docs/downloaded/cache",
        "I:/docs/cache", 
        "./cache",
        "./data",
        "./chroma_db",
        "./vector_db",
        "./embeddings",
        "./faiss_index",
        "./logs",
        "./training_logs",
        "./rag_logs",
        "./qdrant_storage",
        "./storage"
    ]
    
    total_deleted = 0
    
    for cache_path in cache_paths:
        path = Path(cache_path)
        if path.exists():
            print(f"   üí£ –£–î–ê–õ–Ø–ï–ú: {path}")
            try:
                if path.is_dir():
                    shutil.rmtree(path)
                    total_deleted += 1
                else:
                    path.unlink()
                    total_deleted += 1
            except Exception as e:
                print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {path}: {e}")
    
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∫—ç—à–µ–π: {total_deleted}")

def delete_processed_files_json():
    """–£–î–ê–õ–Ø–ï–ú processed_files.json"""
    print("\nüóëÔ∏è –£–î–ê–õ–ï–ù–ò–ï processed_files.json")
    print("=" * 30)
    
    json_files = [
        "I:/docs/downloaded/processed_files.json",
        "./processed_files.json",
        "./data/processed_files.json"
    ]
    
    deleted = 0
    for json_file in json_files:
        path = Path(json_file)
        if path.exists():
            print(f"   üóëÔ∏è –£–¥–∞–ª—è–µ–º: {path}")
            path.unlink()
            deleted += 1
    
    if deleted > 0:
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ JSON —Ñ–∞–π–ª–æ–≤: {deleted}")
    else:
        print("‚úÖ JSON —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def restart_neo4j():
    """–ü–ï–†–ï–ó–ê–ü–£–°–ö NEO4J"""
    print("\nüîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö NEO4J")
    print("=" * 20)
    
    neo4j_desktop_paths = [
        r"C:\Users\%USERNAME%\AppData\Local\Programs\Neo4j Desktop\Neo4j Desktop.exe",
        r"C:\Program Files\Neo4j Desktop\Neo4j Desktop.exe"
    ]
    
    for path in neo4j_desktop_paths:
        expanded_path = os.path.expandvars(path)
        if os.path.exists(expanded_path):
            print(f"   üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º: {expanded_path}")
            subprocess.Popen([expanded_path], shell=True)
            break
    
    print("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Neo4j (30 —Å–µ–∫—É–Ω–¥)...")
    time.sleep(30)
    print("‚úÖ Neo4j –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤")

def main():
    """–≠–ö–°–¢–†–ï–ù–ù–´–ô –ü–û–õ–ù–´–ô –°–ë–†–û–°"""
    print("‚ò¢Ô∏è –≠–ö–°–¢–†–ï–ù–ù–´–ô –ü–û–õ–ù–´–ô –°–ë–†–û–° –í–°–ï–• –ë–ê–ó –î–ê–ù–ù–´–•")
    print("=" * 60)
    print("‚ö†Ô∏è –≠–¢–û –£–î–ê–õ–ò–¢ –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï –î–ê–ù–ù–´–ï!")
    print("‚ö†Ô∏è –í–ö–õ–Æ–ß–ê–Ø –í–°–ï –û–ë–£–ß–ï–ù–ù–´–ï –ú–û–î–ï–õ–ò –ò –ö–≠–®–ò!")
    print()
    
    print("üî• –ù–ê–ß–ò–ù–ê–ï–ú –Ø–î–ï–†–ù–´–ô –°–ë–†–û–°...")
    print("=" * 30)
    
    # 1. –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    kill_all_training_processes()
    
    # 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Neo4j
    force_stop_neo4j()
    
    # 3. –Ø–¥–µ—Ä–Ω—ã–π —Å–±—Ä–æ—Å Neo4j
    nuclear_reset_neo4j()
    
    # 4. –Ø–¥–µ—Ä–Ω—ã–π —Å–±—Ä–æ—Å Qdrant
    nuclear_reset_qdrant()
    
    # 5. –Ø–¥–µ—Ä–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –∫—ç—à–µ–π
    nuclear_reset_all_caches()
    
    # 6. –£–¥–∞–ª—è–µ–º processed_files.json
    delete_processed_files_json()
    
    # 7. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Neo4j
    restart_neo4j()
    
    print("\n‚ò¢Ô∏è –Ø–î–ï–†–ù–´–ô –°–ë–†–û–° –ó–ê–í–ï–†–®–ï–ù!")
    print("=" * 30)
    print("‚úÖ –í–°–ï –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã")
    print("‚úÖ Neo4j –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")
    print("‚úÖ Qdrant –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω")
    print("‚úÖ –í–°–ï –∫—ç—à–∏ —É–¥–∞–ª–µ–Ω—ã") 
    print("‚úÖ –í–°–ï –ª–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    print("‚úÖ Neo4j –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å —á–∏—Å—Ç–æ–π –±–∞–∑–æ–π")
    print()
    print("üöÄ –¢–ï–ü–ï–†–¨ –ú–û–ñ–ù–û –ó–ê–ü–£–°–ö–ê–¢–¨ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–ù–û–í–û:")
    print("   python enterprise_rag_trainer_safe.py")
    print()
    print("üíÄ –û–±—É—á–µ–Ω–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è —Å —Ñ–∞–π–ª–∞ ‚Ññ1, –∞ –Ω–µ —Å ‚Ññ231!")

if __name__ == "__main__":
    main()