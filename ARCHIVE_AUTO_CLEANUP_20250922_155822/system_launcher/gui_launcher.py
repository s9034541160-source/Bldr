#!/usr/bin/env python3
"""
GUI System Launcher
–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã Bldr Empire v2
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import time
import json
from datetime import datetime
from typing import Dict, Any, Optional
import webbrowser
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ component_manager
sys.path.append(str(Path(__file__).parent))
from component_manager import SystemComponentManager, ComponentStatus, HealthStatus

class BldrSystemLauncherGUI:
    """–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã Bldr Empire"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Bldr Empire v2 - System Launcher")
        self.root.geometry("1200x800")  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.root.configure(bg='#2c3e50')
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.component_manager = SystemComponentManager()
        self.component_manager.add_status_callback(self._on_component_status_change)
        
        # GUI —ç–ª–µ–º–µ–Ω—Ç—ã
        self.component_frames = {}
        self.status_labels = {}
        self.control_buttons = {}
        self.log_text = None
        self.status_bar_label = None
        self.time_label = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.auto_refresh = True
        self.refresh_interval = 2  # —Å–µ–∫—É–Ω–¥—ã
        self.gui_update_thread = None
        self.is_running = True
        
        self.setup_ui()
        self.start_monitoring()
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self._create_header()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.root, bg='#2c3e50')
        main_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        left_frame = tk.Frame(main_frame, bg='#34495e', relief='raised', bd=2)
        left_frame.pack(side='left', fill='both', expand=True, padx=(0, 10))
        
        self._create_components_panel(left_frame)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ª–æ–≥–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        right_frame = tk.Frame(main_frame, bg='#34495e', relief='raised', bd=2)
        right_frame.pack(side='right', fill='both', expand=True)
        
        self._create_monitoring_panel(right_frame)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self._create_status_bar()
        
    def _create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        title_frame = tk.Frame(self.root, bg='#2c3e50')
        title_frame.pack(fill='x', padx=20, pady=10)
        
        title_label = tk.Label(
            title_frame, 
            text="üèóÔ∏è Bldr Empire v2 - System Control Center",
            font=('Arial', 20, 'bold'),
            fg='#ecf0f1',
            bg='#2c3e50'
        )
        title_label.pack()
        
        subtitle_label = tk.Label(
            title_frame,
            text="Unified Construction Intelligence Platform",
            font=('Arial', 12),
            fg='#bdc3c7',
            bg='#2c3e50'
        )
        subtitle_label.pack()
        
    def _create_components_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        components_label = tk.Label(
            parent,
            text="üîß System Components",
            font=('Arial', 14, 'bold'),
            fg='#ecf0f1',
            bg='#34495e'
        )
        components_label.pack(pady=10)
        
        # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        global_control_frame = tk.Frame(parent, bg='#34495e')
        global_control_frame.pack(fill='x', padx=10, pady=10)
        
        start_all_btn = tk.Button(
            global_control_frame,
            text="üöÄ Start All Systems",
            font=('Arial', 12, 'bold'),
            bg='#27ae60',
            fg='white',
            command=self._start_all_systems,
            relief='flat',
            padx=20,
            pady=10
        )
        start_all_btn.pack(fill='x', pady=5)
        
        stop_all_btn = tk.Button(
            global_control_frame,
            text="üõë Stop All Systems",
            font=('Arial', 12, 'bold'),
            bg='#e74c3c',
            fg='white',
            command=self._stop_all_systems,
            relief='flat',
            padx=20,
            pady=10
        )
        stop_all_btn.pack(fill='x', pady=5)
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separator = tk.Frame(parent, height=2, bg='#2c3e50')
        separator.pack(fill='x', padx=10, pady=10)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        components_container = tk.Frame(parent, bg='#34495e')
        components_container.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–µ–º Canvas –∏ Scrollbar
        canvas = tk.Canvas(components_container, bg='#34495e', highlightthickness=0)
        scrollbar = tk.Scrollbar(components_container, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg='#34495e')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(
                scrollregion=canvas.bbox("all")
            )
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # –£–ø–∞–∫–æ–≤–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ scrollable_frame
        for component_id, component in self.component_manager.get_all_components().items():
            self._create_component_panel(scrollable_frame, component_id, component)
            
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É –∫–æ–ª–µ—Å–æ–º –º—ã—à–∏
        def _on_mousewheel(event):
            canvas.yview_scroll(int(-1*(event.delta/120)), "units")
            
        canvas.bind_all("<MouseWheel>", _on_mousewheel)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        def _on_leave(event):
            canvas.unbind_all("<MouseWheel>")
            
        canvas.bind("<Leave>", _on_leave)
        canvas.bind("<Enter>", lambda e: canvas.bind_all("<MouseWheel>", _on_mousewheel))
        
    def _create_component_panel(self, parent, component_id: str, component):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        
        frame = tk.Frame(parent, bg='#2c3e50', relief='raised', bd=1)
        frame.pack(fill='x', pady=3)  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        
        self.component_frames[component_id] = frame
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å
        header_frame = tk.Frame(frame, bg='#2c3e50')
        header_frame.pack(fill='x', padx=5, pady=3)  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        
        # –ò–∫–æ–Ω–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        icon = self._get_component_icon(component.type)
        
        title_label = tk.Label(
            header_frame,
            text=f"{icon} {component.name}",
            font=('Arial', 10, 'bold'),  # –£–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç
            fg='#ecf0f1',
            bg='#2c3e50'
        )
        title_label.pack(side='left')
        
        # –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        status_label = tk.Label(
            header_frame,
            text="‚óè",
            font=('Arial', 12),  # –£–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç
            fg=self._get_status_color(component.status),
            bg='#2c3e50'
        )
        status_label.pack(side='right')
        
        self.status_labels[component_id] = status_label
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
        info_frame = tk.Frame(frame, bg='#2c3e50')
        info_frame.pack(fill='x', padx=5, pady=2)  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        
        info_text = f"Type: {component.type}"
        if component.port:
            info_text += f" | Port: {component.port}"
        if component.dependencies:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–ø–∏—Å–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            deps = ', '.join(component.dependencies)
            if len(deps) > 30:
                deps = deps[:27] + "..."
            info_text += f" | Deps: {deps}"
            
        info_label = tk.Label(
            info_frame,
            text=info_text,
            font=('Arial', 8),  # –£–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç
            fg='#bdc3c7',
            bg='#2c3e50'
        )
        info_label.pack(side='left')
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(frame, bg='#2c3e50')
        buttons_frame.pack(fill='x', padx=5, pady=3)  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        
        start_btn = tk.Button(
            buttons_frame,
            text="‚ñ∂Ô∏è Start",
            font=('Arial', 8),  # –£–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç
            bg='#27ae60',
            fg='white',
            command=lambda: self._start_component(component_id),
            relief='flat',
            padx=8  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        )
        start_btn.pack(side='left', padx=(0, 3))
        
        stop_btn = tk.Button(
            buttons_frame,
            text="‚èπÔ∏è Stop",
            font=('Arial', 8),  # –£–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç
            bg='#e74c3c',
            fg='white',
            command=lambda: self._stop_component(component_id),
            relief='flat',
            padx=8  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        )
        stop_btn.pack(side='left', padx=3)
        
        restart_btn = tk.Button(
            buttons_frame,
            text="üîÑ Restart",
            font=('Arial', 8),  # –£–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç
            bg='#f39c12',
            fg='white',
            command=lambda: self._restart_component(component_id),
            relief='flat',
            padx=8  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
        )
        restart_btn.pack(side='left', padx=3)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ (–¥–ª—è –≤–µ–±-—Å–µ—Ä–≤–∏—Å–æ–≤)
        if component.port and component.port in [7474, 8000, 3005, 6333]:
            open_btn = tk.Button(
                buttons_frame,
                text="üåê Open",
                font=('Arial', 8),  # –£–º–µ–Ω—å—à–∞–µ–º —à—Ä–∏—Ñ—Ç
                bg='#3498db',
                fg='white',
                command=lambda: self._open_in_browser(component.port),
                relief='flat',
                padx=8  # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã
            )
            open_btn.pack(side='right')
            
        self.control_buttons[component_id] = {
            'start': start_btn,
            'stop': stop_btn,
            'restart': restart_btn
        }
        
    def _create_monitoring_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logs_label = tk.Label(
            parent,
            text="üìä System Logs & Monitoring",
            font=('Arial', 14, 'bold'),
            fg='#ecf0f1',
            bg='#34495e'
        )
        logs_label.pack(pady=10)
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        controls_frame = tk.Frame(parent, bg='#34495e')
        controls_frame.pack(fill='x', padx=10, pady=5)
        
        # Auto-refresh toggle
        auto_refresh_var = tk.BooleanVar(value=self.auto_refresh)
        auto_refresh_cb = tk.Checkbutton(
            controls_frame,
            text="Auto Refresh",
            variable=auto_refresh_var,
            command=lambda: setattr(self, 'auto_refresh', auto_refresh_var.get()),
            fg='#ecf0f1',
            bg='#34495e',
            selectcolor='#2c3e50'
        )
        auto_refresh_cb.pack(side='left', padx=5)
        
        # Refresh button
        refresh_btn = tk.Button(
            controls_frame,
            text="üîÑ Refresh",
            font=('Arial', 9),
            bg='#3498db',
            fg='white',
            command=self._manual_refresh,
            relief='flat'
        )
        refresh_btn.pack(side='left', padx=5)
        
        # Export button
        export_btn = tk.Button(
            controls_frame,
            text="üìÑ Export Report",
            font=('Arial', 9),
            bg='#9b59b6',
            fg='white',
            command=self._export_report,
            relief='flat'
        )
        export_btn.pack(side='right', padx=5)
        
        # Clear logs button
        clear_btn = tk.Button(
            controls_frame,
            text="üóëÔ∏è Clear",
            font=('Arial', 9),
            bg='#95a5a6',
            fg='white',
            command=self._clear_logs,
            relief='flat'
        )
        clear_btn.pack(side='right', padx=5)
        
        # –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
        self.log_text = scrolledtext.ScrolledText(
            parent,
            height=25,
            bg='#2c3e50',
            fg='#ecf0f1',
            font=('Consolas', 10),
            insertbackground='#ecf0f1'
        )
        self.log_text.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self._log_message("System Launcher initialized", "INFO")
        
    def _create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        status_frame = tk.Frame(self.root, bg='#34495e', relief='sunken', bd=1)
        status_frame.pack(fill='x', side='bottom')
        
        self.status_bar_label = tk.Label(
            status_frame,
            text="System ready - Click 'Start All Systems' to begin",
            font=('Arial', 10),
            fg='#ecf0f1',
            bg='#34495e'
        )
        self.status_bar_label.pack(side='left', padx=10, pady=5)
        
        self.time_label = tk.Label(
            status_frame,
            text="",
            font=('Arial', 10),
            fg='#bdc3c7',
            bg='#34495e'
        )
        self.time_label.pack(side='right', padx=10, pady=5)
        
    def _get_component_icon(self, component_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        icons = {
            'database': 'üóÑÔ∏è',
            'service': '‚öôÔ∏è',
            'application': 'üåê'
        }
        return icons.get(component_type, 'üì¶')
        
    def _get_status_color(self, status: ComponentStatus) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        colors = {
            ComponentStatus.STOPPED: '#e74c3c',
            ComponentStatus.STARTING: '#f39c12',
            ComponentStatus.RUNNING: '#27ae60',
            ComponentStatus.ERROR: '#8e44ad',
            ComponentStatus.STOPPING: '#f39c12'
        }
        return colors.get(status, '#95a5a6')
        
    def _log_message(self, message: str, level: str = "INFO"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        
        colors = {
            'INFO': '#ecf0f1',
            'SUCCESS': '#27ae60', 
            'WARNING': '#f39c12',
            'ERROR': '#e74c3c'
        }
        
        if self.log_text:
            self.log_text.insert('end', f"[{timestamp}] {level}: {message}\n")
            self.log_text.see('end')
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ä
        if self.status_bar_label:
            self.status_bar_label.config(text=message)
            
    def _update_time_label(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–µ"""
        if self.time_label:
            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            self.time_label.config(text=current_time)
            
    def _on_component_status_change(self, component_id: str, old_status: ComponentStatus, new_status: ComponentStatus):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        self._log_message(f"Component {component_id}: {old_status.value} -> {new_status.value}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º GUI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.root.after(0, lambda: self._update_component_display(component_id))
        
    def _update_component_display(self, component_id: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        if component_id in self.status_labels:
            component = self.component_manager.get_component_status(component_id)
            if component:
                color = self._get_status_color(component.status)
                self.status_labels[component_id].config(fg=color)
                
    def _start_component(self, component_id: str):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        self._log_message(f"Starting component: {component_id}")
        
        def start_thread():
            success = self.component_manager.start_component(component_id)
            if success:
                self._log_message(f"Component {component_id} started successfully", "SUCCESS")
            else:
                component = self.component_manager.get_component_status(component_id)
                error_msg = component.last_error if component else "Unknown error"
                self._log_message(f"Failed to start {component_id}: {error_msg}", "ERROR")
                
        threading.Thread(target=start_thread, daemon=True).start()
        
    def _stop_component(self, component_id: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        self._log_message(f"Stopping component: {component_id}")
        
        def stop_thread():
            success = self.component_manager.stop_component(component_id)
            if success:
                self._log_message(f"Component {component_id} stopped successfully", "SUCCESS")
            else:
                self._log_message(f"Failed to stop {component_id}", "ERROR")
                
        threading.Thread(target=stop_thread, daemon=True).start()
        
    def _restart_component(self, component_id: str):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        self._log_message(f"Restarting component: {component_id}")
        
        def restart_thread():
            success = self.component_manager.restart_component(component_id)
            if success:
                self._log_message(f"Component {component_id} restarted successfully", "SUCCESS")
            else:
                self._log_message(f"Failed to restart {component_id}", "ERROR")
                
        threading.Thread(target=restart_thread, daemon=True).start()
        
    def _start_all_systems(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        result = messagebox.askyesno(
            "Start All Systems",
            "This will start all Bldr Empire components in the correct order.\n\nContinue?"
        )
        
        if result:
            self._log_message("Starting all systems...", "INFO")
            
            def start_all_thread():
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                components_to_start = ['redis', 'celery_worker', 'celery_beat', 'backend', 'frontend']
                
                for component_id in components_to_start:
                    if component_id in self.component_manager.components:
                        self._log_message(f"Starting {component_id}...", "INFO")
                        success = self.component_manager.start_component(component_id)
                        if success:
                            self._log_message(f"{component_id} started successfully", "SUCCESS")
                        else:
                            component = self.component_manager.get_component_status(component_id)
                            error_msg = component.last_error if component else "Unknown error"
                            self._log_message(f"Failed to start {component_id}: {error_msg}", "ERROR")
                            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
                        time.sleep(3)  # –ñ–¥–µ–º –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
                
                self._log_message("All systems started successfully!", "SUCCESS")
                    
            threading.Thread(target=start_all_thread, daemon=True).start()
            
    def _stop_all_systems(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
        result = messagebox.askyesno(
            "Stop All Systems",
            "This will stop all running Bldr Empire components.\n\nContinue?"
        )
        
        if result:
            self._log_message("Stopping all systems...", "INFO")
            
            def stop_all_thread():
                success = self.component_manager.stop_all_components()
                self._log_message("All systems stopped", "SUCCESS")
                
            threading.Thread(target=stop_all_thread, daemon=True).start()
            
    def _open_in_browser(self, port: int):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        url = f"http://localhost:{port}"
        try:
            webbrowser.open(url)
            self._log_message(f"Opened {url} in browser")
        except Exception as e:
            self._log_message(f"Failed to open browser: {e}", "ERROR")
            
    def _manual_refresh(self):
        """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self._log_message("Refreshing component status...")
        
        for component_id in self.component_manager.get_all_components():
            self._update_component_display(component_id)
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        system_status = self.component_manager.get_system_status()
        self._log_message(f"System status: {system_status['overall_status']} "
                         f"({system_status['running_components']}/{system_status['total_components']} running)")
        
    def _clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        if self.log_text:
            self.log_text.delete(1.0, 'end')
            self._log_message("Logs cleared")
            
    def _export_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            report = self.component_manager.export_status_report()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"bldr_system_report_{timestamp}.json"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(report)
                
            self._log_message(f"System report exported to {filename}", "SUCCESS")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            messagebox.showinfo(
                "Report Exported",
                f"System status report has been exported to:\n{filename}"
            )
            
        except Exception as e:
            self._log_message(f"Failed to export report: {e}", "ERROR")
            messagebox.showerror("Export Error", f"Failed to export report:\n{e}")
            
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.component_manager.start_monitoring()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI
        self.gui_update_thread = threading.Thread(target=self._gui_update_loop, daemon=True)
        self.gui_update_thread.start()
        
    def _gui_update_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GUI"""
        while self.is_running:
            try:
                if self.auto_refresh:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                    self.root.after(0, self._update_time_label)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                    for component_id in self.component_manager.get_all_components():
                        self.root.after(0, lambda cid=component_id: self._update_component_display(cid))
                        
                time.sleep(self.refresh_interval)
                
            except Exception as e:
                print(f"Error in GUI update loop: {e}")
                time.sleep(5)
                
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
            self.root.protocol("WM_DELETE_WINDOW", self._on_closing)
            
            # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            self.root.mainloop()
            
        except KeyboardInterrupt:
            self._on_closing()
            
    def _on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        result = messagebox.askyesno(
            "Exit System Launcher",
            "Do you want to stop all running components before exit?"
        )
        
        if result:
            self._log_message("Stopping all components before exit...")
            self.component_manager.stop_all_components()
            
        self.is_running = False
        self.component_manager.stop_monitoring()
        
        self.root.quit()
        self.root.destroy()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        import requests
        import psutil
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º GUI
        launcher = BldrSystemLauncherGUI()
        launcher.run()
        
    except ImportError as e:
        print(f"Missing dependency: {e}")
        print("Please install required packages:")
        print("pip install requests psutil")
        sys.exit(1)
        
    except Exception as e:
        print(f"Error starting System Launcher: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()