"""
–°–£–ü–ï–†-–£–ú–ù–´–ô –ö–û–û–†–î–ò–ù–ê–¢–û–† v2.0
============================
–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π:
1. –ü–û–ù–ò–ú–ê–ï–¢ –∫–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –ü–õ–ê–ù–ò–†–£–ï–¢ —Ü–µ–ø–æ—á–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
3. –í–´–ü–û–õ–ù–Ø–ï–¢ –∑–∞–¥–∞—á–∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ
4. –ü–†–ï–î–õ–ê–ì–ê–ï–¢ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
5. –ó–ê–ü–û–ú–ò–ù–ê–ï–¢ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
"""

import json
import logging
from typing import Dict, List, Any, Optional, Tuple
from datetime import datetime
from dataclasses import dataclass, field

from .smart_request_processor import SmartRequestProcessor, RequestContext, create_smart_processor

logger = logging.getLogger(__name__)

@dataclass
class ActionPlan:
    """–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞"""
    steps: List[Dict[str, Any]]
    priority: str
    estimated_time: str
    dependencies: List[str]
    expected_outputs: List[str]

@dataclass
class ConversationMemory:
    """–ü–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    user_id: str = "default"
    conversation_history: List[Dict] = field(default_factory=list)
    context_summary: str = ""
    last_domain: str = "general"
    ongoing_tasks: List[Dict] = field(default_factory=list)
    user_preferences: Dict[str, Any] = field(default_factory=dict)

class SuperSmartCoordinator:
    """
    –°–£–ü–ï–†-–£–ú–ù–´–ô –ö–û–û–†–î–ò–ù–ê–¢–û–†
    –ì–ª–∞–≤–Ω–∞—è —Ñ–∏—à–∫–∞ - –ø–æ–Ω–∏–º–∞–µ—Ç –õ–Æ–ë–û–ô –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å –∏ –¥–µ–ª–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ –ü–û–õ–ù–û–¶–ï–ù–ù–£–Æ –∑–∞–¥–∞—á—É
    """
    
    def __init__(self, model_manager=None, tools_system=None, rag_system=None):
        self.model_manager = model_manager
        self.tools_system = tools_system
        self.rag_system = rag_system
        
        # –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤
        self.request_processor = create_smart_processor(rag_system=rag_system)
        
        # –ü–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        self.conversations: Dict[str, ConversationMemory] = {}
        
        # –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
        self.action_templates = {
            'create_document': {
                'checklist': [
                    {"action": "analyze_requirements", "tool": "search_rag_database", "description": "–ù–∞–π—Ç–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É"},
                    {"action": "gather_data", "tool": None, "description": "–°–æ–±—Ä–∞—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"},
                    {"action": "create_structure", "tool": None, "description": "–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞"},
                    {"action": "fill_content", "tool": "gen_docx", "description": "–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ"},
                    {"action": "review_compliance", "tool": "search_rag_database", "description": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ—Ä–º–∞–º"}
                ],
                'estimates': [
                    {"action": "identify_work_items", "tool": "search_rag_database", "description": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∏–¥—ã —Ä–∞–±–æ—Ç"},
                    {"action": "calculate_quantities", "tool": "calc_estimate", "description": "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—ä–µ–º—ã"},
                    {"action": "apply_rates", "tool": "calc_estimate", "description": "–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Ü–µ–Ω–∫–∏ –ì–≠–°–ù/–§–ï–†"},
                    {"action": "generate_report", "tool": "gen_excel", "description": "–°–æ–∑–¥–∞—Ç—å —Å–º–µ—Ç—É –≤ Excel"}
                ],
                'safety_plan': [
                    {"action": "identify_hazards", "tool": "search_rag_database", "description": "–í—ã—è–≤–∏—Ç—å –æ–ø–∞—Å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã"},
                    {"action": "define_measures", "tool": "search_rag_database", "description": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ä—ã"},
                    {"action": "create_instructions", "tool": "gen_docx", "description": "–°–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"}
                ]
            },
            'analyze_document': [
                {"action": "extract_content", "tool": None, "description": "–ò–∑–≤–ª–µ—á—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞"},
                {"action": "identify_requirements", "tool": "search_rag_database", "description": "–ù–∞–π—Ç–∏ –ø—Ä–∏–º–µ–Ω–∏–º—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"},
                {"action": "compare_compliance", "tool": None, "description": "–°—Ä–∞–≤–Ω–∏—Ç—å —Å –Ω–æ—Ä–º–∞–º–∏"},
                {"action": "generate_report", "tool": "gen_docx", "description": "–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≤–µ—Ä–∫–µ"}
            ],
            'calculate': [
                {"action": "identify_parameters", "tool": None, "description": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"},
                {"action": "find_formulas", "tool": "search_rag_database", "description": "–ù–∞–π—Ç–∏ —Ä–∞—Å—á–µ—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã"},
                {"action": "perform_calculation", "tool": "calc_estimate", "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞—Å—á–µ—Ç"},
                {"action": "verify_results", "tool": None, "description": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"}
            ]
        }
        
    def process_request(self, query: str, user_id: str = "default", context: Dict = None) -> Dict[str, Any]:
        """
        –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        """
        try:
            logger.info(f"üß† SuperSmartCoordinator –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç: {query}")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if user_id not in self.conversations:
                self.conversations[user_id] = ConversationMemory(user_id=user_id)
            
            memory = self.conversations[user_id]
            
            # 2. –£–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            request_context = self.request_processor.process_request(query, context)
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            self._update_conversation_memory(memory, query, request_context)
            
            # 4. –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
            action_plan = self._create_intelligent_action_plan(request_context, memory)
            
            # 5. –í—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π
            execution_results = self._execute_action_plan(action_plan, request_context)
            
            # 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            proactive_suggestions = self._generate_contextual_suggestions(
                request_context, memory, execution_results
            )
            
            # 7. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            final_response = self._synthesize_response(
                request_context, execution_results, proactive_suggestions
            )
            
            # 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ø–∞–º—è—Ç—å
            self._save_to_memory(memory, final_response)
            
            return final_response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ SuperSmartCoordinator: {e}")
            return self._create_error_response(query, str(e))
    
    def _update_conversation_memory(self, memory: ConversationMemory, query: str, context: RequestContext):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        memory.conversation_history.append({
            'timestamp': datetime.now().isoformat(),
            'query': query,
            'intent': context.intent,
            'domain': context.construction_domain,
            'confidence': context.confidence
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        memory.last_domain = context.construction_domain
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π)
        recent_queries = [item['query'] for item in memory.conversation_history[-5:]]
        memory.context_summary = f"–ù–µ–¥–∞–≤–Ω–∏–µ —Ç–µ–º—ã: {'; '.join(recent_queries)}"
    
    def _create_intelligent_action_plan(self, context: RequestContext, memory: ConversationMemory) -> ActionPlan:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞/–∑–∞–¥–∞—á–∏ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            doc_types = context.entities.get('document_types', [])
            intent = context.intent
            domain = context.construction_domain
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —à–∞–±–ª–æ–Ω
            if intent == 'create_document':
                if 'checklist' in doc_types or '—á–µ–∫-–ª–∏—Å—Ç' in context.original_query.lower():
                    template_steps = self.action_templates['create_document']['checklist']
                elif 'estimates' in doc_types or any(word in context.original_query.lower() 
                                                   for word in ['—Å–º–µ—Ç–∞', '—Ä–∞—Å—á–µ—Ç', '—Å—Ç–æ–∏–º–æ—Å—Ç—å']):
                    template_steps = self.action_templates['create_document']['estimates']
                elif domain == 'safety' or any(word in context.original_query.lower() 
                                              for word in ['–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–æ—Ö—Ä–∞–Ω–∞ —Ç—Ä—É–¥–∞']):
                    template_steps = self.action_templates['create_document']['safety_plan']
                else:
                    template_steps = self.action_templates['create_document']['checklist']
            
            elif intent in self.action_templates:
                template_steps = self.action_templates[intent]
            else:
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –Ω–∞–º–µ—Ä–µ–Ω–∏–π
                template_steps = [
                    {"action": "understand_request", "tool": "search_rag_database", "description": "–ü–æ–Ω—è—Ç—å —Å—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞"},
                    {"action": "find_solution", "tool": "search_rag_database", "description": "–ù–∞–π—Ç–∏ —Ä–µ—à–µ–Ω–∏–µ"},
                    {"action": "provide_answer", "tool": None, "description": "–î–∞—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"}
                ]
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            adapted_steps = self._adapt_steps_to_context(template_steps, context)
            
            return ActionPlan(
                steps=adapted_steps,
                priority=context.priority,
                estimated_time=self._estimate_execution_time(adapted_steps),
                dependencies=self._identify_dependencies(adapted_steps),
                expected_outputs=self._identify_expected_outputs(context)
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")
            # Fallback –ø–ª–∞–Ω
            return ActionPlan(
                steps=[{"action": "basic_response", "tool": None, "description": "–ë–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç"}],
                priority="medium",
                estimated_time="1-2 –º–∏–Ω—É—Ç—ã",
                dependencies=[],
                expected_outputs=["–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"]
            )
    
    def _adapt_steps_to_context(self, template_steps: List[Dict], context: RequestContext) -> List[Dict]:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —à–∞–≥–æ–≤ –ø–ª–∞–Ω–∞ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        adapted_steps = []
        
        for step in template_steps:
            adapted_step = step.copy()
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–¥ –¥–æ–º–µ–Ω
            if step.get('tool') == 'search_rag_database':
                adapted_step['search_params'] = {
                    'query': f"{context.original_query} {context.construction_domain}",
                    'doc_types': ['norms', 'technical'],
                    'domain': context.construction_domain
                }
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            elif step.get('tool') == 'gen_docx':
                doc_type = context.entities.get('document_types', ['general'])[0]
                adapted_step['doc_params'] = {
                    'template_type': doc_type,
                    'domain': context.construction_domain
                }
            
            adapted_steps.append(adapted_step)
        
        return adapted_steps
    
    def _execute_action_plan(self, plan: ActionPlan, context: RequestContext) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π"""
        results = {
            'completed_steps': [],
            'outputs': [],
            'errors': [],
            'generated_files': []
        }
        
        try:
            for i, step in enumerate(plan.steps):
                logger.info(f"üìã –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥ {i+1}/{len(plan.steps)}: {step['description']}")
                
                step_result = self._execute_single_step(step, context, results)
                
                results['completed_steps'].append({
                    'step_number': i + 1,
                    'description': step['description'],
                    'result': step_result,
                    'timestamp': datetime.now().isoformat()
                })
                
                if step_result.get('output'):
                    results['outputs'].append(step_result['output'])
                
                if step_result.get('file'):
                    results['generated_files'].append(step_result['file'])
                
                if step_result.get('error'):
                    results['errors'].append(step_result['error'])
            
            return results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞: {e}")
            results['errors'].append(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")
            return results
    
    def _execute_single_step(self, step: Dict, context: RequestContext, previous_results: Dict) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –ø–ª–∞–Ω–∞"""
        try:
            tool_name = step.get('tool')
            
            if tool_name == 'search_rag_database':
                return self._execute_rag_search(step, context)
            elif tool_name == 'gen_docx':
                return self._execute_document_generation(step, context, previous_results)
            elif tool_name == 'calc_estimate':
                return self._execute_calculation(step, context)
            else:
                # –õ–æ–≥–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ –±–µ–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
                return self._execute_logical_step(step, context, previous_results)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞ {step['description']}: {e}")
            return {'error': str(e), 'success': False}
    
    def _execute_rag_search(self, step: Dict, context: RequestContext) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ RAG"""
        try:
            if not self.rag_system:
                return {'error': 'RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', 'success': False}
            
            search_params = step.get('search_params', {})
            query = search_params.get('query', context.enriched_query)
            
            results = self.rag_system.search_documents(
                query=query,
                n_results=5,
                doc_types=search_params.get('doc_types', ['norms']),
                min_relevance=0.3
            )
            
            if results:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                top_results = results[:3]
                summary = self._summarize_search_results(top_results, context)
                
                return {
                    'success': True,
                    'output': summary,
                    'raw_results': top_results,
                    'results_count': len(results)
                }
            else:
                return {
                    'success': False,
                    'output': '–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
                    'results_count': 0
                }
                
        except Exception as e:
            return {'error': f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {str(e)}', 'success': False}
    
    def _execute_document_generation(self, step: Dict, context: RequestContext, previous_results: Dict) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
            content_parts = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            doc_title = self._generate_document_title(context)
            content_parts.append(f"# {doc_title}\n\n")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            for output in previous_results.get('outputs', []):
                if isinstance(output, str) and len(output) > 10:
                    content_parts.append(f"{output}\n\n")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            content_parts.append("## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n")
            for suggestion in context.suggested_actions[:3]:
                content_parts.append(f"- {suggestion}\n")
            
            content = "".join(content_parts)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            filename = self._generate_filename(context, step)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å tools_system, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if self.tools_system:
                try:
                    tool_result = self.tools_system.execute_tool("gen_docx", {
                        "content": content,
                        "filename": filename,
                        "format": "docx"
                    })
                    
                    if tool_result.get('success'):
                        return {
                            'success': True,
                            'output': f"–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {filename}",
                            'file': filename,
                            'content_preview': content[:300] + "..."
                        }
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ tools_system: {e}")
            
            # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            return {
                'success': True,
                'output': f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {filename}",
                'content': content,
                'filename': filename
            }
            
        except Exception as e:
            return {'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}', 'success': False}
    
    def _execute_calculation(self, step: Dict, context: RequestContext) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–æ–≤"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            calc_params = self._extract_calculation_params(context)
            
            if self.tools_system and calc_params:
                try:
                    tool_result = self.tools_system.execute_tool("calc_estimate", calc_params)
                    
                    if tool_result.get('success'):
                        return {
                            'success': True,
                            'output': f"–†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω: {tool_result.get('result', '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω')}",
                            'calculation_result': tool_result
                        }
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ tools_system: {e}")
            
            # Fallback - –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
            return {
                'success': False,
                'output': f"–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Ç–æ—á–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(calc_params.keys()) if calc_params else '–æ–±—ä–µ–º—ã, —Ä–∞—Å—Ü–µ–Ω–∫–∏, —Ä–µ–≥–∏–æ–Ω'}",
                'required_params': calc_params or {}
            }
            
        except Exception as e:
            return {'error': f'–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}', 'success': False}
    
    def _execute_logical_step(self, step: Dict, context: RequestContext, previous_results: Dict) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —à–∞–≥–∞ –ë–ï–ó –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –Ω–æ –° –†–ï–ê–õ–¨–ù–´–ú LLM"""
        action = step.get('action', '')
        
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ê–õ–¨–ù–£–Æ LLM –ú–û–î–ï–õ–¨ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —à–∞–≥–∞!
        try:
            if self.model_manager:
                # –§–æ—Ä–º–∏—Ä—É–µ–º prompt –¥–ª—è LLM –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —à–∞–≥–∞
                llm_prompt = self._create_llm_prompt_for_step(step, context, previous_results)
                
                # –í–´–ó–´–í–ê–ï–ú –†–ï–ê–õ–¨–ù–£–Æ LLM –ú–û–î–ï–õ–¨
                llm_response = self.model_manager.query("coordinator", [
                    {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤—É. –û—Ç–≤–µ—á–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞–Ω–∏—è —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ—Ä–º –∏ –ø—Ä–∞–∫—Ç–∏–∫."},
                    {"role": "user", "content": llm_prompt}
                ])
                
                logger.info(f"LLM response for step '{action}': {llm_response[:100]}...")
                
                return {
                    'success': True,
                    'output': llm_response,
                    'used_llm': True
                }
                
            else:
                logger.warning("Model manager not available for logical step")
                
        except Exception as e:
            logger.error(f"LLM execution failed for step {action}: {e}")
            # Fallback –∫ –ø—Ä–æ—Å—Ç—ã–º –æ—Ç–≤–µ—Ç–∞–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        # FALLBACK –ª–æ–≥–∏–∫–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ LLM
        if action == 'understand_request':
            return {
                'success': True,
                'output': f"–ó–∞–ø—Ä–æ—Å –ø–æ–Ω—è—Ç –∫–∞–∫: {context.intent} –≤ –æ–±–ª–∞—Å—Ç–∏ {context.construction_domain} —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {context.confidence:.2f}",
                'used_llm': False
            }
        elif action == 'identify_parameters':
            params = list(context.entities.keys())
            return {
                'success': True,
                'output': f"–í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(params) if params else '—Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Ç–æ—á–Ω–µ–Ω–∏–µ'}",
                'used_llm': False
            }
        elif action == 'basic_response':
            # –î–ª—è basic_response –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM
            try:
                if self.model_manager:
                    basic_prompt = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: '{context.original_query}'. –≠—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –æ–±–ª–∞—Å—Ç–∏ '{context.construction_domain}'. –î–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—è."
                    
                    llm_response = self.model_manager.query("coordinator", [
                        {"role": "system", "content": "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –∏–Ω–∂–µ–Ω–µ—Ä-—Å—Ç—Ä–æ–∏—Ç–µ–ª—å. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                        {"role": "user", "content": basic_prompt}
                    ])
                    
                    return {
                        'success': True,
                        'output': llm_response,
                        'used_llm': True
                    }
            except Exception as e:
                logger.error(f"LLM failed for basic response: {e}")
                
            return {
                'success': True,
                'output': f"–û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å: {context.original_query}. –û–±–ª–∞—Å—Ç—å: {context.construction_domain}.",
                'used_llm': False
            }
        else:
            return {
                'success': True,
                'output': f"–í—ã–ø–æ–ª–Ω–µ–Ω —à–∞–≥: {step['description']}",
                'used_llm': False
            }
    
    def _generate_contextual_suggestions(self, context: RequestContext, memory: ConversationMemory, results: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
        suggestions = []
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        suggestions.extend(context.suggested_actions[:2])
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if results.get('generated_files'):
            suggestions.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        
        if results.get('errors'):
            suggestions.append("–ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é")
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–º–µ–Ω–∞
        domain = context.construction_domain
        if domain == 'safety':
            suggestions.append("–°–æ–∑–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂ –¥–ª—è —Ä–∞–±–æ—á–∏—Ö –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ä–∞–±–æ—Ç")
        elif domain == 'estimates':
            suggestions.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω—è–µ–º—ã—Ö —Ä–∞—Å—Ü–µ–Ω–æ–∫")
        elif domain == 'earthworks':
            suggestions.append("–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ü–ü–† –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∑–µ–º–ª—è–Ω—ã—Ö —Ä–∞–±–æ—Ç")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        return suggestions[:4]
    
    def _synthesize_response(self, context: RequestContext, results: Dict, suggestions: List[str]) -> Dict[str, Any]:
        """–°–∏–Ω—Ç–µ–∑ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
        main_response = self._create_main_response(context, results)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        execution_summary = self._create_execution_summary(results)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        next_steps = suggestions if suggestions else ["–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"]
        
        return {
            'response': main_response,
            'execution_summary': execution_summary,
            'suggested_next_steps': next_steps,
            'generated_files': results.get('generated_files', []),
            'success': len(results.get('errors', [])) == 0,
            'context': {
                'domain': context.construction_domain,
                'intent': context.intent,
                'confidence': context.confidence
            },
            'timestamp': datetime.now().isoformat()
        }
    
    def _create_main_response(self, context: RequestContext, results: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        outputs = results.get('outputs', [])
        files = results.get('generated_files', [])
        
        response_parts = []
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
        response_parts.append(f"‚úÖ **{context.intent.replace('_', ' ').title()}** –≤ –æ–±–ª–∞—Å—Ç–∏ **{context.construction_domain}**\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if outputs:
            response_parts.append("üìã **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**\n")
            for output in outputs[:3]:  # –ù–µ –±–æ–ª–µ–µ 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if isinstance(output, str) and len(output) > 10:
                    response_parts.append(f"‚Ä¢ {output}\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
        if files:
            response_parts.append(f"\nüìÅ **–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤:** {len(files)}\n")
            for file in files:
                response_parts.append(f"‚Ä¢ {file}\n")
        
        return "".join(response_parts)
    
    def _create_execution_summary(self, results: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        completed = len(results.get('completed_steps', []))
        errors = len(results.get('errors', []))
        files = len(results.get('generated_files', []))
        
        summary_parts = []
        summary_parts.append(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ —à–∞–≥–æ–≤: {completed}")
        
        if files > 0:
            summary_parts.append(f"–°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {files}")
        
        if errors > 0:
            summary_parts.append(f"–û—à–∏–±–æ–∫: {errors}")
        
        return " | ".join(summary_parts)
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def _summarize_search_results(self, results: List[Dict], context: RequestContext) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
        if not results:
            return "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        summary_parts = []
        for result in results[:2]:
            content = result.get('content', '').strip()
            if content:
                summary_parts.append(content[:200] + "..." if len(content) > 200 else content)
        
        return "\n\n".join(summary_parts)
    
    def _generate_document_title(self, context: RequestContext) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        domain_titles = {
            'safety': '–ü–ª–∞–Ω –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞',
            'earthworks': '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –∑–µ–º–ª—è–Ω—ã—Ö —Ä–∞–±–æ—Ç',
            'foundations': '–ü—Ä–æ–µ–∫—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–æ–≤',
            'estimates': '–°–º–µ—Ç–∞ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã',
            'quality': '–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞'
        }
        
        domain = context.construction_domain
        if domain in domain_titles:
            return domain_titles[domain]
        
        return f"–î–æ–∫—É–º–µ–Ω—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É: {context.original_query}"
    
    def _generate_filename(self, context: RequestContext, step: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        domain = context.construction_domain
        timestamp = datetime.now().strftime("%Y%m%d_%H%M")
        
        base_name = f"{domain}_{timestamp}"
        return f"{base_name}.docx"
    
    def _extract_calculation_params(self, context: RequestContext) -> Dict[str, Any]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞"""
        params = {}
        
        query = context.original_query.lower()
        
        # –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        import re
        numbers = re.findall(r'\d+(?:[.,]\d+)?', query)
        if numbers:
            params['quantity'] = float(numbers[0].replace(',', '.'))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω
        regions = ['–º–æ—Å–∫–≤–∞', '—Å–ø–±', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫']
        for region in regions:
            if region in query:
                params['region'] = region.title()
                break
        else:
            params['region'] = '–ú–æ—Å–∫–≤–∞'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –ò—â–µ–º –∫–æ–¥—ã —Ä–∞—Å—Ü–µ–Ω–æ–∫
        gesn_codes = re.findall(r'–≥—ç—Å–Ω\s*[\d\-\.]+', query)
        if gesn_codes:
            params['rate_code'] = gesn_codes[0].upper()
        
        return params
    
    def _estimate_execution_time(self, steps: List[Dict]) -> str:
        """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        return f"{len(steps)*30} —Å–µ–∫ - {len(steps)} –º–∏–Ω"
    
    def _identify_dependencies(self, steps: List[Dict]) -> List[str]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É —à–∞–≥–∞–º–∏"""
        return ["–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"]
    
    def _identify_expected_outputs(self, context: RequestContext) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        outputs = []
        
        if context.intent == 'create_document':
            outputs.append("–°–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
        if context.intent == 'calculate':
            outputs.append("–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞")
        if 'search' in context.intent:
            outputs.append("–ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            
        return outputs or ["–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å"]
    
    def _save_to_memory(self, memory: ConversationMemory, response: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ø–∞–º—è—Ç—å"""
        memory.conversation_history.append({
            'timestamp': datetime.now().isoformat(),
            'type': 'response',
            'success': response.get('success', False),
            'files_created': len(response.get('generated_files', [])),
            'domain': response.get('context', {}).get('domain', 'unknown')
        })
    
    def _create_llm_prompt_for_step(self, step: Dict, context: RequestContext, previous_results: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è LLM –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–≥–∞ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        action = step.get('action', '')
        description = step.get('description', '')
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤
        previous_outputs = []
        for output in previous_results.get('outputs', []):
            if isinstance(output, str) and len(output) > 10:
                previous_outputs.append(output[:200])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        
        context_info = ""
        if previous_outputs:
            context_info = f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤:\n" + "\n".join(previous_outputs[-2:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2
        
        # –î–æ–±–∞–≤–ª—è–µ–º RAG –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        rag_info = ""
        if context.rag_context:
            rag_info = f"\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n" + "\n".join(context.rag_context[:2])
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        action_prompts = {
            'understand_request': f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: '{context.original_query}'. –û–ø—Ä–µ–¥–µ–ª–∏, –æ —á—ë–º –æ–Ω —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ (–æ–±–ª–∞—Å—Ç—å: {context.construction_domain}). –û–±—ä—è—Å–Ω–∏ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å.",
            
            'find_solution': f"–ó–∞–¥–∞—á–∞: {description}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: '{context.original_query}' (–æ–±–ª–∞—Å—Ç—å: {context.construction_domain}). –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —à–∞–≥–∞–º–∏.",
            
            'provide_answer': f"–ù–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ–π –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã, –¥–∞–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{context.original_query}'. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–º, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.",
            
            'gather_data': f"–ü–æ–º–æ–≥–∏ —Å–æ–±—Ä–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: '{context.original_query}'. –û–±–ª–∞—Å—Ç—å: {context.construction_domain}. –ü–µ—Ä–µ—á–∏—Å–ª–∏, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–æ—Ä–º—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω—É–∂–Ω—ã.",
            
            'create_structure': f"–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è: '{context.original_query}' (–æ–±–ª–∞—Å—Ç—å: {context.construction_domain}). –ü—Ä–µ–¥–ª–æ–∂–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω/—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏ –∏ –ø—É–Ω–∫—Ç–∞–º–∏.",
        }
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –æ–±—â–∏–π
        if action in action_prompts:
            prompt = action_prompts[action]
        else:
            prompt = f"–í—ã–ø–æ–ª–Ω–∏ –∑–∞–¥–∞—á—É: '{description}' –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{context.original_query}' (–æ–±–ª–∞—Å—Ç—å: {context.construction_domain}). –û—Ç–≤–µ—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        full_prompt = prompt + context_info + rag_info
        
        return full_prompt
    
    def _create_error_response(self, query: str, error: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ"""
        return {
            'response': f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {query}",
            'error': error,
            'success': False,
            'suggested_next_steps': [
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å",
                "–£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏",
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
            ],
            'timestamp': datetime.now().isoformat()
        }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
def create_super_smart_coordinator(model_manager=None, tools_system=None, rag_system=None):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–ø–µ—Ä-—É–º–Ω–æ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
    return SuperSmartCoordinator(
        model_manager=model_manager,
        tools_system=tools_system,
        rag_system=rag_system
    )