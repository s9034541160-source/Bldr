#!/usr/bin/env python3
"""
Telegram Bot for Bldr Empire v2
Adapted from old bot: Commands /start /help /query /train, API calls to bldr_api.py
"""
import os
import re
import json
import asyncio
import logging
import base64
from datetime import datetime
from typing import Dict, Any, List
import requests
from dotenv import load_dotenv

# Load environment variables first
load_dotenv()

# Global variable to store the application instance
application = None

# Try to import Telegram libraries with proper error handling
TELEGRAM_AVAILABLE = False
try:
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
    from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
    from telegram.constants import ChatAction
    TELEGRAM_AVAILABLE = True
except ImportError:
    print("Warning: Telegram libraries not available. Bot functionality will be limited.")
    TELEGRAM_AVAILABLE = False

# Define dummy constants and classes for when Telegram is not available
if not TELEGRAM_AVAILABLE:
    class ChatAction:
        TYPING = "typing"
    
    class Update:
        ALL_TYPES = []
    
    # Simple dummy implementations for when Telegram is not available
    def dummy_function(*args, **kwargs):
        pass
    
    # Assign dummy functions to avoid NameError
    InlineKeyboardButton = dummy_function
    InlineKeyboardMarkup = dummy_function
    ReplyKeyboardMarkup = dummy_function
    KeyboardButton = dummy_function
    Application = dummy_function
    CommandHandler = dummy_function
    MessageHandler = dummy_function
    filters = dummy_function
    ContextTypes = dummy_function
    CallbackQueryHandler = dummy_function

# Env for token (set TELEGRAM_BOT_TOKEN=your_token)
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_TELEGRAM_BOT_TOKEN_HERE')
API_BASE = 'http://localhost:8000'  # bldr_api.py
TG_CONTEXT_SEARCH_DEFAULT = os.getenv('TG_CONTEXT_SEARCH_DEFAULT', 'false').lower() == 'true'

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Get API token from environment variables
API_TOKEN = os.getenv('API_TOKEN')

# Check if API token is properly set
if not API_TOKEN or API_TOKEN == "":
    print("Warning: API_TOKEN not set in environment variables")
    API_TOKEN = None

def get_auth_headers():
    """Get authentication headers for API calls"""
    headers = {
        "Content-Type": "application/json"
    }
    if API_TOKEN:
        headers['Authorization'] = f'Bearer {API_TOKEN}'
    return headers

async def send_file_to_user(chat_id, file_path, caption=""):
    """
    Send a file to a Telegram user
    
    Args:
        chat_id: Telegram chat ID
        file_path: Path to the file to send
        caption: Optional caption for the file
    """
    # Only execute actual functionality if Telegram is available
    if not TELEGRAM_AVAILABLE:
        return False
    
    try:
        # Check if file exists
        if not os.path.exists(file_path):
            logger.error(f"File not found: {file_path}")
            return False
        
        # In a real implementation, we would need access to the application instance
        # For now, we'll use a global variable to store the application instance
        global application
        if application is None:
            logger.error("Telegram application instance not available")
            return False
        
        # Send the document to the user
        with open(file_path, 'rb') as file:
            await application.bot.send_document(chat_id=chat_id, document=file, caption=caption)
        logger.info(f"File sent successfully to chat {chat_id}: {file_path}")
        return True
    except Exception as e:
        logger.error(f"Error sending file to user: {str(e)}")
        return False

# Define command functions without type annotations to avoid linter issues
async def start_command(update, context):
    # Only execute actual functionality if Telegram is available
    if not TELEGRAM_AVAILABLE:
        return
    
    # Create inline keyboard with buttons
    keyboard = [
        [InlineKeyboardButton("üîç Query Norms", callback_data="query_norms")],
        [InlineKeyboardButton("üöÄ Train RAG", callback_data="train_rag")],
        [InlineKeyboardButton("üìä Metrics", callback_data="metrics")],
        [InlineKeyboardButton("‚ùì Help", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Create custom keyboard for quick access
    custom_keyboard = [
        [KeyboardButton("üîç Query"), KeyboardButton("üöÄ Train")],
        [KeyboardButton("üìä Metrics"), KeyboardButton("‚ùì Help")]
    ]
    custom_reply_markup = ReplyKeyboardMarkup(custom_keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üöÄ Bldr Empire v2 Bot!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bldr Empire v2 Telegram –±–æ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
        "‚Ä¢ üîç –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ—Ä–º –∏ –ø—Ä–∞–≤–∏–ª\n"
        "‚Ä¢ üé§ –ê–Ω–∞–ª–∏–∑ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è)\n"
        "‚Ä¢ üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ—Ä—Ç–µ–∂–µ–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (OCR)\n"
        "‚Ä¢ üìÑ –ê–Ω–∞–ª–∏–∑ PDF, Word, Excel —Ñ–∞–π–ª–æ–≤ –∏ —á–µ—Ä—Ç–µ–∂–µ–π DWG\n"
        "‚Ä¢ üöÄ –û–±—É—á–µ–Ω–∏–µ RAG —Å–∏—Å—Ç–µ–º—ã –Ω–æ–≤—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n"
        "‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª - —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–µ—Ä—É, —á—Ç–æ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å!",
        reply_markup=custom_reply_markup
    )

async def help_command(update, context):
    # Only execute actual functionality if Telegram is available
    if not TELEGRAM_AVAILABLE:
        return
    
    help_text = (
        "ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ Bldr Empire v2 Bot\n\n"
        "üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ PDF/DOCX/Excel —Ñ–∞–π–ª—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
        "‚Ä¢ –§–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–µ—Ä—Ç–µ–∂–µ–π DWG/DXF –∏ —Ç–∞–±–ª–∏—Ü XLS/CSV\n\n"
        "üí¨ –ö–æ–º–∞–Ω–¥—ã:\n"
        "/query <–≤–æ–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ—Ä–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: /query –∫–ª.5.2 –°–ü31)\n"
        "/train - –û–±—É—á–µ–Ω–∏–µ RAG —Å–∏—Å—Ç–µ–º—ã –Ω–æ–≤—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏\n"
        "/metrics - –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã\n"
        "/db <cypher> - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ Neo4j –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "/ai <–∑–∞–ø—Ä–æ—Å> - –ü–æ–ª—É—á–µ–Ω–∏–µ AI-–æ—Ç–≤–µ—Ç–æ–≤\n\n"
        "üì± –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ üì∏ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è OCR –∏ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä—Ç–µ–∂–µ–π/–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –∞–Ω–∞–ª–∏–∑–æ–º\n"
        "‚Ä¢ üìÑ –ê–Ω–∞–ª–∏–∑ –ª—é–±—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å —É–º–Ω—ã–º–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏\n"
        "‚Ä¢ üí¨ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç - —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç –≤ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞—Ö\n"
        "‚Ä¢ üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞:\n"
        "–î–æ–∫—É–º–µ–Ω—Ç—ã –≤ I:\\docs\\–±–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è.\n"
        "–°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 14-—ç—Ç–∞–ø–Ω—ã–π —Å–∏–º–±–∏–æ—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω–≤–µ–π–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏."
    )
    await update.message.reply_text(help_text)

async def query_command(update, context):
    # Only execute actual functionality if Telegram is available
    if not TELEGRAM_AVAILABLE:
        return
    
    query = " ".join(context.args)
    if not query:
        # Provide examples
        examples = [
            "/query cl.5.2 –°–ü31",
            "/query —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –±–µ—Ç–æ–Ω—É –¥–ª—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞",
            "/query –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–∏ –∫–ª–∞–¥–∫–µ —Å—Ç–µ–Ω"
        ]
        example_text = "\n".join(examples)
        await update.message.reply_text(
            "Usage: /query <question>\n\nExamples:\n" + example_text
        )
        return
    await update.message.reply_chat_action(ChatAction.TYPING)
    
    try:
        # Add authentication header if token is available
        headers = get_auth_headers()
            
        # Use new RAG search endpoint
        search_payload = {
            'query': query,
            'k': 5,
            'threshold': 0.3,
            'include_metadata': True
        }
        
        resp = requests.post(
            f'{API_BASE}/api/rag/search', 
            json=search_payload,
            headers=headers,
            timeout=1800  # Increased to 30 minutes to match AI Shell
        )
        resp.raise_for_status()  # Raise exception for bad status codes
        
        response_data = resp.json()
        results = response_data.get('results', [])
        
        if not results:
            await update.message.reply_text("No results found for your query. Please try rephrasing or check if the system has been trained with relevant documents.")
            return
        
        # Format response using new RAG format
        text = f"üîç RAG Search '{query}'\n\n"
        text += f"üìä Found: {response_data.get('total_found')} results\n"
        text += f"‚ö° Time: {response_data.get('processing_time', 0):.2f}s\n"
        text += f"üß† Method: {response_data.get('search_method')}\n\n"
        
        for i, r in enumerate(results, 1):
            # Truncate content text to make it more readable
            content_text = r['content'][:200] + "..." if len(r['content']) > 200 else r['content']
            text += f"{i}. {content_text}\n"
            text += f"   üìà Score: {r['score']:.3f}\n"
            
            # Show metadata if available
            if r.get('metadata'):
                metadata = r['metadata']
                if metadata.get('doc_id'):
                    text += f"   üìÑ Doc: {metadata.get('doc_id')}\n"
                if metadata.get('category'):
                    text += f"   üè∑Ô∏è Category: {metadata.get('category')}\n"
            
            text += "\n"
            
        await update.message.reply_text(text)
    except requests.exceptions.Timeout:
        await update.message.reply_text("‚ùå Request timeout. The system is taking too long to respond. Please try again later.")
    except requests.exceptions.ConnectionError:
        await update.message.reply_text("‚ùå Connection error. Please check if the Bldr API service is running and try again.")
    except requests.exceptions.HTTPError as e:
        status_code = e.response.status_code
        if status_code == 401:
            await update.message.reply_text("‚ùå Authentication required. Please check your API token configuration.")
        elif status_code == 403:
            await update.message.reply_text("‚ùå Access forbidden. You don't have permission to perform this action.")
        elif status_code == 429:
            await update.message.reply_text("‚ùå Rate limit exceeded. Please wait a moment before trying again.")
        elif status_code >= 500:
            await update.message.reply_text("‚ùå Server error. The system encountered an internal error. Please try again later.")
        else:
            await update.message.reply_text(f"‚ùå API error (HTTP {status_code}). Please try again or contact support.")
    except Exception as e:
        logger.error(f"Error processing query: {str(e)}")
        await update.message.reply_text(f"‚ùå Error processing query: {str(e)}. Please try again or contact support.")

async def train_command(update, context):
    # Only execute actual functionality if Telegram is available
    if not TELEGRAM_AVAILABLE:
        return
    
    await update.message.reply_chat_action(ChatAction.TYPING)
    
    try:
        # Add authentication header if token is available
        headers = get_auth_headers()
        
        # Use new RAG training endpoint
        training_payload = {
            'base_dir': None,  # Use default directory
            'max_files': None,  # No limit
            'force_retrain': False,
            'doc_types': None  # All types
        }
        
        resp = requests.post(
            f'{API_BASE}/api/rag/train',
            json=training_payload,
            headers=headers,
            timeout=1800  # Increased to 30 minutes to match AI Shell
        )
        resp.raise_for_status()
        
        response_data = resp.json()
        task_id = response_data.get('task_id', 'unknown')
        message = response_data.get('message', 'Training started successfully')
        estimated_time = response_data.get('estimated_time', 'unknown')
        
        await update.message.reply_text(
            f"üöÄ RAG Training started!\n\n"
            f"üè∑Ô∏è Task ID: {task_id}\n"
            f"üí¨ Message: {message}\n"
            f"‚è∞ Estimated time: {estimated_time}\n\n"
            f"Use /metrics to check training progress and results."
        )
    except requests.exceptions.Timeout:
        await update.message.reply_text("‚ùå Request timeout. Training process is taking too long to start. Please check system status.")
    except requests.exceptions.ConnectionError:
        await update.message.reply_text("‚ùå Connection error. Please check if the Bldr API service is running and try again.")
    except requests.exceptions.HTTPError as e:
        status_code = e.response.status_code
        if status_code == 401:
            await update.message.reply_text("‚ùå Authentication required. Please check your API token configuration.")
        elif status_code == 403:
            await update.message.reply_text("‚ùå Access forbidden. You don't have permission to start training.")
        elif status_code == 429:
            await update.message.reply_text("‚ùå Rate limit exceeded. Please wait a moment before trying again.")
        elif status_code >= 500:
            await update.message.reply_text("‚ùå Server error. The system encountered an internal error. Please try again later.")
        else:
            await update.message.reply_text(f"‚ùå API error (HTTP {status_code}). Please try again or contact support.")
    except Exception as e:
        logger.error(f"Error starting training: {str(e)}")
        await update.message.reply_text(f"‚ùå Error starting training: {str(e)}. Please try again or contact support.")

async def metrics_command(update, context):
    # Only execute actual functionality if Telegram is available
    if not TELEGRAM_AVAILABLE:
        return
    
    try:
        # Add authentication header if token is available
        headers = get_auth_headers()
        
        # Get system health first
        health_resp = requests.get(
            f'{API_BASE}/health',
            headers=headers,
            timeout=1800  # Increased to 30 minutes
        )
        health_resp.raise_for_status()
        health_data = health_resp.json()
        
        # Get RAG system status
        rag_resp = requests.get(
            f'{API_BASE}/api/rag/status',
            headers=headers,
            timeout=1800  # Increased to 30 minutes
        )
        rag_resp.raise_for_status()
        rag_data = rag_resp.json()
        
        # Format comprehensive system status
        text = f"üìä Bldr System Metrics\n"
        text += f"=" * 25 + "\n\n"
        
        # System health
        system_status = health_data.get('status', 'unknown')
        text += f"üíπ System Status: {system_status.upper()}\n"
        
        components = health_data.get('components', {})
        if components:
            text += f"üîß Components:\n"
            for component, status in components.items():
                emoji = "‚úÖ" if status in ['ok', 'connected', 'running'] else "‚ùå"
                text += f"  {emoji} {component}: {status}\n"
            text += "\n"
        
        # RAG system status
        text += f"üß† RAG System Status:\n"
        
        is_training = rag_data.get('is_training', False)
        training_emoji = "üîÑ" if is_training else "‚è∏Ô∏è"
        text += f"  {training_emoji} Training: {'In Progress' if is_training else 'Idle'}\n"
        
        if is_training:
            progress = rag_data.get('progress', 0)
            current_stage = rag_data.get('current_stage', 'unknown')
            text += f"  üìà Progress: {progress}%\n"
            text += f"  üîç Stage: {current_stage}\n"
        
        text += f"  üìÑ Documents: {rag_data.get('total_documents', 0)}\n"
        text += f"  üß© Chunks: {rag_data.get('total_chunks', 0)}\n"
        
        message = rag_data.get('message', '')
        if message:
            text += f"  üí¨ Message: {message}\n"
        
        last_update = rag_data.get('last_update', '')
        if last_update:
            text += f"  üïê Updated: {last_update[:19]}\n"
        
        await update.message.reply_text(text)
    except requests.exceptions.Timeout:
        await update.message.reply_text("‚ùå Request timeout. Unable to fetch system metrics. Please try again later.")
    except requests.exceptions.ConnectionError:
        await update.message.reply_text("‚ùå Connection error. Please check if the Bldr API service is running and try again.")
    except requests.exceptions.HTTPError as e:
        status_code = e.response.status_code
        if status_code == 401:
            await update.message.reply_text("‚ùå Authentication required. Please check your API token configuration.")
        elif status_code == 403:
            await update.message.reply_text("‚ùå Access forbidden. You don't have permission to view metrics.")
        elif status_code == 429:
            await update.message.reply_text("‚ùå Rate limit exceeded. Please wait a moment before trying again.")
        elif status_code >= 500:
            await update.message.reply_text("‚ùå Server error. The system encountered an internal error. Please try again later.")
        else:
            await update.message.reply_text(f"‚ùå API error (HTTP {status_code}). Please try again or contact support.")
    except Exception as e:
        logger.error(f"Error fetching metrics: {str(e)}")
        await update.message.reply_text(f"‚ùå Error fetching metrics: {str(e)}. Please try again or contact support.")

async def db_command(update, context):
    # Only execute actual functionality if Telegram is available
    if not TELEGRAM_AVAILABLE:
        return
    
    cypher = " ".join(context.args)
    if not cypher:
        await update.message.reply_text("Usage: /db <cypher query> e.g. /db MATCH (n:WorkSequence) RETURN n LIMIT 5")
        return
    
    try:
        # Add authentication header if token is available
        headers = get_auth_headers()
        
        resp = requests.post(f'{API_BASE}/db', json={'cypher': cypher}, headers=headers)
        resp.raise_for_status()
        records = resp.json()['records']
        text = f"Neo4j Query '{cypher}': {len(records)} records\n\n"
        for r in records[:10]:
            text += f"‚Ä¢ {r}\n"
        if len(records) > 10: 
            text += f"... + {len(records)-10} more"
        await update.message.reply_text(text)
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f"‚ùå Error executing database query: {str(e)}. Please check your query syntax and try again.")
    except Exception as e:
        logger.error(f"Error processing database query: {str(e)}")
        await update.message.reply_text(f"‚ùå Error processing database query: {str(e)}. Please try again or contact support.")

async def ai_command(update, context):
    # Only execute actual functionality if Telegram is available
    if not TELEGRAM_AVAILABLE:
        return
    
    prompt = " ".join(context.args)
    if not prompt:
        await update.message.reply_text("Usage: /ai <prompt> e.g. /ai Generate tezis for BIM OVOS F–ó-44")
        return
    
    try:
        # Add authentication header if token is available
        headers = get_auth_headers()
            
        # Prepare the payload
        payload = {
            'prompt': prompt,
            'model': 'deepseek/deepseek-r1-0528-qwen3-8b'
        }
        
        # Send request to AI endpoint
        resp = requests.post(f'{API_BASE}/ai', json=payload, headers=headers, timeout=1800)  # Increased to 30 minutes to match AI Shell
        
        if resp.status_code == 200:
            response_data = resp.json()
            task_id = response_data.get('task_id')
            message = response_data.get('message', 'AI request started')
            await update.message.reply_text(f"ü§ñ AI request started (Task ID: {task_id})\n{message}\n\nPlease wait while I process your request. I'll send you the response when it's ready.")
        else:
            await update.message.reply_text(f"AI error: {resp.text}")
    except requests.exceptions.Timeout:
        await update.message.reply_text("‚ùå Request timeout. The AI system is taking too long to respond. Please try again later.")
    except requests.exceptions.ConnectionError:
        await update.message.reply_text("‚ùå Connection error. Please check if the Bldr API service is running and try again.")
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f"‚ùå Error communicating with AI service: {str(e)}. Please try again later.")
    except Exception as e:
        logger.error(f"Error processing AI request: {str(e)}")
        await update.message.reply_text(f"‚ùå Error processing AI request: {str(e)}. Please try again or contact support.")

async def handle_text(update, context):
    # Only execute actual functionality if Telegram is available
    if not TELEGRAM_AVAILABLE:
        return
    
    text = update.message.text
    do_tts = False
    if text:
        if text.startswith('/tts ') or text.startswith('/say '):
            do_tts = True
            text = text.split(' ', 1)[1] if ' ' in text else ''
    await update.message.reply_chat_action(ChatAction.TYPING)
    
    # Handle quick access buttons
    if text == "üîç Query":
        await update.message.reply_text("Please enter your query after /query command, e.g. /query cl.5.2 –°–ü31")
        return
    elif text == "üöÄ Train":
        await train_command(update, context)
        return
    elif text == "üìä Metrics":
        await metrics_command(update, context)
        return
    elif text == "‚ùì Help":
        await help_command(update, context)
        return
    
    try:
        # Add authentication header if token is available
        headers = get_auth_headers()
        
        # Store Telegram context for file delivery
        telegram_context = {
            "chat_id": update.message.chat_id,
            "message_id": update.message.message_id,
            "user_id": update.message.from_user.id if update.message.from_user else None
        }
        
        # Heuristic: context only for normative queries unless explicitly enabled
        text_lower = (text or '').lower()
        looks_like_norms = any(key in text_lower for key in [
            '—Å–ø ', '—Å–ø-', '—Å–Ω–∏–ø', '—Å–Ω', '–≥–æ—Å—Ç', '—Ç—Ä–µ–±–æ–≤–∞–Ω', '–Ω–æ—Ä–º–∞', '–ø—Ä–∞–≤–∏–ª', '—Å–∞–Ω–ø–∏–Ω', '–ø–æ—Å–æ–±–∏', '—Å–≤–æ–¥ –ø—Ä–∞–≤–∏–ª', '?'
        ])
        do_context = (TG_CONTEXT_SEARCH_DEFAULT or looks_like_norms)
        
        chat_payload = {
            'message': text,
            'context_search': do_context,
            'max_context': 3,
            'agent_role': 'coordinator',
            'request_context': {
                'channel': 'telegram',
                'chat_id': telegram_context['chat_id'],
                'user_id': telegram_context['user_id']
            }
        }
        
        resp = requests.post(
            f'{API_BASE}/api/ai/chat',
            json=chat_payload,
            headers=headers,
            timeout=1800  # Increased to 30 minutes to match AI Shell
        )
        resp.raise_for_status()
        
        response_data = resp.json()
        ai_response = response_data.get('response', '')
        context_used = response_data.get('context_used', [])
        agent_used = response_data.get('agent_used', 'unknown')
        processing_time = response_data.get('processing_time', 0)
        
        if not ai_response:
            await update.message.reply_text("–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥.")
            return
        
        # Format AI response with context info
        final_response = f"ü§ñ {ai_response}\n\n"
        
        # Add context information if available
        if context_used:
            final_response += f"üìÅ –ö–æ–Ω—Ç–µ–∫—Å—Ç ({len(context_used)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤):\n"
            for i, ctx in enumerate(context_used[:2], 1):  # Show max 2 context sources
                ctx_preview = ctx['content'][:100] + "..." if len(ctx['content']) > 100 else ctx['content']
                final_response += f"{i}. {ctx_preview} (üìà {ctx['score']:.2f})\n"
            final_response += "\n"
        
        # Add technical info footer
        final_response += f"‚ö° –ê–≥–µ–Ω—Ç: {agent_used} | –í—Ä–µ–º—è: {processing_time:.2f}s"
            
        await update.message.reply_text(final_response)
        
        # TTS reply only if explicitly requested via /tts or /say
        if do_tts:
            try:
                tts_resp = requests.post(f"{API_BASE}/tts", json={"text": ai_response}, headers=headers, timeout=60)
                if tts_resp.status_code == 200:
                    audio_url = f"{API_BASE}/download/response.mp3"
                    audio_file = requests.get(audio_url, timeout=60)
                    if audio_file.status_code == 200 and application:
                        from io import BytesIO
                        bio = BytesIO(audio_file.content)
                        bio.name = 'response.mp3'
                        try:
                            await application.bot.send_voice(chat_id=update.message.chat_id, voice=bio, caption="üîä –û–∑–≤—É—á–µ–Ω–æ")
                        except Exception:
                            await application.bot.send_audio(chat_id=update.message.chat_id, audio=bio, caption="üîä –û–∑–≤—É—á–µ–Ω–æ")
            except Exception as e:
                logger.error(f"TTS reply failed: {e}")
    except requests.exceptions.Timeout:
        await update.message.reply_text("‚ùå –¢–∞–π–º-–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –°–∏—Å—Ç–µ–º–∞ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except requests.exceptions.ConnectionError:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∑–∞–ø—É—â–µ–Ω –ª–∏ API —Å–µ—Ä–≤–∏—Å Bldr, –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except requests.exceptions.HTTPError as e:
        status_code = e.response.status_code
        if status_code == 401:
            await update.message.reply_text("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É API —Ç–æ–∫–µ–Ω–∞.")
        elif status_code == 403:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
        elif status_code == 429:
            await update.message.reply_text("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.")
        elif status_code >= 500:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –°–∏—Å—Ç–µ–º–∞ —Å—Ç–æ–ª–∫–Ω—É–ª–∞—Å—å —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ API (HTTP {status_code}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    except Exception as e:
        logger.error(f"Error processing message: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

async def handle_voice(update, context):
    """Handle voice messages - transcribe and analyze"""
    # Only execute actual functionality if Telegram is available
    if not TELEGRAM_AVAILABLE:
        return
    
    await update.message.reply_chat_action(ChatAction.TYPING)
    
    try:
        # Get the voice file
        voice_file = await update.message.voice.get_file()
        
        # Download voice file to bytes
        voice_bytes = await voice_file.download_as_bytearray()
        
        # Convert to base64 for API
        voice_base64 = base64.b64encode(voice_bytes).decode('utf-8')
        
        await update.message.reply_text("üé§ –ü–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é...")
        
        # Send to AI chat endpoint with embedded voice data
        headers = get_auth_headers()
        chat_payload = {
            'message': 'Voice message',
            'context_search': False,
            'max_context': 0,
            'agent_role': 'coordinator',
            'voice_data': voice_base64,
            'request_context': {
                'channel': 'telegram',
                'chat_id': update.message.chat_id,
                'user_id': update.message.from_user.id if update.message.from_user else None
            }
        }
        resp = requests.post(f'{API_BASE}/api/ai/chat', json=chat_payload, headers=headers, timeout=1800)
        
        if resp.status_code == 200:
            response_data = resp.json()
            ai_response = response_data.get('response', '')
            context_used = response_data.get('context_used', [])
            
            final_response = f"üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:\n\n{ai_response}\n\n"
            
            if context_used:
                final_response += f"üìÅ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç ({len(context_used)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)\n"
            
            await update.message.reply_text(final_response)
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {resp.text}")
            
    except Exception as e:
        logger.error(f"Error processing voice message: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

async def handle_photo(update, context):
    """Handle photo messages - OCR and analyze"""
    # Only execute actual functionality if Telegram is available
    if not TELEGRAM_AVAILABLE:
        return
    
    await update.message.reply_chat_action(ChatAction.TYPING)
    
    try:
        # Get the largest photo size
        photo = update.message.photo[-1]
        photo_file = await photo.get_file()
        
        # Download photo to bytes
        photo_bytes = await photo_file.download_as_bytearray()
        
        # Convert to base64 for API
        photo_base64 = base64.b64encode(photo_bytes).decode('utf-8')
        
        # Get caption if provided
        caption = update.message.caption or ""
        
        await update.message.reply_text("üì∏ –ü–æ–ª—É—á–∏–ª —Ñ–æ—Ç–æ. –í—ã–ø–æ–ª–Ω—è—é OCR –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...")
        
        # Prepare prompt based on whether there's a caption
        if caption:
            prompt = f'–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∏: "{caption}". –í—ã–ø–æ–ª–Ω–∏ OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–æ—Ä–º –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.'
        else:
            prompt = '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í—ã–ø–æ–ª–Ω–∏ OCR –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ. –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä—Ç–µ–∂–∏, —Å—Ö–µ–º—ã –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã - –æ–ø–∏—à–∏ –∏—Ö –¥–µ—Ç–∞–ª—å–Ω–æ –∏ –Ω–∞–π–¥–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –Ω–æ—Ä–º—ã.'
        
        # Send to AI chat endpoint with embedded image data
        headers = get_auth_headers()
        chat_payload = {
            'message': 'Image message',
            'context_search': False,
            'max_context': 0,
            'agent_role': 'coordinator',
            'image_data': photo_base64,
            'request_context': {
                'channel': 'telegram',
                'chat_id': update.message.chat_id,
                'user_id': update.message.from_user.id if update.message.from_user else None
            }
        }
        resp = requests.post(f'{API_BASE}/api/ai/chat', json=chat_payload, headers=headers, timeout=1800)
        
        if resp.status_code == 200:
            response_data = resp.json()
            ai_response = response_data.get('response', '')
            context_used = response_data.get('context_used', [])
            
            final_response = f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:\n\n{ai_response}\n\n"
            
            if context_used:
                final_response += f"üìÅ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç ({len(context_used)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)\n"
            
            await update.message.reply_text(final_response)
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {resp.text}")
            
    except Exception as e:
        logger.error(f"Error processing photo: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

async def handle_document(update, context):
    """Handle document/file messages - analyze and process"""
    # Only execute actual functionality if Telegram is available
    if not TELEGRAM_AVAILABLE:
        return
    
    await update.message.reply_chat_action(ChatAction.TYPING)
    
    try:
        document = update.message.document
        file_name = document.file_name
        file_size = document.file_size
        
        # Check file size (limit to 20MB for processing)
        if file_size > 20 * 1024 * 1024:  # 20MB
            await update.message.reply_text("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 20MB.")
            return
        
        # Get the document file
        doc_file = await document.get_file()
        
        # Download document to bytes
        doc_bytes = await doc_file.download_as_bytearray()
        
        # Convert to base64 for API
        doc_base64 = base64.b64encode(doc_bytes).decode('utf-8')
        
        # Get caption if provided
        caption = update.message.caption or ""
        
        await update.message.reply_text(f"üìÑ –ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª '{file_name}' ({file_size // 1024} KB). –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...")
        
        # Prepare prompt based on file type and caption
        file_ext = file_name.lower().split('.')[-1] if '.' in file_name else 'unknown'
        
        if caption:
            prompt = f'–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ñ–∞–π–ª "{file_name}" (—Ñ–æ—Ä–º–∞—Ç: {file_ext}) —Å —É—á–µ—Ç–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: "{caption}". –ò–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –Ω–∞–π–¥–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–æ—Ä–º—ã.'
        else:
            if file_ext in ['pdf', 'doc', 'docx']:
                prompt = f'–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–æ–∫—É–º–µ–Ω—Ç "{file_name}". –ò–∑–≤–ª–µ–∫–∏ —Ç–µ–∫—Å—Ç, –Ω–∞–π–¥–∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –Ω–æ—Ä–º—ã, —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.'
            elif file_ext in ['xls', 'xlsx', 'csv']:
                prompt = f'–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–∞–±–ª–∏—Ü—É "{file_name}". –ò–∑–≤–ª–µ–∫–∏ –¥–∞–Ω–Ω—ã–µ, –Ω–∞–π–¥–∏ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è, –Ω–æ—Ä–º–∞—Ç–∏–≤—ã. –°–¥–µ–ª–∞–π –≤—ã–≤–æ–¥—ã –æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º.'
            elif file_ext in ['dwg', 'dxf']:
                prompt = f'–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —á–µ—Ä—Ç–µ–∂ "{file_name}". –û–ø–∏—à–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ/—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —Ä–∞–∑–º–µ—Ä—ã, —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–º –Ω–æ—Ä–º–∞–º.'
            else:
                prompt = f'–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∞–π–ª "{file_name}" (—Ñ–æ—Ä–º–∞—Ç: {file_ext}). –û–ø—Ä–µ–¥–µ–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∏–∑–≤–ª–µ–∫–∏ –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –æ—Å–æ–±–µ–Ω–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—É—é —Å–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ–º –∏ –Ω–æ—Ä–º–∞–º–∏.'
        
        # Send to AI chat endpoint for analysis with context
        headers = get_auth_headers()
        
        chat_payload = {
            'message': prompt,
            'context_search': True,
            'max_context': 3,
            'agent_role': 'coordinator'
        }
        
        # Note: document_data would need to be handled differently in the new endpoint
        # For now, we'll process the prompt and add document handling later
        resp = requests.post(f'{API_BASE}/api/ai/chat', json=chat_payload, headers=headers, timeout=1800)
        
        if resp.status_code == 200:
            response_data = resp.json()
            ai_response = response_data.get('response', '')
            context_used = response_data.get('context_used', [])
            processing_time = response_data.get('processing_time', 0)
            
            final_response = f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç '{file_name}' –æ–±—Ä–∞–±–æ—Ç–∞–Ω:\n\n{ai_response}\n\n"
            
            if context_used:
                final_response += f"üìÅ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç ({len(context_used)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)\n"
            
            final_response += f"‚ö° –í—Ä–µ–º—è: {processing_time:.2f}s"
            
            await update.message.reply_text(final_response)
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {resp.text}")
            
    except Exception as e:
        logger.error(f"Error processing document: {str(e)}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

def send_command_to_bot(cmd: str) -> bool:
    """
    Send a command to the Telegram bot
    
    Args:
        cmd: Command to send to the bot
        
    Returns:
        bool: True if command was sent successfully, False otherwise
    """
    try:
        # Check if Telegram bot token is configured
        telegram_token = os.getenv("TELEGRAM_BOT_TOKEN")
        if not telegram_token or telegram_token == "YOUR_TELEGRAM_BOT_TOKEN_HERE":
            print("Telegram bot token not configured")
            return False
            
        # For now, we'll log the command and simulate sending it
        # In a real implementation, we would send the command to users who have interacted with the bot
        # This would require storing chat IDs from user interactions
        logger.info(f"Command sent to bot: {cmd}")
        
        # Simulate successful sending
        return True
    except Exception as e:
        logger.error(f"Error sending command to bot: {str(e)}")
        return False

def load_env_file():
    """Load environment variables from .env file"""
    env_file_path = '.env'
    if os.path.exists(env_file_path):
        with open(env_file_path, 'r') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    # Remove any surrounding quotes from the value
                    value = value.strip().strip('"\'')
                    os.environ[key] = value

if __name__ == '__main__':
    # Load environment variables from .env file
    load_env_file()
    
    # Also load with dotenv to ensure proper loading
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except ImportError:
        pass
    
    # Refresh the token after loading env file
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_TELEGRAM_BOT_TOKEN_HERE')
    API_TOKEN = os.getenv('API_TOKEN')
    
    # Check if API token is properly set
    if not API_TOKEN or API_TOKEN == "":
        print("Warning: API_TOKEN not set in environment variables")
        API_TOKEN = None
    
    # Only run if Telegram libraries are available
    if TELEGRAM_AVAILABLE and TELEGRAM_BOT_TOKEN != "YOUR_TELEGRAM_BOT_TOKEN_HERE":
        # Create the Application and pass it your bot's token
        # Import required modules here to avoid issues when Telegram is not available
        try:
            from telegram.ext import Application, CommandHandler, MessageHandler, filters
            application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

            # Add command handlers
            application.add_handler(CommandHandler("start", start_command))
            application.add_handler(CommandHandler("help", help_command))
            application.add_handler(CommandHandler("query", query_command))
            application.add_handler(CommandHandler("train", train_command))
            application.add_handler(CommandHandler("metrics", metrics_command))
            application.add_handler(CommandHandler("db", db_command))
            application.add_handler(CommandHandler("ai", ai_command))

            # Add message handlers for different types of messages
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
            application.add_handler(MessageHandler(filters.VOICE, handle_voice))
            application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
            application.add_handler(MessageHandler(filters.Document.ALL, handle_document))

            # Run the bot until the user presses Ctrl-C
            application.run_polling()
        except Exception as e:
            print(f"Error starting Telegram bot: {e}")
    else:
        print("Telegram bot is not properly configured. Please set TELEGRAM_BOT_TOKEN environment variable.")