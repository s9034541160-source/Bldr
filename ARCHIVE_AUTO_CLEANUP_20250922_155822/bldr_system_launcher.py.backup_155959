#!/usr/bin/env python3
"""
Bldr System Launcher
–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ GUI-—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã Bldr Empire
"""

import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import subprocess
import threading
import time
import json
import requests
import psutil
from pathlib import Path
import queue
import os
from datetime import datetime

class BldrSystemLauncher:
    """–ì–ª–∞–≤–Ω—ã–π –ª–∞—É–Ω—á–µ—Ä —Å–∏—Å—Ç–µ–º—ã Bldr Empire"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üèóÔ∏è Bldr Empire v2 - System Launcher")
        self.root.geometry("1200x800")
        self.root.configure(bg='#f0f0f0')
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.components = {
            'neo4j': {'status': 'stopped', 'pid': None, 'port': 7474},
            'qdrant': {'status': 'stopped', 'pid': None, 'port': 6333},
            'backend': {'status': 'stopped', 'pid': None, 'port': 8000},
            'frontend': {'status': 'stopped', 'pid': None, 'port': 5173},
            'rag_training': {'status': 'stopped', 'pid': None, 'progress': 0}
        }
        
        # –ü—Ä–æ—Ü–µ—Å—Å—ã
        self.processes = {}
        
        # –û—á–µ—Ä–µ–¥—å –¥–ª—è –ª–æ–≥–æ–≤
        self.log_queue = queue.Queue()
        
        self.setup_ui()
        self.start_monitoring()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ì–ª–∞–≤–Ω—ã–π —Ñ—Ä–µ–π–º
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ttk.Label(main_frame, text="üèóÔ∏è Bldr Empire v2 - System Control Center", 
                               font=('Arial', 16, 'bold'))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.setup_components_panel(main_frame)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - –ª–æ–≥–∏
        self.setup_logs_panel(main_frame)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        self.setup_control_panel(main_frame)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç—É—Å
        self.setup_status_panel(main_frame)

    def setup_components_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        
        components_frame = ttk.LabelFrame(parent, text="üìä System Components", padding="10")
        components_frame.grid(row=1, column=0, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        
        self.component_labels = {}
        self.component_buttons = {}
        
        row = 0
        for component, info in self.components.items():
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            name_label = ttk.Label(components_frame, text=f"üîß {component.upper()}", 
                                  font=('Arial', 10, 'bold'))
            name_label.grid(row=row, column=0, sticky=tk.W, pady=2)
            
            # –°—Ç–∞—Ç—É—Å
            status_label = ttk.Label(components_frame, text="‚ö´ STOPPED", 
                                   foreground='red')
            status_label.grid(row=row, column=1, sticky=tk.W, padx=(10, 0), pady=2)
            self.component_labels[component] = status_label
            
            # –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            btn_frame = ttk.Frame(components_frame)
            btn_frame.grid(row=row, column=2, sticky=tk.E, padx=(10, 0), pady=2)
            
            start_btn = ttk.Button(btn_frame, text="‚ñ∂Ô∏è Start", width=8,
                                  command=lambda c=component: self.start_component(c))
            start_btn.pack(side=tk.LEFT, padx=(0, 5))
            
            stop_btn = ttk.Button(btn_frame, text="‚èπÔ∏è Stop", width=8,
                                 command=lambda c=component: self.stop_component(c))
            stop_btn.pack(side=tk.LEFT)
            
            self.component_buttons[component] = {'start': start_btn, 'stop': stop_btn}
            
            row += 1
        
        # –ö–Ω–æ–ø–∫–∏ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ttk.Separator(components_frame, orient='horizontal').grid(row=row, column=0, columnspan=3, 
                                                                 sticky=(tk.W, tk.E), pady=10)
        row += 1
        
        mass_frame = ttk.Frame(components_frame)
        mass_frame.grid(row=row, column=0, columnspan=3, pady=5)
        
        ttk.Button(mass_frame, text="üöÄ Start All", 
                  command=self.start_all_components).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(mass_frame, text="‚èπÔ∏è Stop All", 
                  command=self.stop_all_components).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(mass_frame, text="üîÑ Restart All", 
                  command=self.restart_all_components).pack(side=tk.LEFT)

    def setup_logs_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å –ª–æ–≥–æ–≤"""
        
        logs_frame = ttk.LabelFrame(parent, text="üìù System Logs", padding="10")
        logs_frame.grid(row=1, column=1, sticky=(tk.W, tk.E, tk.N, tk.S), padx=(0, 10))
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        self.log_text = scrolledtext.ScrolledText(logs_frame, width=60, height=25, 
                                                 font=('Consolas', 9))
        self.log_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∞–º–∏
        log_buttons_frame = ttk.Frame(logs_frame)
        log_buttons_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(10, 0))
        
        ttk.Button(log_buttons_frame, text="üóëÔ∏è Clear", 
                  command=self.clear_logs).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(log_buttons_frame, text="üíæ Save", 
                  command=self.save_logs).pack(side=tk.LEFT, padx=(0, 10))
        ttk.Button(log_buttons_frame, text="üîÑ Auto-scroll", 
                  command=self.toggle_autoscroll).pack(side=tk.LEFT)
        
        self.autoscroll = True

    def setup_control_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        
        control_frame = ttk.LabelFrame(parent, text="üéõÔ∏è Control Panel", padding="10")
        control_frame.grid(row=1, column=2, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # RAG Training Control
        rag_frame = ttk.LabelFrame(control_frame, text="üß† RAG Training", padding="10")
        rag_frame.pack(fill=tk.X, pady=(0, 10))
        
        self.rag_progress = ttk.Progressbar(rag_frame, mode='determinate')
        self.rag_progress.pack(fill=tk.X, pady=(0, 10))
        
        self.rag_status_label = ttk.Label(rag_frame, text="Status: Idle")
        self.rag_status_label.pack(anchor=tk.W)
        
        rag_buttons_frame = ttk.Frame(rag_frame)
        rag_buttons_frame.pack(fill=tk.X, pady=(10, 0))
        
        ttk.Button(rag_buttons_frame, text="üöÄ Start Training", 
                  command=self.start_rag_training).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(rag_buttons_frame, text="‚è∏Ô∏è Pause", 
                  command=self.pause_rag_training).pack(side=tk.LEFT, padx=(0, 5))
        ttk.Button(rag_buttons_frame, text="‚èπÔ∏è Stop", 
                  command=self.stop_rag_training).pack(side=tk.LEFT)
        
        # Quick Actions
        actions_frame = ttk.LabelFrame(control_frame, text="‚ö° Quick Actions", padding="10")
        actions_frame.pack(fill=tk.X, pady=(0, 10))
        
        ttk.Button(actions_frame, text="üåê Open Frontend", 
                  command=lambda: self.open_url("http://localhost:5173")).pack(fill=tk.X, pady=2)
        ttk.Button(actions_frame, text="üîß Open Backend API", 
                  command=lambda: self.open_url("http://localhost:8000/docs")).pack(fill=tk.X, pady=2)
        ttk.Button(actions_frame, text="üóÑÔ∏è Open Neo4j Browser", 
                  command=lambda: self.open_url("http://localhost:7474")).pack(fill=tk.X, pady=2)
        ttk.Button(actions_frame, text="üìä Open Qdrant Dashboard", 
                  command=lambda: self.open_url("http://localhost:6333/dashboard")).pack(fill=tk.X, pady=2)
        
        # System Actions
        system_frame = ttk.LabelFrame(control_frame, text="üõ†Ô∏è System Actions", padding="10")
        system_frame.pack(fill=tk.X)
        
        ttk.Button(system_frame, text="‚ò¢Ô∏è Nuclear Reset", 
                  command=self.nuclear_reset).pack(fill=tk.X, pady=2)
        ttk.Button(system_frame, text="üìÅ Open File Manager", 
                  command=self.open_file_manager).pack(fill=tk.X, pady=2)
        ttk.Button(system_frame, text="üìã System Report", 
                  command=self.generate_system_report).pack(fill=tk.X, pady=2)

    def setup_status_panel(self, parent):
        """–ü–∞–Ω–µ–ª—å —Å—Ç–∞—Ç—É—Å–∞"""
        
        status_frame = ttk.Frame(parent)
        status_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(10, 0))
        
        self.status_label = ttk.Label(status_frame, text="üî¥ System Idle", 
                                     font=('Arial', 10, 'bold'))
        self.status_label.pack(side=tk.LEFT)
        
        self.time_label = ttk.Label(status_frame, text="")
        self.time_label.pack(side=tk.RIGHT)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        self.update_time()

    def log(self, message: str, level: str = "INFO"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] [{level}] {message}\n"
        
        self.log_queue.put(log_entry)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º UI –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.root.after(0, self.update_log_display)

    def update_log_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–æ–≤"""
        try:
            while True:
                log_entry = self.log_queue.get_nowait()
                self.log_text.insert(tk.END, log_entry)
                
                if self.autoscroll:
                    self.log_text.see(tk.END)
                    
        except queue.Empty:
            pass

    def update_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.time_label.config(text=current_time)
        self.root.after(1000, self.update_time)

    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        def monitor():
            while True:
                self.check_components_status()
                time.sleep(5)
        
        monitor_thread = threading.Thread(target=monitor, daemon=True)
        monitor_thread.start()

    def check_components_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Neo4j
        try:
            response = requests.get("http://localhost:7474", timeout=2)
            if response.status_code == 200:
                self.update_component_status('neo4j', 'running', 'üü¢ RUNNING')
            else:
                self.update_component_status('neo4j', 'error', 'üü° ERROR')
        except:
            self.update_component_status('neo4j', 'stopped', 'üî¥ STOPPED')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Qdrant
        try:
            response = requests.get("http://localhost:6333/health", timeout=2)
            if response.status_code == 200:
                self.update_component_status('qdrant', 'running', 'üü¢ RUNNING')
            else:
                self.update_component_status('qdrant', 'error', 'üü° ERROR')
        except:
            self.update_component_status('qdrant', 'stopped', 'üî¥ STOPPED')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Backend
        try:
            response = requests.get("http://localhost:8000/health", timeout=2)
            if response.status_code == 200:
                self.update_component_status('backend', 'running', 'üü¢ RUNNING')
            else:
                self.update_component_status('backend', 'error', 'üü° ERROR')
        except:
            self.update_component_status('backend', 'stopped', 'üî¥ STOPPED')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Frontend
        try:
            response = requests.get("http://localhost:5173", timeout=2)
            if response.status_code == 200:
                self.update_component_status('frontend', 'running', 'üü¢ RUNNING')
            else:
                self.update_component_status('frontend', 'error', 'üü° ERROR')
        except:
            self.update_component_status('frontend', 'stopped', 'üî¥ STOPPED')

    def update_component_status(self, component: str, status: str, display_text: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        if component in self.component_labels:
            self.component_labels[component].config(text=display_text)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–≤–µ—Ç
            if 'RUNNING' in display_text:
                self.component_labels[component].config(foreground='green')
            elif 'ERROR' in display_text:
                self.component_labels[component].config(foreground='orange')
            else:
                self.component_labels[component].config(foreground='red')
        
        self.components[component]['status'] = status

    def start_component(self, component: str):
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        self.log(f"Starting {component}...")
        
        def start_in_thread():
            try:
                if component == 'neo4j':
                    self.start_neo4j()
                elif component == 'qdrant':
                    self.start_qdrant()
                elif component == 'backend':
                    self.start_backend()
                elif component == 'frontend':
                    self.start_frontend()
                elif component == 'rag_training':
                    self.start_rag_training()
            except Exception as e:
                self.log(f"Error starting {component}: {e}", "ERROR")
        
        threading.Thread(target=start_in_thread, daemon=True).start()

    def stop_component(self, component: str):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        self.log(f"Stopping {component}...")
        
        if component in self.processes and self.processes[component]:
            try:
                self.processes[component].terminate()
                self.processes[component] = None
                self.log(f"{component} stopped")
            except Exception as e:
                self.log(f"Error stopping {component}: {e}", "ERROR")

    def start_neo4j(self):
        """–ó–∞–ø—É—Å–∫ Neo4j"""
        neo4j_paths = [
            r"C:\Users\%USERNAME%\AppData\Local\Programs\Neo4j Desktop\Neo4j Desktop.exe",
            r"C:\Program Files\Neo4j Desktop\Neo4j Desktop.exe"
        ]
        
        for path in neo4j_paths:
            expanded_path = os.path.expandvars(path)
            if os.path.exists(expanded_path):
                subprocess.Popen([expanded_path], shell=True)
                self.log("Neo4j Desktop started")
                return
        
        self.log("Neo4j Desktop not found", "ERROR")

    def start_qdrant(self):
        """–ó–∞–ø—É—Å–∫ Qdrant"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Qdrant —á–µ—Ä–µ–∑ Docker –∏–ª–∏ –ø—Ä—è–º–æ
            process = subprocess.Popen(
                ["qdrant", "--config-path", "./qdrant_config.yaml"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NEW_CONSOLE
            )
            self.processes['qdrant'] = process
            self.log("Qdrant started")
        except Exception as e:
            self.log(f"Failed to start Qdrant: {e}", "ERROR")

    def start_backend(self):
        """–ó–∞–ø—É—Å–∫ Backend"""
        try:
            process = subprocess.Popen(
                ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NEW_CONSOLE
            )
            self.processes['backend'] = process
            self.log("Backend started on port 8000")
        except Exception as e:
            self.log(f"Failed to start backend: {e}", "ERROR")

    def start_frontend(self):
        """–ó–∞–ø—É—Å–∫ Frontend"""
        try:
            frontend_dir = Path("web/bldr_dashboard")
            if frontend_dir.exists():
                process = subprocess.Popen(
                    ["npm", "run", "dev"],
                    cwd=str(frontend_dir),
                    stdout=subprocess.PIPE,
                    stderr=subprocess.PIPE,
                    creationflags=subprocess.CREATE_NEW_CONSOLE
                )
                self.processes['frontend'] = process
                self.log("Frontend started on port 5173")
            else:
                self.log("Frontend directory not found", "ERROR")
        except Exception as e:
            self.log(f"Failed to start frontend: {e}", "ERROR")

    def start_rag_training(self):
        """–ó–∞–ø—É—Å–∫ RAG –æ–±—É—á–µ–Ω–∏—è"""
        try:
            process = subprocess.Popen(
                ["python", "enterprise_rag_trainer_safe.py", "--custom_dir", "I:/docs/downloaded", "--fast_mode"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                creationflags=subprocess.CREATE_NEW_CONSOLE
            )
            self.processes['rag_training'] = process
            self.log("RAG Training started")
        except Exception as e:
            self.log(f"Failed to start RAG training: {e}", "ERROR")

    def start_all_components(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.log("Starting all components...", "INFO")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        components_order = ['neo4j', 'qdrant', 'backend', 'frontend']
        
        for component in components_order:
            self.start_component(component)
            time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏

    def stop_all_components(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.log("Stopping all components...", "INFO")
        
        for component in self.components.keys():
            self.stop_component(component)

    def restart_all_components(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.log("Restarting all components...", "INFO")
        self.stop_all_components()
        time.sleep(5)
        self.start_all_components()

    def nuclear_reset(self):
        """–Ø–¥–µ—Ä–Ω—ã–π —Å–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã"""
        result = messagebox.askyesno(
            "Nuclear Reset", 
            "‚ö†Ô∏è WARNING: This will delete ALL trained data!\n\n"
            "Are you sure you want to perform a nuclear reset?"
        )
        
        if result:
            self.log("NUCLEAR RESET INITIATED", "WARNING")
            
            def reset_in_thread():
                try:
                    subprocess.run(["python", "emergency_full_reset.py"], check=True)
                    self.log("Nuclear reset completed", "INFO")
                except Exception as e:
                    self.log(f"Nuclear reset failed: {e}", "ERROR")
            
            threading.Thread(target=reset_in_thread, daemon=True).start()

    def open_url(self, url: str):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        import webbrowser
        webbrowser.open(url)
        self.log(f"Opened: {url}")

    def open_file_manager(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        os.startfile("I:/docs")
        self.log("File manager opened")

    def generate_system_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–∏—Å—Ç–µ–º–µ"""
        self.log("Generating system report...")
        
        def generate_in_thread():
            try:
                subprocess.run(["python", "database_reset_report.py"], check=True)
                self.log("System report generated")
            except Exception as e:
                self.log(f"Failed to generate report: {e}", "ERROR")
        
        threading.Thread(target=generate_in_thread, daemon=True).start()

    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.log_text.delete(1.0, tk.END)

    def save_logs(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤"""
        logs_content = self.log_text.get(1.0, tk.END)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        log_file = f"bldr_system_logs_{timestamp}.txt"
        
        with open(log_file, 'w', encoding='utf-8') as f:
            f.write(logs_content)
        
        self.log(f"Logs saved to: {log_file}")

    def toggle_autoscroll(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏"""
        self.autoscroll = not self.autoscroll
        self.log(f"Autoscroll: {'ON' if self.autoscroll else 'OFF'}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ª–∞—É–Ω—á–µ—Ä–∞"""
        self.log("üèóÔ∏è Bldr Empire v2 System Launcher started")
        self.log("Monitoring system components...")
        
        self.root.mainloop()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    launcher = BldrSystemLauncher()
    launcher.run()

if __name__ == "__main__":
    main()