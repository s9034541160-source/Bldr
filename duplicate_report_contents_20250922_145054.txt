FILE CONTENTS REPORT
================================================================================

📁 C:\Bldr\adaptive_estimate_parser.py
   (No functions found)

📁 C:\Bldr\add_template_endpoints.py
   (No functions found)

📁 C:\Bldr\analyze_duplicates.py
   def categorize_duplicates()
   def extract_functions_from_file()
   def find_duplicates()
   def main()
   def print_categorized_report()
   def scan_directory()

📁 C:\Bldr\async_ai_improvements.py
   def __init__()
   def cleanup_completed_tasks()
   def get_task_status()

📁 C:\Bldr\background_rag_training.py
   def __init__()
   def _print_final_report()
   def _progress_monitor()
   def _signal_handler()
   def discover_files()
   def load_progress()
   def print_progress()
   def process_single_file()
   def save_progress()
   def save_stats()
   def start_background_training()
   def start_training()
   def update_stats()

📁 C:\Bldr\bldr_gui.py
   def __init__()
   def _log_impl()
   def _process_log_queue()
   def _start_services_thread()
   def _stop_services_thread()
   def auto_update_status()
   def clear_logs()
   def create_widgets()
   def get_process_by_port()
   def is_port_in_use()
   def log_message()
   def main()
   def on_closing()
   def start_all_services()
   def stop_all_services()
   def update_status()

📁 C:\Bldr\bldr_gui_manager.py
   def __init__()
   def create_widgets()
   def log_message()
   def refresh_status()
   def start_all_services()
   def start_service()
   def stop_all_services()
   def stop_service()

📁 C:\Bldr\bldr_system_launcher.py
   def __init__()
   def check_components_status()
   def clear_logs()
   def generate_in_thread()
   def generate_system_report()
   def log()
   def main()
   def monitor()
   def nuclear_reset()
   def open_file_manager()
   def open_url()
   def reset_in_thread()
   def restart_all_components()
   def run()
   def save_logs()
   def setup_components_panel()
   def setup_control_panel()
   def setup_logs_panel()
   def setup_status_panel()
   def setup_ui()
   def start_all_components()
   def start_backend()
   def start_component()
   def start_frontend()
   def start_in_thread()
   def start_monitoring()
   def start_neo4j()
   def start_qdrant()
   def start_rag_training()
   def stop_all_components()
   def stop_component()
   def toggle_autoscroll()
   def update_component_status()
   def update_log_display()
   def update_time()

📁 C:\Bldr\clear_all_databases.py
   def clear_all_databases()

📁 C:\Bldr\emergency_full_reset.py
   def delete_processed_files_json()
   def force_stop_neo4j()
   def kill_all_training_processes()
   def main()
   def nuclear_reset_all_caches()
   def nuclear_reset_neo4j()
   def nuclear_reset_qdrant()
   def restart_neo4j()

📁 C:\Bldr\enhanced_structure_extractor.py
   def __init__()
   def _calculate_document_statistics()
   def _calculate_extraction_quality()
   def _calculate_technical_density()
   def _determine_list_level()
   def _estimate_page_number()
   def _extract_all_lists()
   def _extract_all_paragraphs()
   def _extract_all_tables()
   def _extract_document_metadata()
   def _extract_hierarchical_sections()
   def _extract_keywords()
   def _extract_references()
   def _find_parent_section()
   def _has_technical_terms()
   def _is_list_item()
   def _list_to_dict()
   def _match_section_header()
   def _section_to_dict()
   def _table_to_dict()
   def extract_document_structure()
   def extract_full_structure()
   def flatten_sections()
   def get_frontend_compatible_structure()

📁 C:\Bldr\enterprise_rag_trainer_full.py
   def __init__()
   def __init__()
   def __init__()
   def __init__()
   def __init__()
   def _analyze_work_dependencies()
   def _build_work_graph()
   def _calculate_file_hash()
   def _calculate_metadata_quality()
   def _calculate_structural_completeness()
   def _calculate_work_priority()
   def _clean_text()
   def _cleanup_if_needed()
   def _combine_type_detection()
   def _create_fallback_chunks()
   def _detect_sections()
   def _enhance_norms_structure()
   def _enhance_ppr_structure()
   def _enhance_smeta_structure()
   def _enhance_structure_with_sbert()
   def _enhanced_ntd_preprocessing_with_smart_queue()
   def _estimate_work_cost()
   def _estimate_work_duration()
   def _extract_from_docx_enterprise()
   def _extract_from_excel_enterprise()
   def _extract_from_pdf_enterprise()
   def _extract_from_sections()
   def _extract_from_tables()
   def _extract_from_txt_enterprise()
   def _extract_generic_seeds()
   def _extract_norms_metadata()
   def _extract_norms_seeds()
   def _extract_ppr_metadata()
   def _extract_ppr_seeds()
   def _extract_smeta_metadata()
   def _extract_smeta_seeds()
   def _fallback_paragraph_splitting()
   def _fallback_section_detection()
   def _fallback_sentence_splitting()
   def _filter_seed_works()
   def _find_works_by_keywords()
   def _generate_chunk_embeddings()
   def _generate_cluster_title()
   def _generate_final_report()
   def _generate_section_title()
   def _get_cache_key()
   def _get_file_priority()
   def _get_work_templates_by_type()
   def _init_chunker()
   def _init_databases()
   def _init_sbert_model()
   def _is_valid_file()
   def _load_cache_index()
   def _load_processed_files()
   def _log_progress()
   def _multi_level_section_detection()
   def _normalize_russian_text()
   def _ntd_preprocessing()
   def _ocr_with_poppler_fallback()
   def _pdftoppm_ocr_full()
   def _pdftotext_extract()
   def _process_generic_specific()
   def _process_norms_specific()
   def _process_ppr_specific()
   def _process_single_file()
   def _process_smeta_specific()
   def _quick_doc_type_detection()
   def _regex_type_detection()
   def _regex_works_extraction()
   def _remove_cache_entry()
   def _save_cache_index()
   def _save_chunks_to_json()
   def _save_sequences_to_neo4j()
   def _sbert_hierarchy_analysis()
   def _sbert_markup_fallback()
   def _sbert_section_detection()
   def _sbert_table_detection()
   def _sbert_type_detection()
   def _sbert_works_extraction()
   def _semantic_section_clustering()
   def _simple_clustering()
   def _split_into_sentences()
   def _stage10_type_specific_processing()
   def _stage11_work_sequence_extraction()
   def _stage12_save_work_sequences()
   def _stage13_smart_chunking()
   def _stage14_save_to_qdrant()
   def _stage1_initial_validation()
   def _stage2_duplicate_checking()
   def _stage3_text_extraction()
   def _stage4_document_type_detection()
   def _stage5_5_file_organization()
   def _stage5_structural_analysis()
   def _stage6_regex_to_sbert()
   def _stage7_sbert_markup()
   def _stage8_metadata_extraction()
   def _stage9_quality_control()
   def _stage_0_smart_file_scanning_and_preprocessing()
   def _structural_analysis_fallback()
   def _update_processed_files()
   def _validate_and_rank_works()
   def _validate_sections()
   def _validate_works_with_sbert()
   def calculate_priority()
   def check_and_install_dependencies()
   def create_hierarchical_chunks()
   def get()
   def get_metrics()
   def log_cache_hit()
   def log_cache_miss()
   def log_document()
   def log_error()
   def query()
   def query_with_filters()
   def set()
   def setup_logging()
   def sort_files()
   def start_enterprise_training()
   def train()

📁 C:\Bldr\file_organizer.py
   def __init__()
   def _create_folder_structure()
   def _determine_target_folder()
   def _get_move_reason()
   def _get_unique_target_path()
   def _load_moves_history()
   def _save_moves_history()
   def _update_stats()
   def get_organization_stats()
   def organize_document_file()
   def organize_file()
   def undo_last_move()

📁 C:\Bldr\find_duplicates.py
   def extract_functions_from_file()
   def find_duplicates()
   def main()
   def print_duplicate_report()
   def print_file_contents()
   def save_duplicate_report()
   def save_file_contents()
   def scan_directory()

📁 C:\Bldr\generate_final_code.py
   def collect_python_files()
   def generate_final_code()
   def should_include_directory()
   def should_include_file()

📁 C:\Bldr\generate_full_code.py
   def generate_full_code()

📁 C:\Bldr\inspect_task_definition.py
   def inspect_task_definition()

📁 C:\Bldr\integrated_structure_chunking_system.py
   def __init__()
   def __init__()
   def __init__()
   def _build_sections_hierarchy()
   def _calculate_chunk_quality()
   def _calculate_enhanced_statistics()
   def _calculate_extraction_quality_score()
   def _calculate_technical_density()
   def _can_combine_chunks()
   def _count_technical_terms()
   def _create_list_chunks()
   def _create_orphan_chunks()
   def _create_section_chunks()
   def _create_table_chunks()
   def _determine_list_level()
   def _estimate_page()
   def _extract_all_elements()
   def _extract_document_keywords()
   def _extract_document_references()
   def _extract_enhanced_lists()
   def _extract_enhanced_metadata()
   def _extract_enhanced_tables()
   def _extract_paragraphs()
   def _format_list_content()
   def _format_sections_for_api()
   def _format_table_content()
   def _fragment_large_list()
   def _fragment_large_section()
   def _fragment_large_table()
   def _gather_section_content()
   def _get_chunk_types_stats()
   def _has_technical_terms()
   def _match_list_line()
   def _match_section_line()
   def _optimize_chunks()
   def create_intelligent_chunks()
   def extract_complete_structure()
   def format_section_recursive()
   def process_document()
   def process_document_with_intelligent_chunking()
   def to_dict()

📁 C:\Bldr\interactive_rag_training.py
   def __init__()
   def discover_files()
   def main()
   def print_file_header()
   def print_file_summary()
   def print_final_report()
   def print_processing_results()
   def print_progress_stats()
   def process_single_file()
   def start_training()
   def update_global_stats()

📁 C:\Bldr\main.py
   def _verify_password()
   def authenticate_user()
   def create_access_token()
   def load_users_db()
   def run_server()
   def run_training()
   def run_training()
   def verify_api_token()

📁 C:\Bldr\metrics_patch.py
   (No functions found)

📁 C:\Bldr\minimal_celery_check.py
   def check_celery_config()

📁 C:\Bldr\monitor.py
   def check_progress()

📁 C:\Bldr\monitor_training.py
   def get_auth_headers()
   def main()
   def monitor_system_resources()
   def test_search_progress()

📁 C:\Bldr\monster_rag_trainer_full_power.py
   def __init__()
   def _build_priority_queue()
   def _check_gpu()
   def _classify_document()
   def _generate_monster_report()
   def _get_file_hash()
   def _initialize_monster_systems()
   def _is_valid_document()
   def _monster_file_discovery()
   def _organize_files_by_type()
   def _parallel_monster_processing()
   def _performance_monitor()
   def _print_live_stats()
   def _process_single_file_monster()
   def _read_file_content()
   def _remove_duplicate_files()
   def _update_processing_speed()
   def launch_monster()
   def unleash_the_monster()

📁 C:\Bldr\quick_status.py
   def check_api()
   def check_files()
   def check_search()
   def check_training()
   def main()

📁 C:\Bldr\rag_api_models.py
   (No functions found)

📁 C:\Bldr\rag_training_lock.py
   def __enter__()
   def __exit__()
   def __init__()
   def acquire_lock()
   def ensure_single_training_instance()
   def release_lock()

📁 C:\Bldr\recovery_script.py
   def clean_problematic_cache()
   def full_reset()
   def restart_neo4j()
   def resume_training()
   def stop_training()

📁 C:\Bldr\recursive_hierarchical_chunker.py
   def __init__()
   def _calculate_completeness()
   def _calculate_content_density()
   def _calculate_structural_quality()
   def _count_technical_terms()
   def _create_list_chunk()
   def _create_paragraph_chunk()
   def _create_section_chunk()
   def _create_table_chunk()
   def _establish_parent_child_relationships()
   def _format_list_content()
   def _format_table_content()
   def _gather_full_section_content()
   def _generate_chunk_id()
   def _process_section_recursively()
   def _split_into_paragraph_chunks()
   def calculate_metrics()
   def create_hierarchical_chunks()
   def create_hierarchical_chunks_from_structure()
   def to_api_format()

📁 C:\Bldr\regex_patterns.py
   def detect_document_type_with_symbiosis()
   def extract_finances_from_rubern_paragraphs()
   def extract_materials_from_rubern_tables()
   def extract_works_candidates()
   def light_rubern_scan()

📁 C:\Bldr\reset_all_databases.py
   def create_lockfile_system()
   def create_reset_and_train_script()
   def create_safe_training_script()
   def kill_training_processes()
   def main()
   def reset_json_cache()
   def reset_neo4j_database()
   def reset_training_logs()
   def reset_vector_database()

📁 C:\Bldr\reset_databases.py
   def reset_databases()

📁 C:\Bldr\start_backend.py
   (No functions found)

📁 C:\Bldr\training_monitor.py
   def monitor_training()

📁 C:\Bldr\working_frontend_rag_integration.py
   def __init__()
   def __init__()
   def _adapt_for_frontend_api()
   def _assess_chunk_quality()
   def _calculate_average_chunk_quality()
   def _calculate_chunk_importance()
   def _calculate_chunking_quality()
   def _calculate_structure_quality()
   def _create_error_response()
   def _create_improved_chunks()
   def _create_size_based_chunks()
   def _extract_chunk_keywords()
   def _extract_improved_sections()
   def _extract_improved_tables()
   def _extract_keywords()
   def _extract_lists()
   def _extract_reliable_metadata()
   def _format_chunks_for_rag()
   def _format_sections_for_navigation()
   def _format_tables_for_frontend()
   def _generate_document_id()
   def _get_chunk_types_distribution()
   def _parse_table_content()
   def _process_with_intelligent_system()
   def _process_with_reliable_fallback()
   def _simplified_training()
   def _split_large_section()
   def create_working_rag_trainer()
   def get_chunks_for_rag()
   def get_document_chunks_api()
   def get_document_structure_api()
   def process_document_api_compatible()
   def process_document_for_frontend()
   def process_single_document()
   def train()

📁 C:\Bldr\ARCHIVE\change_neo4j_password.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\check_db.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\check_neo4j_status.py
   def check_neo4j_connection()
   def check_training_progress()
   def main()
   def suggest_action()

📁 C:\Bldr\ARCHIVE\check_status.py
   def check_api_status()
   def check_dashboard_status()
   def check_node_processes()
   def check_python_processes()
   def main()

📁 C:\Bldr\ARCHIVE\check_tasks.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\check_telegram_token.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\check_training_status.py
   def check_api_status()
   def check_file_activity()
   def main()

📁 C:\Bldr\ARCHIVE\clean_start_training.py
   def check_neo4j_status()
   def main()
   def start_neo4j()
   def start_safe_training()
   def verify_clean_state()
   def wait_for_neo4j()

📁 C:\Bldr\ARCHIVE\comprehensive_celery_test.py
   def test_end_to_end_celery()

📁 C:\Bldr\ARCHIVE\comprehensive_debug.py
   def main()

📁 C:\Bldr\ARCHIVE\comprehensive_debug_v2.py
   def main()

📁 C:\Bldr\ARCHIVE\comprehensive_neo4j_test.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\consolidation_plan.py
   def create_consolidation_plan()
   def print_consolidation_plan()

📁 C:\Bldr\ARCHIVE\continue_training.py
   def continue_rag_training()
   def progress_callback()

📁 C:\Bldr\ARCHIVE\create_test_audio.py
   def create_test_wav()

📁 C:\Bldr\ARCHIVE\database_reset_report.py
   def generate_reset_report()

📁 C:\Bldr\ARCHIVE\debug_auth.py
   def create_access_token()

📁 C:\Bldr\ARCHIVE\debug_auth_issues.py
   def analyze_backend_auth()
   def analyze_frontend_auth_flow()
   def check_jwt_configuration()
   def main()
   def test_specific_auth_scenarios()

📁 C:\Bldr\ARCHIVE\debug_gui.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\debug_llm.py
   def test_llm_connection()

📁 C:\Bldr\ARCHIVE\demonstrate_ntd_integration.py
   def demonstrate_ntd_system()
   def demonstrate_rag_integration()

📁 C:\Bldr\ARCHIVE\demonstrate_pipeline.py
   def demonstrate_pipeline()

📁 C:\Bldr\ARCHIVE\demonstrate_plugin_integration.py
   def demonstrate_plugin_integration()

📁 C:\Bldr\ARCHIVE\demo_russian_ntd.py
   def demo_document_type_detection()
   def demo_norms_updater()
   def demo_rag_trainer()
   def demo_regex_patterns()
   def main()

📁 C:\Bldr\ARCHIVE\detailed_debug.py
   def main()

📁 C:\Bldr\ARCHIVE\diagnose_neo4j.py
   def check_port_connection()
   def main()
   def test_first_time_setup()
   def test_neo4j_versions()
   def update_env_config()

📁 C:\Bldr\ARCHIVE\direct_auth_test.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\direct_token_test.py
   def __init__()

📁 C:\Bldr\ARCHIVE\direct_train.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\e2e_test_extended_timeouts.py
   def __init__()
   def generate_detailed_summary()
   def log_result()

📁 C:\Bldr\ARCHIVE\enhanced_bldr_rag_trainer_part2.py
   def _extract_from_djvu()
   def _extract_from_docx()
   def _extract_from_pdf()
   def _extract_from_txt()
   def _get_file_hash()
   def _ocr_fallback()
   def _parallel_batch_processing()
   def _process_file_batch()
   def _sequential_processing()
   def _stage_0_smart_file_scanning()
   def _stage_1_ntd_preprocessing()
   def _stage_2_file_validation()
   def _stage_3_duplicate_check()
   def _stage_4_enhanced_text_extraction()
   def _stage_5_enhanced_document_type_detection()
   def _stage_6_structural_analysis()
   def _stage_7_rubern_markup_generation()
   def process_single_file()
   def train()

📁 C:\Bldr\ARCHIVE\enhanced_bldr_rag_trainer_part3.py
   def _assess_work_quality()
   def _basic_work_extraction()
   def _calculate_readability_score()
   def _calculate_total_improvement()
   def _calculate_work_priority()
   def _detect_technical_content()
   def _estimate_work_duration()
   def _extract_document_date()
   def _extract_document_number()
   def _extract_document_title()
   def _extract_keywords()
   def _extract_organization()
   def _generate_final_report()
   def _get_files_by_type_stats()
   def _infer_work_dependencies()
   def _process_generic_document()
   def _process_norms_document()
   def _process_ppr_document()
   def _process_rd_document()
   def _process_smeta_document()
   def _simple_chunking_fallback()
   def _stage_10_type_specific_processing()
   def _stage_11_enhanced_work_extraction()
   def _stage_12_neo4j_storage()
   def _stage_13_enhanced_chunking()
   def _stage_14_enhanced_vectorization()
   def _stage_8_enhanced_metadata_extraction()
   def _stage_9_enhanced_quality_control()
   def _store_in_faiss()
   def _store_in_qdrant()
   def _store_to_json_fallback()

📁 C:\Bldr\ARCHIVE\enhanced_rag_improvements.py
   def __init__()
   def __init__()
   def __init__()
   def __init__()
   def _clean_work_description()
   def _contains_work_indicators()
   def _detect_document_type()
   def _load_existing_data()
   def _save_updated_data()
   def _scan_document_files()
   def _semantic_chunking()
   def _split_into_sentences()
   def _split_long_section()
   def _structure_based_chunking()
   def _update_categories()
   def _validate_and_enhance_chunks()
   def apply_improvements_to_trainer()
   def categorize_document()
   def enhanced_categorization()
   def enhanced_chunking()
   def enhanced_stage7_rubern_markup()
   def extract_works_with_sbert()
   def smart_chunk()
   def update_database()

📁 C:\Bldr\ARCHIVE\file_organization_report.py
   def generate_organization_report()

📁 C:\Bldr\ARCHIVE\final_celery_demo.py
   def demonstrate_real_celery()

📁 C:\Bldr\ARCHIVE\final_e2e_test.py
   def __init__()
   def generate_summary()
   def log_result()

📁 C:\Bldr\ARCHIVE\final_test.py
   def test_all_components()

📁 C:\Bldr\ARCHIVE\final_unification_report.py
   def generate_final_report()
   def query()

📁 C:\Bldr\ARCHIVE\final_verification.py
   def verify_end_to_end()

📁 C:\Bldr\ARCHIVE\find_duplicate_tools.py
   def find_duplicate_tools()
   def query()
   def similarity()

📁 C:\Bldr\ARCHIVE\fixed_enhanced_bldr_rag_trainer.py
   def __init__()
   def _analyze_work_dependencies()
   def _basic_structural_analysis()
   def _build_work_graph()
   def _calculate_file_hash()
   def _calculate_metadata_quality()
   def _calculate_work_priority()
   def _clean_text()
   def _combine_type_detection()
   def _create_fallback_chunks()
   def _enhance_norms_structure()
   def _enhance_ppr_structure()
   def _enhance_smeta_structure()
   def _enhance_structure_with_sbert()
   def _estimate_work_cost()
   def _estimate_work_duration()
   def _extract_from_docx()
   def _extract_from_excel()
   def _extract_from_pdf()
   def _extract_from_sections()
   def _extract_from_tables()
   def _extract_from_txt()
   def _extract_generic_seeds()
   def _extract_norms_metadata()
   def _extract_norms_seeds()
   def _extract_ppr_metadata()
   def _extract_ppr_seeds()
   def _extract_smeta_metadata()
   def _extract_smeta_seeds()
   def _filter_seed_works()
   def _generate_chunk_embeddings()
   def _generate_final_report()
   def _get_file_priority()
   def _init_databases()
   def _init_sbert_model()
   def _is_valid_file()
   def _load_processed_files()
   def _ntd_preprocessing()
   def _ocr_fallback_pdf()
   def _process_generic_specific()
   def _process_norms_specific()
   def _process_ppr_specific()
   def _process_single_file()
   def _process_smeta_specific()
   def _regex_type_detection()
   def _save_chunks_to_json()
   def _save_sequences_to_neo4j()
   def _sbert_markup_fallback()
   def _sbert_type_detection()
   def _stage10_type_specific_processing()
   def _stage11_work_sequence_extraction()
   def _stage12_save_work_sequences()
   def _stage13_smart_chunking()
   def _stage14_save_to_qdrant()
   def _stage1_initial_validation()
   def _stage2_duplicate_checking()
   def _stage3_text_extraction()
   def _stage4_document_type_detection()
   def _stage5_structural_analysis()
   def _stage6_regex_to_sbert()
   def _stage7_sbert_markup()
   def _stage8_metadata_extraction()
   def _stage9_quality_control()
   def _stage_0_smart_file_scanning_and_preprocessing()
   def _tesseract_ocr_pdf()
   def _update_processed_files()
   def _validate_works_with_sbert()
   def setup_logging()
   def start_fixed_training()
   def train()

📁 C:\Bldr\ARCHIVE\fix_frontend_issues.py
   def fix_chat_history()
   def fix_file_manager()
   def fix_protools_auth()
   def fix_telegram_bot()
   def fix_tender_analysis()
   def main()

📁 C:\Bldr\ARCHIVE\fix_indentation.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\fix_line_breaks.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\fix_neo4j_connection.py
   def main()
   def test_common_passwords()
   def update_env_password()
   def wait_for_auth_unblock()

📁 C:\Bldr\ARCHIVE\fix_neo4j_training_issue.py
   def create_recovery_script()
   def diagnose_neo4j_issue()
   def main()
   def suggest_solutions()

📁 C:\Bldr\ARCHIVE\fix_networkx_serialization.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\fix_patterns.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\fix_patterns_section.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\focused_celery_test.py
   def test_celery_basics()

📁 C:\Bldr\ARCHIVE\frontend_compatible_rag_integration.py
   def __init__()
   def __init__()
   def _adapt_for_frontend_api()
   def _calculate_chunk_importance()
   def _create_basic_chunks()
   def _create_error_response()
   def _extract_basic_metadata()
   def _extract_basic_sections()
   def _extract_basic_tables()
   def _extract_chunk_keywords()
   def _format_chunks_for_rag()
   def _format_sections_for_navigation()
   def _format_tables_for_frontend()
   def _generate_document_id()
   def _process_with_fallback_system()
   def _process_with_intelligent_system()
   def _simplified_training()
   def create_frontend_compatible_rag_trainer()
   def get_chunks_for_rag()
   def get_document_chunks_api()
   def get_document_structure_api()
   def integrate_with_enhanced_trainer()
   def process_document_api_compatible()
   def process_document_for_frontend()
   def process_single_document()
   def train()

📁 C:\Bldr\ARCHIVE\frontend_integration_plan.py
   def create_frontend_integration_plan()
   def print_frontend_plan()

📁 C:\Bldr\ARCHIVE\frontend_integration_report.py
   def generate_frontend_integration_report()

📁 C:\Bldr\ARCHIVE\full_rag_training.py
   def full_rag_training()
   def progress_callback()

📁 C:\Bldr\ARCHIVE\gpu_test.py
   def test_gpu_rag()

📁 C:\Bldr\ARCHIVE\gui_init_test.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\gui_step_by_step_test.py
   def main()

📁 C:\Bldr\ARCHIVE\import_test.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\install_deps.py
   def install_package()
   def main()

📁 C:\Bldr\ARCHIVE\install_whisper.py
   def check_whisper()
   def install_whisper()
   def main()

📁 C:\Bldr\ARCHIVE\integration_test.py
   def test_full_integration()

📁 C:\Bldr\ARCHIVE\isolated_celery_test.py
   def test_isolated_celery()

📁 C:\Bldr\ARCHIVE\minimal_celery_test.py
   def test_minimal_celery()

📁 C:\Bldr\ARCHIVE\minimal_tk_test.py
   def main()

📁 C:\Bldr\ARCHIVE\path_test.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\quick_neo4j_fix.py
   def quick_fix()

📁 C:\Bldr\ARCHIVE\quick_neo4j_test.py
   def test_passwords()

📁 C:\Bldr\ARCHIVE\quick_query_test.py
   def test_query()

📁 C:\Bldr\ARCHIVE\quick_search_test.py
   def test_quick_search()

📁 C:\Bldr\ARCHIVE\quick_test_fixed.py
   def progress_callback()
   def quick_test()

📁 C:\Bldr\ARCHIVE\reset_neo4j_auth.py
   def check_neo4j_processes()
   def kill_neo4j_processes()
   def main()

📁 C:\Bldr\ARCHIVE\reset_neo4j_password.py
   def find_neo4j_path()
   def main()
   def reset_neo4j_password()

📁 C:\Bldr\ARCHIVE\restart_and_test.py
   def kill_python_servers()
   def main()
   def quick_test()
   def start_server()

📁 C:\Bldr\ARCHIVE\restore_ntd.py
   def backup_current_base()
   def create_directories()
   def create_ntd_catalog()
   def create_placeholder_files()
   def download_sample_ntd()
   def main()

📁 C:\Bldr\ARCHIVE\run_clean.py
   def create_backup()
   def main()

📁 C:\Bldr\ARCHIVE\run_final_test.py
   def check_server_status()
   def main()
   def run_architecture_test()
   def show_final_report()

📁 C:\Bldr\ARCHIVE\run_ntd_rag_training.py
   def find_documents()
   def main()

📁 C:\Bldr\ARCHIVE\run_rag_training.py
   def main()

📁 C:\Bldr\ARCHIVE\safe_rag_training.py
   def main()

📁 C:\Bldr\ARCHIVE\setup_complete.py
   def check_env_file()
   def check_file_structure()
   def check_frontend()
   def create_uploads_dir()
   def generate_startup_info()
   def install_python_deps()
   def main()
   def run_command()
   def run_integration_test()

📁 C:\Bldr\ARCHIVE\setup_neo4j.py
   def check_neo4j_connection()
   def main()
   def update_env_file()

📁 C:\Bldr\ARCHIVE\setup_neo4j_manual.py
   def check_neo4j_running()
   def main()
   def update_env_file()

📁 C:\Bldr\ARCHIVE\setup_poppler.py
   def setup_poppler()
   def test_poppler()

📁 C:\Bldr\ARCHIVE\setup_telegram_bot.py
   def setup_telegram_bot_token()

📁 C:\Bldr\ARCHIVE\show_implementation.py
   def show_file_content()
   def show_implementation()

📁 C:\Bldr\ARCHIVE\simple_ai_test.py
   def get_auth_token()
   def test_ai_request()

📁 C:\Bldr\ARCHIVE\simple_api_test.py
   def test_api()

📁 C:\Bldr\ARCHIVE\simple_auth_test.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\simple_celery_test.py
   def test_celery_basics()

📁 C:\Bldr\ARCHIVE\simple_check.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\simple_gui_test.py
   def main()

📁 C:\Bldr\ARCHIVE\simple_gui_test_v2.py
   def main()
   def on_closing()

📁 C:\Bldr\ARCHIVE\simple_test_api.py
   def verify_token()

📁 C:\Bldr\ARCHIVE\simple_tkinter_test.py
   def main()
   def on_button_click()
   def on_closing()

📁 C:\Bldr\ARCHIVE\stage5_completion_report.py
   def generate_stage5_completion_report()

📁 C:\Bldr\ARCHIVE\start_all_services.py
   def main()
   def start_backend()
   def start_frontend()
   def start_telegram_bot()

📁 C:\Bldr\ARCHIVE\start_api_server.py
   def check_port()
   def start_server()

📁 C:\Bldr\ARCHIVE\start_api_test.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\start_backend.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\start_fast_training.py
   def create_test_token()
   def start_fast_training()

📁 C:\Bldr\ARCHIVE\start_full_rag_training.py
   def create_test_token()
   def show_training_comparison()
   def start_full_rag_training()

📁 C:\Bldr\ARCHIVE\start_server_and_test.py
   def main()
   def start_server()
   def test_chain()
   def wait_for_server()

📁 C:\Bldr\ARCHIVE\start_training_now.py
   def start_training_now()

📁 C:\Bldr\ARCHIVE\start_training_no_neo4j.py
   def main()
   def start_training_without_neo4j()
   def update_env_skip_neo4j()

📁 C:\Bldr\ARCHIVE\system_health_check.py
   def check_coordinator_agent()
   def check_file_exists()
   def check_role_agents()
   def check_server_api()
   def check_specialist_agents()
   def check_tools_adapter()
   def system_health_check()

📁 C:\Bldr\ARCHIVE\test_api.py
   def get_auth_token()
   def test_chat_endpoint()

📁 C:\Bldr\ARCHIVE\test_coordinator.py
   def main()

📁 C:\Bldr\ARCHIVE\test_coordinator_simple.py
   def main()

📁 C:\Bldr\ARCHIVE\test_core_import.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\test_multimedia.py
   def test_image_processing()
   def test_voice_processing()

📁 C:\Bldr\ARCHIVE\test_passwords.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\test_super_smart_coordinator.py
   def main()
   def test_coordinator()

📁 C:\Bldr\ARCHIVE\test_telegram_bot.py
   def get_auth_headers()
   def test_image_processing()
   def test_voice_processing()

📁 C:\Bldr\ARCHIVE\test_telegram_bot_fixes.py
   def check_backend_running()
   def test_api_chat_endpoint()

📁 C:\Bldr\ARCHIVE\test_tools.py
   def main()

📁 C:\Bldr\ARCHIVE\test_voice_processing.py
   def test_voice_processing_with_file()

📁 C:\Bldr\ARCHIVE\tkinter_test.py
   def main()

📁 C:\Bldr\ARCHIVE\tools_discovery_report.py
   def generate_tools_report()
   def query()

📁 C:\Bldr\ARCHIVE\train_downloaded_files.py
   def get_auth_headers()
   def main()
   def start_training()
   def test_query_after_training()

📁 C:\Bldr\ARCHIVE\ui_placement_analysis.py
   def analyze_ui_placement()
   def query()

📁 C:\Bldr\ARCHIVE\ui_placement_final_report.py
   def generate_ui_placement_report()
   def query()

📁 C:\Bldr\ARCHIVE\verify_auth_disabled.py
   def verify_auth_disabled()

📁 C:\Bldr\ARCHIVE\verify_celery_task.py
   def verify_celery_task()

📁 C:\Bldr\ARCHIVE\verify_config.py
   def main()

📁 C:\Bldr\ARCHIVE\verify_neo4j_connection.py
   def verify_neo4j_connection()

📁 C:\Bldr\ARCHIVE\verify_sbert_integration.py
   def verify_sbert_integration()

📁 C:\Bldr\ARCHIVE\verify_task_registration.py
   def verify_task_registration()

📁 C:\Bldr\ARCHIVE\backup_before_cleanup_2025-09-21_21-21-24\bldr_api.py
   def __init__()
   def _ai_active_set()
   def _ai_completed_set()
   def _ai_task_key()
   def _ai_task_update()
   def _dep()
   def _ensure_users_db_dir()
   def _finalize_ai_task()
   def _get_ai_redis()
   def _hash_password()
   def _verify_password()
   def authenticate_user()
   def create_access_token()
   def format_file_error()
   def format_ifc_error()
   def load_users_db()
   def require_role()
   def save_users_db()
   def update_callback()
   def update_callback()
   def update_norms_job()
   def verify_api_token()

📁 C:\Bldr\ARCHIVE\backup_before_cleanup_2025-09-21_21-21-24\complete_enhanced_bldr_rag_trainer.py
   def __init__()
   def _find_files()
   def _generate_demo_report()
   def _process_file_demo()
   def load_module_from_file()
   def main()
   def start_enhanced_training()
   def train()

📁 C:\Bldr\ARCHIVE\backup_before_cleanup_2025-09-21_21-21-24\enhanced_bldr_rag_trainer.py
   def __init__()
   def __init__()
   def __init__()
   def __init__()
   def __init__()
   def __init__()
   def __init__()
   def __init__()
   def __init__()
   def _analyze_work_relevance()
   def _calculate_chunk_quality()
   def _clean_work_description()
   def _cleanup_if_needed()
   def _contains_work_indicators()
   def _fallback_regex_extraction()
   def _get_cache_key()
   def _init_advanced_embeddings()
   def _init_basic_embeddings()
   def _init_faiss()
   def _init_qdrant()
   def _load_cache_index()
   def _load_processed_files()
   def _overlap_chunking()
   def _quick_doc_type_detection()
   def _remove_cache_entry()
   def _save_cache_index()
   def _save_processed_files()
   def _semantic_chunking()
   def _split_into_sentences()
   def _split_large_section()
   def _structure_based_chunking()
   def _table_based_chunking()
   def _validate_and_enhance_chunks()
   def calculate_priority()
   def categorize_document()
   def detect_document_type_with_symbiosis()
   def extract_finances_from_rubern_paragraphs()
   def extract_materials_from_rubern_tables()
   def extract_works_candidates()
   def extract_works_with_sbert()
   def get()
   def get_metrics()
   def get_neo4j_driver_with_retry()
   def get_qdrant_client_with_retry()
   def light_rubern_scan()
   def log_cache_hit()
   def log_cache_miss()
   def log_document()
   def log_error()
   def ntd_preprocess()
   def set()
   def smart_chunk()
   def sort_files()

📁 C:\Bldr\ARCHIVE\backup_before_cleanup_2025-09-21_21-21-24\enterprise_rag_trainer_safe.py
   def __enter__()
   def __exit__()
   def __init__()
   def _signal_handler()
   def acquire_lock()
   def check_neo4j_connection()
   def check_system_requirements()
   def main()
   def release_lock()
   def safe_import_trainer()

📁 C:\Bldr\ARCHIVE\backup_before_cleanup_2025-09-21_21-21-24\master_tools_system.py
   def __init__()
   def __init__()
   def __init__()
   def _analyze_bentley_model()
   def _analyze_image()
   def _analyze_tender()
   def _autocad_export()
   def _calculate_critical_path()
   def _calculate_financial_metrics()
   def _check_normative()
   def _comprehensive_analysis()
   def _create_bar_chart()
   def _create_document()
   def _create_gantt_chart()
   def _create_gpp()
   def _create_pie_chart()
   def _extract_financial_data()
   def _extract_text_from_pdf()
   def _extract_works_nlp()
   def _import_tool_methods()
   def _monte_carlo_sim()
   def _parse_gesn_estimate()
   def _register_all_tools()
   def _search_rag_database()
   def _update_stats()
   def _wrap_legacy_tool()
   def _wrap_letter_generator()
   def _wrap_letter_improver()
   def add_warning()
   def execute()
   def execute_tool()
   def execute_tool()
   def execute_tool_chain()
   def get_categories()
   def get_execution_stats()
   def get_master_tools_system()
   def get_stats()
   def get_tool()
   def get_tool_info()
   def get_tool_info()
   def is_success()
   def list_all_tools()
   def list_available_tools()
   def list_tools()
   def register()
   def set_metadata()
   def to_dict()
   def validate()
   def wrapper()
   def wrapper()
   def wrapper()

📁 C:\Bldr\ARCHIVE\backup_before_cleanup_2025-09-21_21-21-24\meta_tools_api.py
   (No functions found)

📁 C:\Bldr\ARCHIVE\backup_before_cleanup_2025-09-21_21-21-24\projects_api.py
   def __init__()
   def add_files_to_project()
   def create_project()
   def delete_project()
   def delete_project_file()
   def detect_file_type()
   def get_project()
   def get_project_files()
   def get_project_results()
   def get_projects()
   def save_project_result()
   def scan_directory_for_project()
   def scan_project_files()
   def update_project()

📁 C:\Bldr\ARCHIVE\backup_before_cleanup_2025-09-21_21-21-24\tools_api.py
   def _job_key()
   def convert_params_to_master_format()
   def create_job()
   def get_redis()
   def process_query()
   def update_job()

📁 C:\Bldr\ARCHIVE\backup_before_cleanup_2025-09-21_21-21-24\unified_tools_system.py
   def __init__()
   def _execute_legacy_tool()
   def _execute_tts_tool()
   def _register_all_tools()
   def _update_execution_stats()
   def add_warning()
   def execute_tool()
   def execute_tool()
   def execute_tool_chain()
   def get_categories()
   def get_execution_stats()
   def get_tool_info()
   def get_tool_signature()
   def is_success()
   def list_available_tools()
   def list_tools()
   def register_tool()
   def set_metadata()
   def to_dict()
   def validate_tool_call()

📁 C:\Bldr\ARCHIVE\tests\api_test.py
   def test_basic_functionality()

📁 C:\Bldr\ARCHIVE\tests\category_filtering_test.py
   def test_category_filtering()

📁 C:\Bldr\ARCHIVE\tests\comprehensive_test_suite.py
   def run_tests()
   def setUpClass()
   def tearDownClass()
   def test_01_rag_pipeline_initialization()
   def test_02_model_manager_initialization()
   def test_03_tools_system_initialization()
   def test_04_document_processing()
   def test_05_tool_execution()
   def test_06_coordinator_integration()
   def test_07_plugin_functionality()
   def test_08_api_endpoints()
   def test_09_performance_metrics()

📁 C:\Bldr\ARCHIVE\tests\coordinator_test.py
   def __init__()
   def execute_tool_call()
   def get_model_client()
   def query()
   def test_analyze_request_complexity()
   def test_coordinator_plan_generation()
   def test_coordinator_synthesis()
   def test_coordinator_tool_execution()
   def test_history_management()
   def test_process_request_integration()

📁 C:\Bldr\ARCHIVE\tests\e2e_letter_test.py
   def test_letter_generation_api()

📁 C:\Bldr\ARCHIVE\tests\final_verification_test.py
   def test_data_files_exist()
   def test_error_handling_implemented()
   def test_imports_work_correctly()
   def test_logging_implemented()
   def test_optional_dependencies_handled()
   def test_paths_are_configurable()

📁 C:\Bldr\ARCHIVE\tests\frontend_integration_test.py
   def test_api_service_integration()
   def test_backend_api_endpoints()
   def test_full_integration_flow()
   def test_pro_features_component_structure()
   def test_projects_component_structure()

📁 C:\Bldr\ARCHIVE\tests\full_empire_test.py
   def test_14_stage_pipeline_symbiosis()
   def test_auto_budget_calculation()
   def test_coordinator_json_plan_execution()
   def test_model_manager_preloading()
   def test_ppr_generation_with_pdf_download()
   def test_query_with_viol99_tezis()
   def test_tender_analysis_with_roles()
   def test_tools_system_integration()

📁 C:\Bldr\ARCHIVE\tests\full_project_integration_test.py
   def __init__()
   def setUp()
   def test_full_project_integration_flow()
   def test_project_tool_integration_scenarios()

📁 C:\Bldr\ARCHIVE\tests\full_project_tool_integration_test.py
   def create_test_smeta_file()
   def test_full_project_tool_integration()

📁 C:\Bldr\ARCHIVE\tests\integration_test.py
   def __init__()
   def get_model_client()
   def query()
   def test_coordinator_process_request()
   def test_coordinator_tool_execution()

📁 C:\Bldr\ARCHIVE\tests\model_manager_test.py
   def test_get_all_roles()
   def test_get_capabilities_prompt()
   def test_get_model_client()
   def test_get_model_stats()
   def test_model_manager_initialization()

📁 C:\Bldr\ARCHIVE\tests\project_integration_test.py
   def __init__()
   def test_project_functionality()

📁 C:\Bldr\ARCHIVE\tests\pro_features_test.py
   def test_auto_budget_generation()
   def test_estimate_parser_enhanced()
   def test_gpp_creation()
   def test_official_letter_generation()
   def test_ppr_generation()

📁 C:\Bldr\ARCHIVE\tests\pro_tools_auth_test.py
   def test_frontend_auth()
   def test_pro_tools_auth()

📁 C:\Bldr\ARCHIVE\tests\pro_tools_real_test.py
   def __init__()
   def execute_tool()
   def test_budget_export_real_excel()
   def test_estimate_parser_real_parsing()
   def test_gesn_calc()
   def test_gpp_real_critical_path()
   def test_letter_generation()
   def test_ppr_gen()
   def test_tender_analysis_real_pipeline()
   def test_tools_system_integration()

📁 C:\Bldr\ARCHIVE\tests\simple_project_test.py
   def test_project_functionality()

📁 C:\Bldr\ARCHIVE\tests\simple_test.py
   def test_document_type_patterns()
   def test_norms_updater_sources()
   def test_seed_work_patterns()

📁 C:\Bldr\ARCHIVE\tests\super_features_test.py
   def test_autocad_export()
   def test_bentley_model_analysis()
   def test_error_handling()
   def test_monte_carlo_simulation()

📁 C:\Bldr\ARCHIVE\tests\test_bldr_empire.py
   def mock_env_vars()
   def temp_dir()
   def test_api_health_endpoint()
   def test_api_query_endpoint()
   def test_bldr_rag_trainer_initialization()
   def test_coordinator_initialization()
   def test_document()
   def test_document_type_detection()
   def test_metadata_extraction()
   def test_model_manager_initialization()
   def test_structural_analysis()
   def test_tools_system_initialization()
   def test_work_extraction()
   def trainer()

📁 C:\Bldr\ARCHIVE\tests\test_budget_auto.py
   def test_budget_auto_real_calculations()
   def test_budget_auto_roi_assertion()
   def test_excel_export_with_formulas()

📁 C:\Bldr\ARCHIVE\tests\test_comprehensive.py
   def main()
   def run_test_script()

📁 C:\Bldr\ARCHIVE\tests\test_e2e.py
   def api_client()
   def test_ai_shell()
   def test_files_scan()
   def test_health_check()
   def test_query_ndcg()
   def test_react_api_integration()
   def test_role_based_query_analyst()
   def test_role_based_query_chief_engineer()
   def test_roles_coordinator()
   def test_stage10_coordinator_integration()
   def test_train_pipeline()

📁 C:\Bldr\ARCHIVE\tests\test_e2e_comprehensive.py
   def api_client()
   def test_frontend_query_e2e()
   def test_health_check_comprehensive()
   def test_queue_view_endpoint()

📁 C:\Bldr\ARCHIVE\tests\test_letter_generation.py
   def setUp()
   def test_letter_generation_with_fallback()
   def test_letter_improvement_with_fallback()
   def test_template_loading()

📁 C:\Bldr\ARCHIVE\tests\test_model_manager.py
   def test_model_loading()
   def test_model_query()
   def test_model_stats()
   def test_role_responsibilities()

📁 C:\Bldr\ARCHIVE\tests\test_ndcg_evaluation.py
   def test_budget_auto_roi()
   def test_model_loading()
   def test_ndcg_evaluation()

📁 C:\Bldr\ARCHIVE\tests\test_norms_cleaning.py
   def _create_test_files()
   def setUp()
   def tearDown()
   def test_duplicate_detection()
   def test_file_hash_calculation()
   def test_norms_processor_initialization()
   def test_norms_scanner_initialization()

📁 C:\Bldr\ARCHIVE\tests\test_russian_ntd_full_spectrum.py
   def setup_method()
   def teardown_method()
   def test_category_filtering_in_rag()
   def test_category_mapping_for_qdrant()
   def test_document_type_patterns_coverage()
   def test_norms_updater_sources()
   def test_russian_embeddings_model()
   def test_seed_work_patterns_coverage()

📁 C:\Bldr\ARCHIVE\tests\test_sbert_e2e.py
   def test_sbert_e2e()

📁 C:\Bldr\ARCHIVE\tests\test_sbert_parse.py
   def test_sbert_entity_extraction()
   def test_sbert_error_handling()
   def test_sbert_fallback_behavior()
   def test_sbert_intent_parsing()
   def test_sbert_model_availability()
   def test_sbert_request_parsing()
   def test_sbert_similarity_task()

📁 C:\Bldr\ARCHIVE\tests\tools_real_test.py
   def get_model_client()
   def query()
   def success_func()
   def test_analyze_image_real_ocr_edge_detection()
   def test_calculate_financial_metrics_pandas_real_formulas()
   def test_check_normative_stage10_compliance()
   def test_create_document_docx_jinja2_templates()
   def test_enhanced_tool_executor()
   def test_execute_tool_call_with_json_args()
   def test_extract_text_from_pdf_pypdf2_pytesseract()
   def test_extract_works_nlp_stage11_worksequence()
   def test_generate_construction_schedule_networkx_gantt()
   def test_search_rag_database_real_implementation()
   def test_validate_tool_parameters()

📁 C:\Bldr\ARCHIVE\tests\tools_test.py
   def get_model_client()
   def query()
   def test_execute_tool_calculate_estimate()
   def test_execute_tool_create_charts()
   def test_execute_tool_create_document()
   def test_execute_tool_extract_works_nlp()
   def test_execute_tool_financial_calculator()
   def test_execute_tool_generate_mermaid_diagram()
   def test_execute_tool_search_knowledge_base()
   def test_get_available_tools()
   def test_invalid_tool_execution()
   def test_tools_system_initialization()

📁 C:\Bldr\backend\main.py
   def _verify_password()
   def authenticate_user()
   def create_access_token()
   def load_users_db()
   def run_server()
   def run_training()
   def run_training()
   def verify_api_token()

📁 C:\Bldr\backend\test_api.py
   (No functions found)

📁 C:\Bldr\backend\test_api_projects.py
   (No functions found)

📁 C:\Bldr\backend\test_neo4j_connection.py
   (No functions found)

📁 C:\Bldr\backend\test_projects.py
   (No functions found)

📁 C:\Bldr\backend\test_projects_api.py
   (No functions found)

📁 C:\Bldr\backend\test_routes.py
   (No functions found)

📁 C:\Bldr\backend\api\meta_tools_api.py
   (No functions found)

📁 C:\Bldr\backend\api\tools_api.py
   def _job_key()
   def convert_params_to_master_format()
   def create_job()
   def get_redis()
   def process_query()
   def update_job()

📁 C:\Bldr\backend\api\websocket_server.py
   (No functions found)

📁 C:\Bldr\backend\core\websocket_manager.py
   def __init__()
   def disconnect()

📁 C:\Bldr\backend\core\__init__.py
   (No functions found)

📁 C:\Bldr\config\models_config.py
   (No functions found)

📁 C:\Bldr\core\async_ai_processor.py
   def __init__()
   def __post_init__()
   def _prepare_multimedia_prompt()
   def get_ai_processor()
   def get_task_status()
   def list_active_tasks()

📁 C:\Bldr\core\autocad_bentley.py
   def _calculate_quantities()
   def _check_compliance()
   def _detect_clashes()
   def analyze_bentley_model()
   def autocad_export()

📁 C:\Bldr\core\bldr_api.py
   def __init__()
   def __init__()
   def _dep()
   def _ensure_users_db_dir()
   def _hash_password()
   def _verify_password()
   def authenticate_user()
   def connect()
   def create_access_token()
   def disconnect()
   def load_users_db()
   def register_retry_config()
   def require_role()
   def save_users_db()
   def start_cleanup_task()
   def verify_api_token()

📁 C:\Bldr\core\budget_auto.py
   def auto_budget()
   def calculate_position_cost()
   def export_budget_to_excel()
   def extract_financial_data()
   def load_gesn_csv()

📁 C:\Bldr\core\celery_app.py
   (No functions found)

📁 C:\Bldr\core\celery_norms.py
   def __init__()
   def _archive_old_version()
   def _extract_date()
   def _extract_doc_id()
   def _extract_doc_info()
   def _extract_version()
   def _log_to_neo4j()
   def _process_new_documents()
   def update_norms()
   def update_norms_task()

📁 C:\Bldr\core\config.py
   def get_capabilities_prompt()
   def get_role_exclusions()
   def get_role_responsibilities()

📁 C:\Bldr\core\coordinator.py
   def __init__()
   def _add_to_history()
   def _coordinate_with_specialists()
   def _create_specialist_prompt()
   def _format_plan_response()
   def _generate_plan()
   def _handle_voice_request()
   def analyze_request()
   def analyze_request_complexity()
   def clean_response()
   def create_and_send_file()
   def execute_tools()
   def process_document_search()
   def process_photo()
   def process_request()
   def synthesize_response()

📁 C:\Bldr\core\enhanced_template_search.py
   (No functions found)

📁 C:\Bldr\core\estimate_parser_enhanced.py
   def export_estimate_to_json()
   def extract_gesn_rates_from_text()
   def generate_sample_positions()
   def get_regional_coefficients()
   def parse_csv_estimate()
   def parse_estimate_gesn()
   def parse_excel_estimate()
   def parse_text_estimate()
   def validate_estimate_structure()

📁 C:\Bldr\core\gpp_creator.py
   def calculate_critical_path()
   def create_gpp()
   def export_gpp_to_json()
   def export_gpp_to_pdf()
   def extract_gpp_resources()
   def generate_gantt_tasks()
   def generate_milestones()
   def generate_task_links()

📁 C:\Bldr\core\internet_template_search.py
   def __init__()
   def _adapt_template_to_project()
   def _analyze_template_content()
   def _build_search_query()
   def _cache_search_results()
   def _count_replacements()
   def _filter_and_rank_results()
   def _get_file_extension()
   def _get_work_specific_templates()
   def _read_template_content()
   def _replace_company_placeholders()
   def _save_adapted_content()
   def _search_in_engine()
   def _search_in_source()
   def adapt_template_for_company()
   def adapt_template_to_company()
   def download_and_adapt_template()
   def download_template()
   def get_project_template_suggestions()
   def get_template_suggestions()
   def search_internet_templates()
   def search_templates()

📁 C:\Bldr\core\letter_generator.py
   def __init__()
   def _check_lm_studio_connection()
   def _generate_fallback_letter()
   def _improve_fallback_letter()
   def export_to_docx()
   def generate_letter_with_lm()
   def improve_letter_draft()

📁 C:\Bldr\core\letter_service.py
   def export_letter_to_docx()
   def generate_letter()
   def get_available_templates()
   def improve_letter()

📁 C:\Bldr\core\main.py
   def handle_exception()
   def signal_handler()

📁 C:\Bldr\core\metrics_collector.py
   def __init__()
   def _analyze_log_file()
   def _analyze_log_files()
   def _analyze_processed_files()
   def _cleanup_old_data()
   def _collect_system_metrics()
   def _collection_loop()
   def _create_document_metric()
   def _generate_session_id()
   def _init_database()
   def _parse_log_line()
   def _persist_metrics()
   def _process_log_match()
   def get_current_metrics()
   def get_latest_metrics()
   def get_metrics()
   def get_metrics_history()
   def start_collection()
   def start_metrics_collection()
   def stop_collection()

📁 C:\Bldr\core\model_manager.py
   def __init__()
   def _get_model_call_count()
   def _preload_priority_models()
   def get_all_roles()
   def get_capabilities_prompt()
   def get_model_client()
   def get_model_stats()
   def get_role_exclusions()
   def get_role_responsibilities()
   def get_role_tools()
   def query()

📁 C:\Bldr\core\monte_carlo.py
   def _calculate_correlation_matrix()
   def monte_carlo_sim()

📁 C:\Bldr\core\norms_processor.py
   def __init__()
   def _determine_doc_type()
   def _extract_doc_id()
   def _import_to_neo4j()
   def _log_to_neo4j()
   def dedup_and_restructure()
   def merge_bases()

📁 C:\Bldr\core\norms_scan.py
   def __init__()
   def _categorize_document()
   def _extract_version()
   def find_duplicates()
   def find_outdated()
   def log_to_neo4j()
   def run_scan()
   def scan_base()

📁 C:\Bldr\core\norms_updater.py
   def __init__()
   def _generate_filename()
   def get_source_status()

📁 C:\Bldr\core\ntd_preprocessor.py
   def __init__()
   def __init__()
   def _determine_document_category()
   def _init_db()
   def _load_documents()
   def check_document_actual()
   def download_document()
   def extract_document_info()
   def get_document()
   def get_replacement_document()
   def initialize_ntd_system()
   def is_document_actual()
   def is_processed()
   def mark_as_processed()
   def ntd_preprocess()
   def organize_normative_documents()
   def rename_normative_file()
   def search_documents()

📁 C:\Bldr\core\official_letters.py
   def generate_official_letter()
   def get_letter_templates()

📁 C:\Bldr\core\parse_utils.py
   def parse_intent_and_entities()
   def parse_request_with_sbert()
   def test_sbert_parse()

📁 C:\Bldr\core\plugin_manager.py
   def __init__()
   def configure_service()
   def get_loaded_plugins()
   def get_plugin_endpoints()
   def get_service_config()
   def list_webhooks()
   def load_all_plugins()
   def register_plugin_endpoint()
   def register_webhook()
   def trigger_event()

📁 C:\Bldr\core\ppr_generator.py
   def calculate_critical_path()
   def export_ppr_to_pdf()
   def extract_resources()
   def generate_ppr()
   def generate_timeline()
   def perform_compliance_check()

📁 C:\Bldr\core\process_monitoring_demo.py
   def process_func()
   def simulate_document_processing()

📁 C:\Bldr\core\process_tracker.py
   def __init__()
   def __post_init__()
   def _send_websocket_update_async()
   def cancel_process()
   def get_process()
   def get_process_tracker()
   def list_processes()
   def start_cleanup_task()
   def start_process()
   def update_process()

📁 C:\Bldr\core\projects_api.py
   def __init__()
   def add_files_to_project()
   def create_project()
   def delete_project()
   def delete_project_file()
   def detect_file_type()
   def get_project()
   def get_project_files()
   def get_project_results()
   def get_projects()
   def save_project_result()
   def scan_directory_for_project()
   def scan_project_files()
   def update_project()

📁 C:\Bldr\core\retry_system.py
   def __init__()
   def _calculate_delay()
   def cancel_retry()
   def get_retry_status()
   def get_retry_system()
   def register_retry_config()
   def schedule_retry()

📁 C:\Bldr\core\schemas.py
   def err()
   def ok()
   def should_unify()
   def unify_body()

📁 C:\Bldr\core\smart_request_processor.py
   def __init__()
   def _add_domain_context()
   def _detect_construction_domain()
   def _detect_intent()
   def _determine_priority()
   def _enrich_with_rag_context()
   def _extract_entities()
   def _generate_proactive_suggestions()
   def _normalize_query()
   def create_smart_processor()
   def process_request()
   def process_user_query()

📁 C:\Bldr\core\super_smart_coordinator.py
   def __init__()
   def _adapt_steps_to_context()
   def _create_error_response()
   def _create_execution_summary()
   def _create_intelligent_action_plan()
   def _create_llm_prompt_for_step()
   def _create_main_response()
   def _estimate_execution_time()
   def _execute_action_plan()
   def _execute_calculation()
   def _execute_document_generation()
   def _execute_logical_step()
   def _execute_rag_search()
   def _execute_single_step()
   def _extract_calculation_params()
   def _generate_contextual_suggestions()
   def _generate_document_title()
   def _generate_filename()
   def _identify_dependencies()
   def _identify_expected_outputs()
   def _save_to_memory()
   def _summarize_search_results()
   def _synthesize_response()
   def _update_conversation_memory()
   def create_super_smart_coordinator()
   def process_request()

📁 C:\Bldr\core\template_adaptation_engine.py
   (No functions found)

📁 C:\Bldr\core\template_analyzer.py
   (No functions found)

📁 C:\Bldr\core\template_manager.py
   def __init__()
   def create_default_templates()
   def create_template()
   def delete_template()
   def get_template()
   def get_templates()
   def update_template()

📁 C:\Bldr\core\test_coordinator_performance.py
   def test_simple_queries()

📁 C:\Bldr\core\tools_adapter.py
   def __init__()
   def __init__()
   def _convert_tool_result()
   def _legacy_analyze_image()
   def _legacy_auto_budget()
   def _legacy_create_visualization()
   def _legacy_execute_tool()
   def _legacy_financial_metrics()
   def _legacy_generate_letter()
   def _legacy_generate_ppr()
   def _legacy_improve_letter()
   def _legacy_list_tools()
   def _legacy_search_rag()
   def _legacy_tool_info()
   def analyze_image()
   def auto_budget()
   def calculate_financial_metrics()
   def create_visualization()
   def execute_tool()
   def execute_tool_safe()
   def generate_letter()
   def generate_ppr()
   def get_execution_stats()
   def get_master_tools_system()
   def get_tool_info()
   def get_tools_adapter()
   def health_check()
   def improve_letter()
   def is_master_tools_available()
   def is_success()
   def is_tool_available()
   def list_available_tools()
   def list_tools_safe()
   def master_execute_tool()
   def master_list_tools()
   def search_rag_database()

📁 C:\Bldr\core\tools_system.py
   def __init__()
   def __init__()
   def __init__()
   def _analyze_bentley_model()
   def _analyze_image()
   def _analyze_tender()
   def _assess_financial_risk()
   def _assess_quality_risk()
   def _assess_risk_level()
   def _assess_safety_risk()
   def _assess_schedule_risk()
   def _auto_budget()
   def _autocad_export()
   def _calculate_critical_path()
   def _calculate_estimate()
   def _calculate_financial_metrics()
   def _categorize_error()
   def _categorize_error()
   def _check_normative()
   def _check_tool_availability()
   def _comprehensive_analysis()
   def _create_bar_chart()
   def _create_construction_schedule()
   def _create_document()
   def _create_gantt_chart()
   def _create_gpp()
   def _create_pie_chart()
   def _discover_hidden_tools()
   def _enterprise_rag_trainer()
   def _extract_construction_data()
   def _extract_financial_data()
   def _extract_text_from_pdf()
   def _extract_works_nlp()
   def _find_normatives()
   def _generate_construction_schedule()
   def _generate_letter()
   def _generate_mermaid_diagram()
   def _generate_ppr()
   def _generate_recommendation()
   def _generate_timeline()
   def _generate_works_sequence()
   def _get_error_suggestions()
   def _get_suggestions()
   def _get_tool_categories()
   def _get_tool_categories_extended()
   def _get_tool_category()
   def _get_tool_description()
   def _get_ui_placement()
   def _get_work_sequence()
   def _improve_letter()
   def _monte_carlo_sim()
   def _parse_batch_estimates()
   def _parse_estimate_unified()
   def _parse_gesn_estimate()
   def _perform_risk_analysis()
   def _register_all_tools()
   def _search_rag_database()
   def _semantic_parse()
   def _standardize_error_response()
   def _standardize_response()
   def add_warning()
   def discover_tools()
   def execute_tool()
   def execute_tool_call()
   def execute_with_retry()
   def get_tool()
   def get_tools_by_category()
   def is_success()
   def register()
   def set_metadata()
   def to_dict()
   def validate_tool_parameters()

📁 C:\Bldr\core\trainer.py
   def __init__()
   def get_model_stats()
   def preload_models()
   def query_model()
   def train_model()

📁 C:\Bldr\core\unified_estimate_parser.py
   def __init__()
   def _parse_batch()
   def _parse_file()
   def _parse_single_input()
   def _parse_structured_data()
   def _parse_text_content()
   def _standardize_result()
   def parse_batch_estimates_unified()
   def parse_csv_estimate_unified()
   def parse_estimate_unified()
   def parse_estimate_unified()
   def parse_excel_estimate_unified()
   def parse_gesn_estimate_unified()
   def parse_text_estimate_unified()

📁 C:\Bldr\core\websocket_manager.py
   def __init__()
   def disconnect()

📁 C:\Bldr\core\__init__.py
   (No functions found)

📁 C:\Bldr\core\agents\conversation_history.py
   def __init__()
   def _get_history_file_path()
   def add_message()
   def clear_history()
   def get_formatted_history()
   def get_history()

📁 C:\Bldr\core\agents\conversation_history_compressed.py
   def __init__()
   def _compact_prefix()
   def _compact_prefix_rule_based()
   def _estimate_tokens()
   def _filter_noise()
   def _load_history()
   def _periodic_compact()
   def _save_history()
   def add_message()
   def clear_history()
   def get_formatted_history()
   def get_full_history()
   def get_history_stats()

📁 C:\Bldr\core\agents\coordinator_agent.py
   def __init__()
   def _analyze_and_plan()
   def _convert_plan_to_natural_language()
   def _create_agent()
   def _deliver_file_to_ai_shell()
   def _deliver_file_to_telegram()
   def _direct_response()
   def _execute_meta_tool()
   def _generate_fallback_natural_language_response()
   def _generate_fallback_plan()
   def _list_meta_tools()
   def _search_meta_tools()
   def _simple_norm_check()
   def _transcribe_audio()
   def clear_request_context()
   def deliver_file()
   def generate_final_response()
   def generate_plan()
   def generate_response()
   def get_available_tools_list()
   def process_query()
   def set_request_context()

📁 C:\Bldr\core\agents\coordinator_agent_backup.py
   (No functions found)

📁 C:\Bldr\core\agents\roles_agents.py
   def __init__()
   def __init__()
   def _bim_code_gen()
   def _calc_estimate()
   def _create_agent()
   def _direct_response()
   def _execute_master_tool()
   def _gen_checklist()
   def _gen_diagram()
   def _gen_docx()
   def _gen_excel()
   def _gen_gantt()
   def _gen_project_plan()
   def _gen_qc_report()
   def _gen_safety_report()
   def _gen_script()
   def _get_role_tools()
   def _search_rag_database()
   def _vl_analyze_photo()
   def execute_task()
   def execute_task()
   def get_agent()

📁 C:\Bldr\core\agents\specialist_agents.py
   def __init__()
   def __init__()
   def execute_plan()
   def execute_task()
   def get_agent()

📁 C:\Bldr\core\agents\__init__.py
   (No functions found)

📁 C:\Bldr\core\meta_tools\celery_integration.py
   def __init__()
   def __init__()
   def _register_celery_tasks()
   def _restore_meta_system()
   def _restore_orchestrator()
   def _restore_tools_system()
   def _restore_workflow()
   def cancel_celery_task()
   def cancel_task()
   def cleanup_completed_tasks()
   def execute_meta_tool_async()
   def execute_single_tool_async()
   def execute_tool()
   def execute_tool()
   def execute_tool()
   def execute_tool()
   def execute_workflow_async()
   def get_celery_task_status()
   def get_task_result()
   def get_task_status()
   def get_worker_stats()
   def list_active_tasks()
   def start_worker()
   def submit_meta_tool()
   def submit_tool()
   def submit_workflow()

📁 C:\Bldr\core\meta_tools\dag_orchestrator.py
   def __init__()
   def __post_init__()
   def __post_init__()
   def add_dependency()
   def add_dependency()
   def add_task()
   def add_task_to_workflow()
   def cancel_workflow()
   def create_workflow()
   def duration()
   def get_ready_tasks()
   def get_statistics()
   def get_workflow_status()
   def is_ready()
   def to_dict()
   def to_dict()
   def update_progress()
   def validate_dag()

📁 C:\Bldr\core\meta_tools\meta_tools_system.py
   def __init__()
   def _register_builtin_meta_tools()
   def execute_tool()
   def get_meta_tool_info()
   def get_orchestrator_statistics()
   def list_meta_tools()
   def register_meta_tool()
   def search_meta_tools()

📁 C:\Bldr\integrations\telegram_bot.py
   def dummy_function()
   def get_auth_headers()
   def load_env_file()
   def send_command_to_bot()

📁 C:\Bldr\integrations\telegram_bot_fixed.py
   def dummy_function()
   def get_auth_headers()
   def load_env_file()
   def send_command_to_bot()

📁 C:\Bldr\integrations\telegram_bot_improved.py
   def get_auth_headers()

📁 C:\Bldr\plugins\document_analyzer_plugin.py
   def _analyze_educational_document()
   def _analyze_generic_document()
   def _analyze_norms_document()
   def _analyze_ppr_document()
   def _analyze_rd_document()
   def _analyze_smeta_document()
   def _generate_summary()
   def analyze_document()

📁 C:\Bldr\plugins\third_party_integration_plugin.py
   def _get_sample_documents()
   def _sync_google_drive_documents()
   def _upload_to_google_drive()
   def configure_service()
   def get_service_config()
   def list_configured_services()
   def remove_service_config()
   def sync_documents()
   def upload_document()

📁 C:\Bldr\plugins\webhook_plugin.py
   def list_webhooks()
   def register_event_handler()
   def register_webhook()
   def remove_webhook()
   def trigger_event()
   def trigger_internal_event()

📁 C:\Bldr\scripts\bldr_rag_trainer.py
   def __init__()
   def _convert_networkx_to_mermaid()
   def _export_mermaid_to_file()
   def _extract_secondary_categories()
   def _generate_embeddings_with_batching()
   def _init_faiss()
   def _init_qdrant()
   def _load_processed_files()
   def _prepare_rubern_for_qdrant()
   def _save_processed_files()
   def _stage0_ntd_preprocessing()
   def _stage10_type_specific_processing()
   def _stage11_work_sequence_extraction()
   def _stage12_save_work_sequences()
   def _stage13_smart_chunking()
   def _stage14_save_to_qdrant()
   def _stage1_initial_validation()
   def _stage2_duplicate_checking()
   def _stage3_local_scan_and_copy()
   def _stage3_text_extraction()
   def _stage4_document_type_detection()
   def _stage5_structural_analysis()
   def _stage6_regex_to_rubern()
   def _stage7_rubern_markup()
   def _stage7_rubern_markup_enhanced()
   def _stage8_metadata_extraction()
   def _stage9_quality_control()
   def get_neo4j_driver_with_retry()
   def get_qdrant_client_with_retry()
   def process_document()
   def query()
   def query_with_category()
   def train()

📁 C:\Bldr\scripts\fast_bldr_rag_trainer.py
   def __init__()
   def _fast_chunking()
   def _fast_document_type_detection()
   def _fast_text_extraction()
   def _generate_embeddings_batch()
   def _load_processed_files()
   def _save_processed_files()
   def _save_to_qdrant_fast()
   def _stage3_local_scan_and_copy()
   def fast_process_document()
   def fast_train()

📁 C:\Bldr\scripts\generate_function_index.py
   def fmt_arg()
   def get_class_signature()
   def get_function_signature()
   def iter_python_files()
   def main()
   def parse_file()
   def should_scan_dir()

📁 C:\Bldr\scripts\optimized_bldr_rag_trainer.py
   def __del__()
   def __init__()
   def __init__()
   def _calculate_estimate()
   def _convert_networkx_to_mermaid()
   def _export_mermaid_to_file()
   def _generate_embeddings_with_batching()
   def _init_faiss()
   def _init_qdrant()
   def _load_processed_files()
   def _preload_priority_models()
   def _save_processed_files()
   def _search_rag_database()
   def _stage10_type_specific_processing()
   def _stage11_work_sequence_extraction()
   def _stage12_save_work_sequences()
   def _stage13_smart_chunking()
   def _stage14_save_to_qdrant()
   def _stage1_initial_validation()
   def _stage2_duplicate_checking()
   def _stage3_local_scan_and_copy()
   def _stage3_text_extraction()
   def _stage4_document_type_detection()
   def _stage5_structural_analysis()
   def _stage6_regex_to_rubern()
   def _stage7_rubern_markup()
   def _stage7_rubern_markup_enhanced()
   def _stage8_metadata_extraction()
   def _stage9_quality_control()
   def execute_tool()
   def process_document()
   def query()
   def query_with_roles()
   def train()

📁 C:\Bldr\scripts\reset_bldr_databases.py
   (No functions found)

📁 C:\Bldr\system_launcher\component_manager.py
   def __init__()
   def _check_rag_training_health()
   def _get_start_order()
   def _initialize_components()
   def _is_port_in_use()
   def _kill_processes_on_port()
   def _load_env_variables()
   def _monitoring_loop()
   def _notify_status_change()
   def _start_backend()
   def _start_celery_beat()
   def _start_celery_worker()
   def _start_frontend()
   def _start_neo4j()
   def _start_qdrant()
   def _start_redis()
   def _stop_component_process()
   def _update_component_metrics()
   def _update_component_status()
   def add_status_callback()
   def export_status_report()
   def get_all_components()
   def get_component_status()
   def get_system_status()
   def restart_component()
   def start_all_components()
   def start_component()
   def start_monitoring()
   def status_callback()
   def stop_all_components()
   def stop_component()
   def stop_monitoring()
   def visit()

📁 C:\Bldr\system_launcher\diagnostic_tools.py
   def __init__()
   def _check_dependencies()
   def _check_filesystem()
   def _check_network_ports()
   def _check_system_resources()
   def _clear_cache_recovery()
   def _diagnose_backend()
   def _diagnose_frontend()
   def _diagnose_neo4j()
   def _is_port_in_use()
   def _reinstall_dependencies_recovery()
   def _restart_component_recovery()
   def attempt_auto_recovery()
   def export_diagnostic_report()
   def get_diagnostic_summary()
   def run_full_diagnostic()

📁 C:\Bldr\system_launcher\gui_launcher.py
   def __init__()
   def _clear_logs()
   def _create_component_panel()
   def _create_components_panel()
   def _create_header()
   def _create_monitoring_panel()
   def _create_status_bar()
   def _export_report()
   def _get_component_icon()
   def _get_status_color()
   def _gui_update_loop()
   def _log_message()
   def _manual_refresh()
   def _on_closing()
   def _on_component_status_change()
   def _on_leave()
   def _on_mousewheel()
   def _open_in_browser()
   def _restart_component()
   def _start_all_systems()
   def _start_component()
   def _stop_all_systems()
   def _stop_component()
   def _update_component_display()
   def _update_time_label()
   def main()
   def restart_thread()
   def run()
   def setup_ui()
   def start_all_thread()
   def start_monitoring()
   def start_thread()
   def stop_all_thread()
   def stop_thread()

📁 C:\Bldr\system_launcher\main.py
   def main()

📁 C:\Bldr\web\bldr_dashboard\node_modules\flatted\python\flatted.py
   def __init__()
   def __init__()
   def _array_keys()
   def _index()
   def _is_array()
   def _is_object()
   def _is_string()
   def _loop()
   def _object_keys()
   def _ref()
   def _relate()
   def _transform()
   def _wrap()
   def parse()
   def stringify()
