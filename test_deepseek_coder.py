#!/usr/bin/env python3
"""
–¢–µ—Å—Ç DeepSeek-Coder –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∑–∞–≤–∏—Å–∞–Ω–∏—è
"""

import os
import sys
import time
import logging

# –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à Python
os.environ['PYTHONDONTWRITEBYTECODE'] = '1'
os.environ['PYTHONUNBUFFERED'] = '1'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def test_deepseek_coder_simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç DeepSeek-Coder —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
    
    logger.info("=== –¢–ï–°–¢ DEEPSEEK-CODER ===")
    
    try:
        from hybrid_llm_ensemble import HybridLLMEnsemble, HybridLLMConfig
        
        logger.info("1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        config = HybridLLMConfig.from_env()
        
        logger.info("2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HybridLLMEnsemble...")
        ensemble = HybridLLMEnsemble(config)
        
        logger.info("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ DeepSeek-Coder...")
        if not ensemble.qwen_model:
            logger.error("‚ùå DeepSeek-Coder –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return False
            
        logger.info("‚úÖ DeepSeek-Coder –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–ï–°–¢ 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        logger.info("4. –¢–ï–°–¢ 1: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç...")
        simple_prompt = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
        
        start_time = time.time()
        try:
            response = ensemble.qwen_model(
                simple_prompt,
                max_tokens=50,
                temperature=0.1,
                stop=["\n", "–ü—Ä–∏–≤–µ—Ç"]
            )
            elapsed = time.time() - start_time
            logger.info(f"‚úÖ –¢–ï–°–¢ 1 –£–°–ü–ï–•: {elapsed:.2f}s - {response['choices'][0]['text'][:100]}")
        except Exception as e:
            logger.error(f"‚ùå –¢–ï–°–¢ 1 –û–®–ò–ë–ö–ê: {e}")
            return False
        
        # –¢–ï–°–¢ 2: –ü—Ä–æ–º–ø—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–∫–æ—Ä–æ—Ç–∫–∏–π)
        logger.info("5. –¢–ï–°–¢ 2: –ö–æ—Ä–æ—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏...")
        short_text = "–≠—Ç–æ —Ç–µ—Å—Ç –æ–≤ —ã–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏."
        normalization_prompt = f"""–ó–ê–î–ê–ß–ê: –ò—Å–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ—à–∏–±–∫–∏.

–¢–ï–ö–°–¢: {short_text}

–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô:"""
        
        start_time = time.time()
        try:
            response = ensemble.qwen_model(
                normalization_prompt,
                max_tokens=100,
                temperature=0.1,
                stop=["–¢–ï–ö–°–¢:", "–ó–ê–î–ê–ß–ê:"]
            )
            elapsed = time.time() - start_time
            result = response['choices'][0]['text'].strip()
            logger.info(f"‚úÖ –¢–ï–°–¢ 2 –£–°–ü–ï–•: {elapsed:.2f}s - '{result}'")
        except Exception as e:
            logger.error(f"‚ùå –¢–ï–°–¢ 2 –û–®–ò–ë–ö–ê: {e}")
            return False
        
        # –¢–ï–°–¢ 3: –ü—Ä–æ–º–ø—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å—Ä–µ–¥–Ω–∏–π)
        logger.info("6. –¢–ï–°–¢ 3: –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ–º–ø—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏...")
        medium_text = "–≠—Ç–æ —Ç–µ—Å—Ç –æ–≤ —ã–π —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏.\n\n–ú–Ω–æ–≥–æ –ø—Ä–æ–±–µ–ª–æ–≤    –∑–¥–µ—Å—å."
        medium_prompt = f"""–ó–ê–î–ê–ß–ê: –ò—Å–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ—à–∏–±–∫–∏.

–¢–ï–ö–°–¢: {medium_text}

–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô:"""
        
        start_time = time.time()
        try:
            response = ensemble.qwen_model(
                medium_prompt,
                max_tokens=200,
                temperature=0.1,
                stop=["–¢–ï–ö–°–¢:", "–ó–ê–î–ê–ß–ê:"]
            )
            elapsed = time.time() - start_time
            result = response['choices'][0]['text'].strip()
            logger.info(f"‚úÖ –¢–ï–°–¢ 3 –£–°–ü–ï–•: {elapsed:.2f}s - '{result[:100]}...'")
        except Exception as e:
            logger.error(f"‚ùå –¢–ï–°–¢ 3 –û–®–ò–ë–ö–ê: {e}")
            return False
        
        # –¢–ï–°–¢ 4: –ë–æ–ª—å—à–æ–π —á–∞–Ω–∫ (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ)
        logger.info("7. –¢–ï–°–¢ 4: –ë–æ–ª—å—à–æ–π —á–∞–Ω–∫ (4096 —Å–∏–º–≤–æ–ª–æ–≤)...")
        large_text = "–°–ü 158.13330.2014 " * 200  # ~4000 —Å–∏–º–≤–æ–ª–æ–≤
        large_prompt = f"""–ó–ê–î–ê–ß–ê: –ò—Å–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ—à–∏–±–∫–∏.

–¢–ï–ö–°–¢: {large_text}

–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô:"""
        
        start_time = time.time()
        try:
            response = ensemble.qwen_model(
                large_prompt,
                max_tokens=4096,
                temperature=0.1,
                stop=["–¢–ï–ö–°–¢:", "–ó–ê–î–ê–ß–ê:"]
            )
            elapsed = time.time() - start_time
            result = response['choices'][0]['text'].strip()
            logger.info(f"‚úÖ –¢–ï–°–¢ 4 –£–°–ü–ï–•: {elapsed:.2f}s - {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            logger.error(f"‚ùå –¢–ï–°–¢ 4 –û–®–ò–ë–ö–ê: {e}")
            return False
        
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False

def test_deepseek_coder_timeout():
    """–¢–µ—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è"""
    
    logger.info("=== –¢–ï–°–¢ –° –¢–ê–ô–ú–ê–£–¢–û–ú ===")
    
    try:
        from hybrid_llm_ensemble import HybridLLMEnsemble, HybridLLMConfig
        import signal
        
        def timeout_handler(signum, frame):
            raise TimeoutError("DeepSeek-Coder –∑–∞–≤–∏—Å!")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
        signal.signal(signal.SIGALRM, timeout_handler)
        signal.alarm(30)
        
        try:
            config = HybridLLMConfig.from_env()
            ensemble = HybridLLMEnsemble(config)
            
            if not ensemble.qwen_model:
                logger.error("‚ùå DeepSeek-Coder –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                return False
            
            # –¢–µ—Å—Ç —Å –±–æ–ª—å—à–∏–º –ø—Ä–æ–º–ø—Ç–æ–º
            large_text = "–°–ü 158.13330.2014 " * 300  # ~6000 —Å–∏–º–≤–æ–ª–æ–≤
            prompt = f"""–ó–ê–î–ê–ß–ê: –ò—Å–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ—à–∏–±–∫–∏.

–¢–ï–ö–°–¢: {large_text}

–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô:"""
            
            logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –±–æ–ª—å—à–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞...")
            start_time = time.time()
            
            response = ensemble.qwen_model(
                prompt,
                max_tokens=4096,
                temperature=0.1,
                stop=["–¢–ï–ö–°–¢:", "–ó–ê–î–ê–ß–ê:"]
            )
            
            elapsed = time.time() - start_time
            result = response['choices'][0]['text'].strip()
            
            signal.alarm(0)  # –û—Ç–∫–ª—é—á–∞–µ–º —Ç–∞–π–º–∞—É—Ç
            logger.info(f"‚úÖ –¢–ï–°–¢ –° –¢–ê–ô–ú–ê–£–¢–û–ú –£–°–ü–ï–•: {elapsed:.2f}s - {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
            return True
            
        except TimeoutError:
            signal.alarm(0)
            logger.error("‚ùå –¢–ê–ô–ú–ê–£–¢! DeepSeek-Coder –∑–∞–≤–∏—Å –Ω–∞ 30 —Å–µ–∫—É–Ω–¥!")
            return False
        except Exception as e:
            signal.alarm(0)
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê: {e}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False

if __name__ == "__main__":
    logger.info("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í DEEPSEEK-CODER")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã
    success1 = test_deepseek_coder_simple()
    
    if success1:
        # –¢–µ—Å—Ç 2: –¢–µ—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        success2 = test_deepseek_coder_timeout()
        
        if success2:
            logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! DeepSeek-Coder —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")
        else:
            logger.error("‚ùå DeepSeek-Coder –∑–∞–≤–∏—Å–∞–µ—Ç –Ω–∞ –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–º–ø—Ç–∞—Ö!")
    else:
        logger.error("‚ùå DeepSeek-Coder –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –Ω–∞ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–æ–º–ø—Ç–∞—Ö!")
    
    logger.info("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
