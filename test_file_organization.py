#!/usr/bin/env python3
"""
Test File Organization
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
"""

import os
import json
from pathlib import Path
from file_organizer import DocumentFileOrganizer, organize_document_file

def test_file_organization():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò –§–ê–ô–õ–û–í")
    print("=" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
    organizer = DocumentFileOrganizer("I:/docs")
    
    print("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞:")
    for doc_type, config in organizer.folder_structure.items():
        print(f"   {doc_type}: {config['folder']}")
        for subfolder_key, subfolder_path in config['subfolders'].items():
            print(f"     ‚îî‚îÄ {subfolder_key}: {subfolder_path}")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
    stats = organizer.get_organization_stats()
    print(json.dumps(stats, ensure_ascii=False, indent=2))
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã
    test_cases = [
        {
            'filename': '–ì–û–°–¢_12345_–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ.pdf',
            'doc_type_info': {
                'doc_type': 'norms',
                'doc_subtype': 'gost',
                'confidence': 0.95
            },
            'expected_folder': 'norms/gost'
        },
        {
            'filename': '–ì–≠–°–ù_81-02-01_–ó–µ–º–ª—è–Ω—ã–µ_—Ä–∞–±–æ—Ç—ã.pdf',
            'doc_type_info': {
                'doc_type': 'estimates',
                'doc_subtype': 'gesn',
                'confidence': 0.88
            },
            'expected_folder': 'estimates/gesn'
        },
        {
            'filename': '–ü–ü–†_–§—É–Ω–¥–∞–º–µ–Ω—Ç–Ω—ã–µ_—Ä–∞–±–æ—Ç—ã.docx',
            'doc_type_info': {
                'doc_type': 'projects',
                'doc_subtype': 'ppr',
                'confidence': 0.92
            },
            'expected_folder': 'projects/ppr'
        },
        {
            'filename': '–î–æ–≥–æ–≤–æ—Ä_–ø–æ–¥—Ä—è–¥–∞_123.pdf',
            'doc_type_info': {
                'doc_type': 'contracts',
                'doc_subtype': 'construction',
                'confidence': 0.85
            },
            'expected_folder': 'contracts/construction'
        }
    ]
    
    print(f"\nüéØ –¢–ï–°–¢–û–í–´–ï –°–õ–£–ß–ê–ò:")
    print("-" * 20)
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. –§–∞–π–ª: {test_case['filename']}")
        print(f"   –¢–∏–ø: {test_case['doc_type_info']['doc_type']}")
        print(f"   –ü–æ–¥—Ç–∏–ø: {test_case['doc_type_info']['doc_subtype']}")
        print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {test_case['doc_type_info']['confidence']}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è)
        target_folder = organizer._determine_target_folder(
            test_case['doc_type_info'], 
            {}, 
            Path(test_case['filename'])
        )
        
        expected_path = Path("I:/docs") / test_case['expected_folder']
        
        if target_folder == expected_path:
            print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–∞–ø–∫–∞: {target_folder.relative_to(Path('I:/docs'))}")
        else:
            print(f"   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–∞–ø–∫–∞: {target_folder.relative_to(Path('I:/docs'))}")
            print(f"      –û–∂–∏–¥–∞–ª–æ—Å—å: {test_case['expected_folder']}")

def check_downloaded_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ downloaded"""
    print(f"\nüìÇ –ê–ù–ê–õ–ò–ó –§–ê–ô–õ–û–í –í I:/docs/downloaded")
    print("=" * 40)
    
    downloaded_dir = Path("I:/docs/downloaded")
    if not downloaded_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ I:/docs/downloaded –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º
    file_types = {}
    total_files = 0
    total_size = 0
    
    for file_path in downloaded_dir.rglob("*.*"):
        if file_path.is_file():
            total_files += 1
            total_size += file_path.stat().st_size
            
            extension = file_path.suffix.lower()
            if extension not in file_types:
                file_types[extension] = {'count': 0, 'size': 0}
            
            file_types[extension]['count'] += 1
            file_types[extension]['size'] += file_path.stat().st_size
    
    print(f"üìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
    print(f"üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / 1024 / 1024:.2f} MB")
    print()
    
    print("üìã –ü–æ —Ç–∏–ø–∞–º —Ñ–∞–π–ª–æ–≤:")
    for ext, info in sorted(file_types.items(), key=lambda x: x[1]['count'], reverse=True):
        size_mb = info['size'] / 1024 / 1024
        print(f"   {ext or '–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è'}: {info['count']} —Ñ–∞–π–ª–æ–≤, {size_mb:.2f} MB")
    
    # –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
    print(f"\nüìù –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:")
    for ext in ['.pdf', '.docx', '.doc', '.txt']:
        if ext in file_types:
            examples = list(downloaded_dir.rglob(f"*{ext}"))[:3]
            print(f"   {ext}:")
            for example in examples:
                print(f"     ‚Ä¢ {example.name}")

def simulate_organization():
    """–°–∏–º—É–ª—è—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤"""
    print(f"\nüé≠ –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò –§–ê–ô–õ–û–í")
    print("=" * 35)
    
    downloaded_dir = Path("I:/docs/downloaded")
    if not downloaded_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ I:/docs/downloaded –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    organizer = DocumentFileOrganizer("I:/docs")
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
    pdf_files = list(downloaded_dir.rglob("*.pdf"))[:10]
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏: {len(pdf_files)}")
    
    simulation_results = {}
    
    for file_path in pdf_files:
        filename = file_path.name.lower()
        
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        if any(keyword in filename for keyword in ['–≥–æ—Å—Ç', 'gost']):
            doc_type_info = {'doc_type': 'norms', 'doc_subtype': 'gost', 'confidence': 0.9}
        elif any(keyword in filename for keyword in ['—Å–Ω–∏–ø', 'snip']):
            doc_type_info = {'doc_type': 'norms', 'doc_subtype': 'snip', 'confidence': 0.9}
        elif any(keyword in keyword for keyword in ['–≥—ç—Å–Ω', 'gesn']):
            doc_type_info = {'doc_type': 'estimates', 'doc_subtype': 'gesn', 'confidence': 0.85}
        elif any(keyword in filename for keyword in ['–ø–ø—Ä', 'ppr']):
            doc_type_info = {'doc_type': 'projects', 'doc_subtype': 'ppr', 'confidence': 0.8}
        else:
            doc_type_info = {'doc_type': 'other', 'doc_subtype': 'unknown', 'confidence': 0.5}
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
        target_folder = organizer._determine_target_folder(doc_type_info, {}, file_path)
        
        doc_type = doc_type_info['doc_type']
        if doc_type not in simulation_results:
            simulation_results[doc_type] = []
        
        simulation_results[doc_type].append({
            'filename': file_path.name,
            'target_folder': str(target_folder.relative_to(Path("I:/docs"))),
            'confidence': doc_type_info['confidence']
        })
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ò–ú–£–õ–Ø–¶–ò–ò:")
    for doc_type, files in simulation_results.items():
        print(f"\n{doc_type.upper()} ({len(files)} —Ñ–∞–π–ª–æ–≤):")
        for file_info in files:
            print(f"   ‚Ä¢ {file_info['filename']}")
            print(f"     ‚Üí {file_info['target_folder']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {file_info['confidence']})")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    test_file_organization()
    check_downloaded_files()
    simulate_organization()
    
    print(f"\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 30)
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞")
    print("‚úÖ –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–ø–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print()
    print("üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ RAG —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
    print("2. –§–∞–π–ª—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ —ç—Ç–∞–ø–∞ 5")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫–∏ –≤ I:/docs/ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è")

if __name__ == "__main__":
    main()