# 🧠 Распределение ролей между локальными моделями в SuperBuilder

## 🎯 Основной принцип распределения

**Каждая роль имеет свою специализированную локальную модель**, оптимизированную для решения конкретных задач в строительной отрасли. Координатор управляет всеми моделями, но **не выполняет их задачи напрямую** — он формирует план действий, который исполняется оболочкой системы.

---

## 📋 Полный список ролей и их моделей

### 1. **Классификатор документов (doc_classifier)** - Специалист по JSON классификации
```python
"doc_classifier": {
    "name": "DeepSeek-Coder-6.7B - JSON Classifier",
    "model": "deepseek-coder-6.7b-instruct.Q5_K_M.gguf",
    "temperature": 0.0,
    "responsibilities": [
        "Strictly outputting JSON for document classification",
        "Following formatting rules",
        "Fast document type detection"
    ]
}
```

### 2. **Координатор (coordinator)** - Центральный интеллект системы
```python
"coordinator": {
    "name": "DeepSeek-R1-0528-Qwen3-8B - Главный координатор проекта",
    "model": "deepseek/deepseek-r1-0528-qwen3-8b",
    "temperature": 0.1,
    "responsibilities": [
        "Strategic management and long-term goal setting",
        "Coordination of all departments",
        "Management of critical project paths",
        "Task distribution to specialists",
        "Synthesis of specialist responses into final results"
    ]
}
```
**Функции**: Анализ запросов, планирование, координация специалистов, синтез финального ответа

---

### 2. **Главный инженер (chief_engineer)** - Технический эксперт
```python
"chief_engineer": {
    "name": "qwen2.5-vl-7b - Главный инженер",
    "model": "qwen/qwen2.5-vl-7b",
    "temperature": 0.4,
    "responsibilities": [
        "Technical aspects of construction and design",
        "Engineering solutions and innovations",
        "Industrial safety consulting",
        "Regulatory requirement compliance"
    ]
}
```
**Функции**: Технические расчеты, инженерные решения, консультации по промышленной безопасности

---

### 3. **Структурный инженер (structural_engineer)** - Расчетчик конструкций
```python
"structural_engineer": {
    "name": "qwen3-8b - Структурный инженер",
    "model": "deepseek/deepseek-r1-0528-qwen3-8b",
    "temperature": 0.3,
    "responsibilities": [
        "Performing structural calculations",
        "Designing structural elements",
        "Recommending materials and techniques",
        "Seismic design expertise"
    ]
}
```
**Функции**: Расчет конструкций, проектирование элементов, рекомендации по материалам

---

### 4. **Геотехнический инженер (geotechnical_engineer)** - Эксперт по грунтам
```python
"geotechnical_engineer": {
    "name": "qwen3-8b - Геотехнический инженер",
    "model": "deepseek/deepseek-r1-0528-qwen3-8b",
    "temperature": 0.3,
    "responsibilities": [
        "Performing geotechnical analyses",
        "Designing geotechnical elements",
        "Soil mechanics expertise",
        "Foundation design"
    ]
}
```
**Функции**: Геотехнические расчеты, проектирование фундаментов, анализ грунтов

---

### 5. **Менеджер проекта (project_manager)** - Управление проектами
```python
"project_manager": {
    "name": "qwen3-8b - Менеджер проекта",
    "model": "deepseek/deepseek-r1-0528-qwen3-8b",
    "temperature": 0.3,
    "responsibilities": [
        "Project timeline management",
        "Resource allocation",
        "Task completion tracking",
        "Risk management"
    ]
}
```
**Функции**: Управление сроками, распределение ресурсов, отслеживание задач, управление рисками

---

### 6. **Строитель (construction_worker)** - Практик на стройке
```python
"construction_worker": {
    "name": "qwen3-8b - Строитель",
    "model": "deepseek/deepseek-r1-0528-qwen3-8b",
    "temperature": 0.3,
    "responsibilities": [
        "Construction activities information",
        "Building codes and standards compliance",
        "Instructions and diagrams creation",
        "Construction safety"
    ]
}
```
**Функции**: Информация о строительных работах, соблюдение норм, создание инструкций

---

### 7. **Инспектор по качеству (quality_control_officer)** - Контроль качества
```python
"quality_control_officer": {
    "name": "qwen3-8b - Quality Control Officer",
    "model": "deepseek/deepseek-r1-0528-qwen3-8b",
    "temperature": 0.3,
    "responsibilities": [
        "Inspecting construction sites",
        "Ensuring compliance with standards",
        "Generating detailed reports",
        "Quality assurance systems"
    ]
}
```
**Функции**: Инспекция строительных площадок, обеспечение соответствия стандартам, генерация отчетов

---

### 8. **Аналитик (analyst)** - Финансовый и экономический анализ
```python
"analyst": {
    "name": "qwen3-8b - Аналитик",
    "model": "deepseek/deepseek-r1-0528-qwen3-8b",
    "temperature": 0.3,
    "responsibilities": [
        "Estimates and budgets analysis",
        "Cost analysis and financial management",
        "Financial forecasting",
        "Risk analysis"
    ]
}
```
**Функции**: Анализ смет и бюджетов, финансовый анализ, прогнозирование, анализ рисков

---

## 🔄 Архитектура взаимодействия

### 1. **Запрос пользователя**
```python
user_query = "Рассчитайте стоимость устройства фундамента по ГЭСН 8-6-1.1 для объекта в Екатеринбурге"
```

### 2. **Анализ и планирование (Координатор)**
```json
{
  "status": "planning",
  "query_type": "complex",
  "requires_tools": true,
  "tools": [
    {"name": "search_rag_database", "arguments": {"query": "ГЭСН 8-6-1.1", "doc_types": ["estimate"]}},
    {"name": "calculate_estimate", "arguments": {"rate_code": "ГЭСН 8-6-1.1", "region": "ekaterinburg"}}
  ],
  "roles_involved": ["analyst", "chief_engineer"],
  "required_data": ["ГЭСН 8-6-1.1", "расценка", "региональные коэффициенты"],
  "next_steps": [
    "Поиск расценки ГЭСН 8-6-1.1 в базе знаний",
    "Расчет стоимости с учетом региональных коэффициентов"
  ]
}
```

### 3. **Исполнение (Оболочка SuperBuilder)**
```python
# Оболочка распознает JSON-план и запускает инструменты
tool_results = []
for tool in plan["tools"]:
    result = execute_tool(tool["name"], tool["arguments"])
    tool_results.append(result)

# Передача результатов специалистам
if "analyst" in plan["roles_involved"]:
    analyst_response = analyst_model.query(tool_results, user_query)

if "chief_engineer" in plan["roles_involved"]:
    engineer_response = chief_engineer_model.query(tool_results, user_query)
```

### 4. **Синтез ответа (Координатор)**
```python
final_response = coordinator.synthesize_response(
    user_query=user_query,
    tool_results=tool_results,
    specialist_responses=[analyst_response, engineer_response]
)
```

---

## 📊 Приоритеты загрузки моделей

```python
self.model_priorities = {
    "coordinator": 10,  # Высший приоритет
    "chief_engineer": 8,
    "legal_specialist": 7,
    "finance_specialist": 7,
    "analyst": 6,
    "document_specialist": 6,
    "technician": 5,
    "procurement_specialist": 5,
    "schedule_specialist": 5,
    "industrial_safety_specialist": 4,
    "occupational_safety_specialist": 4,
    "environmental_specialist": 4,
    "chief_welder": 4,
    "accountant": 3,
    "automator": 3,
    "default": 1  # Низший приоритет
}
```

---

## 🛠️ Управление моделями

### 1. **LRU (Least Recently Used) загрузка**
- Максимум 12 одновременно загруженных моделей
- Модели с низким приоритетом выгружаются первыми
- TTL (Time To Live) = 30 минут для загруженных моделей

### 2. **Предзагрузка приоритетных моделей**
```python
def preload_priority_models(self):
    """Preload high-priority models to improve response times"""
    high_priority_roles = [role for role, priority in self.model_priorities.items() if priority >= 7]
    for role in high_priority_roles:
        self.get_model_client(role)  # Загружает модель в память
```

### 3. **Статистика использования**
```python
def get_model_stats(self) -> Dict[str, Any]:
    """Get detailed statistics about model usage"""
    return {
        "loaded_models": len(self.loaded_models),
        "model_details": {
            role: {
                "model_name": config["model"],
                "priority": priority,
                "hours_loaded": hours_loaded,
                "usage_stats": self.model_usage_stats.get(role, {})
            } for role, (client, timestamp) in self.loaded_models.items()
        }
    }
```

---

## ✅ Преимущества такой архитектуры

1. **Специализация** - каждая модель решает свою узкую задачу
2. **Масштабируемость** - можно добавлять новые роли без изменения архитектуры
3. **Эффективность** - модели загружаются по требованию, с LRU-выгрузкой
4. **Управляемость** - приоритеты загрузки, статистика использования, TTL
5. **Отказоустойчивость** - сбой одной модели не влияет на работу других

Эта архитектура позволяет SuperBuilder эффективно решать сложные междисциплинарные задачи в строительной отрасли, используя специализированные модели для каждой области знаний.