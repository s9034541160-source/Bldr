#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

from core.tools.base_tool import tool_registry, ToolManifest, ToolInterface
from core.coordinator_with_tool_interfaces import CoordinatorWithToolInterfaces

def test_tool_registration():
    """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–µ—Å—Ç—Ä–µ."""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    try:
        from tools.custom.search_rag_database_v2 import manifest as search_manifest
        from tools.custom.generate_letter_v2 import manifest as letter_manifest
        from tools.custom.auto_budget_v2 import manifest as budget_manifest
        
        tool_registry.register_tool(search_manifest)
        tool_registry.register_tool(letter_manifest)
        tool_registry.register_tool(budget_manifest)
        
        print(f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tool_registry.tools)}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_tool_interfaces():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        interfaces = tool_registry.get_all_interfaces()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {len(interfaces)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        for tool_name, interface in interfaces.items():
            print(f"\nüìã –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_name}")
            print(f"   –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {interface.purpose}")
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {list(interface.input_requirements.keys())}")
            print(f"   –®–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {len(interface.execution_flow)}")
            print(f"   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {interface.integration_notes.get('performance', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {e}")
        return False

def test_coordinator_planning():
    """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º."""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞...")
    
    try:
        coordinator = CoordinatorWithToolInterfaces()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        search_tools = coordinator.find_tools_by_purpose(["–ø–æ–∏—Å–∫", "–¥–æ–∫—É–º–µ–Ω—Ç—ã"])
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞: {search_tools}")
        
        budget_tools = coordinator.find_tools_by_purpose(["–±—é–¥–∂–µ—Ç", "—Ä–∞—Å—á–µ—Ç"])
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –±—é–¥–∂–µ—Ç–∞: {budget_tools}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        test_queries = [
            "–Ω–∞–π—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ –±–µ—Ç–æ–Ω–µ",
            "—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±—é–¥–∂–µ—Ç —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞",
            "—Å–æ–∑–¥–∞—Ç—å –ø–∏—Å—å–º–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É"
        ]
        
        for query in test_queries:
            print(f"\nüìù –ó–∞–ø—Ä–æ—Å: {query}")
            plan = coordinator.plan_with_tool_interfaces(query)
            print(f"   –°—Ç–∞—Ç—É—Å: {plan.get('status', 'unknown')}")
            if plan.get('status') == 'success':
                print(f"   –í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {plan.get('selected_tool', 'unknown')}")
                print(f"   –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {plan.get('tool_purpose', 'unknown')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_tool_capabilities():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤."""
    print("\n‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    
    try:
        coordinator = CoordinatorWithToolInterfaces()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
        summary = coordinator.get_tool_interface_summary()
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å–≤–æ–¥–∫–∞ –ø–æ {len(summary)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º")
        
        for tool_name, info in summary.items():
            print(f"\nüîß {tool_name}:")
            print(f"   –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {info['purpose']}")
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {info['input_params']}")
            print(f"   –®–∞–≥–æ–≤: {info['execution_steps']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {e}")
        return False

def test_tool_search():
    """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–Ω—ã–º –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        search_terms = [
            ["–ø–æ–∏—Å–∫", "–¥–æ–∫—É–º–µ–Ω—Ç—ã"],
            ["–±—é–¥–∂–µ—Ç", "—Ä–∞—Å—á–µ—Ç"],
            ["–ø–∏—Å—å–º–æ", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"],
            ["–∞–Ω–∞–ª–∏–∑", "–¥–∞–Ω–Ω—ã–µ"]
        ]
        
        for terms in search_terms:
            matching = tool_registry.find_tools_by_purpose(terms)
            print(f"‚úÖ –ü–æ–∏—Å–∫ –ø–æ {terms}: {matching}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–Ø –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    print("=" * 60)
    
    tests = [
        ("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", test_tool_registration),
        ("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", test_tool_interfaces),
        ("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞", test_coordinator_planning),
        ("–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", test_tool_capabilities),
        ("–ü–æ–∏—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", test_tool_search)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}...")
        try:
            if test_func():
                print(f"‚úÖ {test_name} - –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name} - –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name} - –û–®–ò–ë–ö–ê: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
