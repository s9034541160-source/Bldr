#!/usr/bin/env python3
"""
–ü–û–õ–ù–´–ô –°–ë–†–û–° –í–°–ï–• –î–ê–ù–ù–´–• RAG –°–ò–°–¢–ï–ú–´
–û—á–∏—â–∞–µ—Ç Qdrant, Neo4j, processed_files.json –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Ñ–∞–π–ª—ã –æ–±—Ä–∞—Ç–Ω–æ
"""

import os
import json
import shutil
from pathlib import Path
from qdrant_client import QdrantClient
from neo4j import GraphDatabase

def reset_qdrant():
    """–û—á–∏—Å—Ç–∫–∞ Qdrant"""
    try:
        client = QdrantClient(host="localhost", port=6333)
        client.delete_collection("enterprise_docs")
        print("‚úÖ Qdrant collection 'enterprise_docs' deleted")
        
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
        client.create_collection(
            collection_name="enterprise_docs",
            vectors_config={"size": 768, "distance": "Cosine"}
        )
        print("‚úÖ Qdrant collection 'enterprise_docs' recreated")
    except Exception as e:
        print(f"‚ùå Qdrant reset failed: {e}")

def reset_neo4j():
    """–û—á–∏—Å—Ç–∫–∞ Neo4j"""
    try:
        driver = GraphDatabase.driver("bolt://localhost:7687")
        with driver.session() as session:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–∑–ª—ã –∏ —Å–≤—è–∑–∏
            session.run("MATCH (n) DETACH DELETE n")
            print("‚úÖ Neo4j database cleared")
    except Exception as e:
        print(f"‚ùå Neo4j reset failed: {e}")

def reset_processed_files():
    """–û—á–∏—Å—Ç–∫–∞ processed_files.json"""
    try:
        if os.path.exists("processed_files.json"):
            os.remove("processed_files.json")
            print("‚úÖ processed_files.json deleted")
    except Exception as e:
        print(f"‚ùå processed_files.json reset failed: {e}")

def move_files_back():
    """–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ processed –æ–±—Ä–∞—Ç–Ω–æ –≤ –∏—Å—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É"""
    try:
        processed_dir = Path("I:/docs/processed")
        source_dir = Path("I:/docs/downloaded/minstroyrf")
        
        if processed_dir.exists():
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞—Ç–Ω–æ
            for file_path in processed_dir.rglob("*"):
                if file_path.is_file():
                    relative_path = file_path.relative_to(processed_dir)
                    dest_path = source_dir / relative_path
                    dest_path.parent.mkdir(parents=True, exist_ok=True)
                    shutil.move(str(file_path), str(dest_path))
                    print(f"‚úÖ Moved back: {relative_path}")
            
            # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–∞–ø–∫–∏
            for empty_dir in processed_dir.rglob("*"):
                if empty_dir.is_dir() and not any(empty_dir.iterdir()):
                    empty_dir.rmdir()
                    print(f"‚úÖ Removed empty dir: {empty_dir}")
            
            print("‚úÖ All files moved back to source directory")
        else:
            print("‚ÑπÔ∏è No processed directory found")
    except Exception as e:
        print(f"‚ùå File move back failed: {e}")

def main():
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–∏—Å—Ç–µ–º—ã"""
    print("üîÑ –ü–û–õ–ù–´–ô –°–ë–†–û–° RAG –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm = input("‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): ")
    if confirm.lower() != 'yes':
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return
    
    print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–±—Ä–æ—Å...")
    
    # 1. –û—á–∏—Å—Ç–∫–∞ Qdrant
    print("\n1Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ Qdrant...")
    reset_qdrant()
    
    # 2. –û—á–∏—Å—Ç–∫–∞ Neo4j
    print("\n2Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ Neo4j...")
    reset_neo4j()
    
    # 3. –û—á–∏—Å—Ç–∫–∞ processed_files.json
    print("\n3Ô∏è‚É£ –û—á–∏—Å—Ç–∫–∞ processed_files.json...")
    reset_processed_files()
    
    # 4. –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ
    print("\n4Ô∏è‚É£ –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ...")
    move_files_back()
    
    print("\nüéâ –ü–û–õ–ù–´–ô –°–ë–†–û–° –ó–ê–í–ï–†–®–ï–ù!")
    print("‚úÖ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å .\\rag –¥–ª—è –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤")

if __name__ == "__main__":
    main()
